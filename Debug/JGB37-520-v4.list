
JGB37-520-v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000751c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076f4  080076f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080076f4  080076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076fc  080076fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000304  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bef0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003868  00000000  00000000  0004bf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ae8  00000000  00000000  0004f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a10  00000000  00000000  000512e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c86  00000000  00000000  00052cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a1d5  00000000  00000000  0007a97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da0d5  00000000  00000000  00094b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016ec28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007664  00000000  00000000  0016ec7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800768c 	.word	0x0800768c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800768c 	.word	0x0800768c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	4a0f      	ldr	r2, [pc, #60]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	; 0x44
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_I2C_MspInit+0x84>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12b      	bne.n	8000dc6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d8a:	23c0      	movs	r3, #192	; 0xc0
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <HAL_I2C_MspInit+0x8c>)
 8000da6:	f000 fbe1 	bl	800156c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_I2C_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020400 	.word	0x40020400

08000ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a4b      	ldr	r2, [pc, #300]	; (8000f28 <HAL_TIM_Base_MspInit+0x14c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10e      	bne.n	8000e1c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a49      	ldr	r2, [pc, #292]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b47      	ldr	r3, [pc, #284]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	61bb      	str	r3, [r7, #24]
 8000e18:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e1a:	e081      	b.n	8000f20 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d145      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	4b40      	ldr	r3, [pc, #256]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a3f      	ldr	r2, [pc, #252]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a38      	ldr	r2, [pc, #224]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	482d      	ldr	r0, [pc, #180]	; (8000f30 <HAL_TIM_Base_MspInit+0x154>)
 8000e7c:	f000 fb76 	bl	800156c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e80:	2308      	movs	r3, #8
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4825      	ldr	r0, [pc, #148]	; (8000f30 <HAL_TIM_Base_MspInit+0x154>)
 8000e9c:	f000 fb66 	bl	800156c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	201c      	movs	r0, #28
 8000ea6:	f000 fa98 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eaa:	201c      	movs	r0, #28
 8000eac:	f000 fab1 	bl	8001412 <HAL_NVIC_EnableIRQ>
}
 8000eb0:	e036      	b.n	8000f20 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM3)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <HAL_TIM_Base_MspInit+0x158>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d116      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	201d      	movs	r0, #29
 8000ede:	f000 fa7c 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee2:	201d      	movs	r0, #29
 8000ee4:	f000 fa95 	bl	8001412 <HAL_NVIC_EnableIRQ>
}
 8000ee8:	e01a      	b.n	8000f20 <HAL_TIM_Base_MspInit+0x144>
  else if(htim_base->Instance==TIM4)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <HAL_TIM_Base_MspInit+0x15c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d115      	bne.n	8000f20 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_TIM_Base_MspInit+0x150>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	201e      	movs	r0, #30
 8000f16:	f000 fa60 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f1a:	201e      	movs	r0, #30
 8000f1c:	f000 fa79 	bl	8001412 <HAL_NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40000400 	.word	0x40000400
 8000f38:	40000800 	.word	0x40000800

08000f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a1b      	ldr	r2, [pc, #108]	; (8000fc8 <HAL_TIM_MspPostInit+0x8c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12f      	bne.n	8000fbe <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_TIM_MspPostInit+0x90>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <HAL_TIM_MspPostInit+0x90>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_TIM_MspPostInit+0x90>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4619      	mov	r1, r3
 8000f96:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <HAL_TIM_MspPostInit+0x94>)
 8000f98:	f000 fae8 	bl	800156c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <HAL_TIM_MspPostInit+0x94>)
 8000fba:	f000 fad7 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40021000 	.word	0x40021000

08000fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_UART_MspInit+0x94>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d134      	bne.n	8001060 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HAL_UART_MspInit+0x98>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a1b      	ldr	r2, [pc, #108]	; (800106c <HAL_UART_MspInit+0x98>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_UART_MspInit+0x98>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_UART_MspInit+0x98>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_UART_MspInit+0x98>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_UART_MspInit+0x98>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800102e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001040:	2307      	movs	r3, #7
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <HAL_UART_MspInit+0x9c>)
 800104c:	f000 fa8e 	bl	800156c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2100      	movs	r1, #0
 8001054:	2025      	movs	r0, #37	; 0x25
 8001056:	f000 f9c0 	bl	80013da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800105a:	2025      	movs	r0, #37	; 0x25
 800105c:	f000 f9d9 	bl	8001412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40011000 	.word	0x40011000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c0:	f000 f890 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <SystemInit+0x20>)
 80010ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <SystemInit+0x20>)
 80010d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f2:	490e      	ldr	r1, [pc, #56]	; (800112c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f4:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001108:	4c0b      	ldr	r4, [pc, #44]	; (8001138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001116:	f7ff ffd7 	bl	80010c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111a:	f006 fa8b 	bl	8007634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f004 fc0d 	bl	800593c <main>
  bx  lr    
 8001122:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001130:	08007708 	.word	0x08007708
  ldr r2, =_sbss
 8001134:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001138:	20000378 	.word	0x20000378

0800113c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_Init+0x40>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_Init+0x40>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_Init+0x40>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f92b 	bl	80013c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	200f      	movs	r0, #15
 8001170:	f000 f808 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff fdc2 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f943 	bl	800142e <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f000 f90b 	bl	80013da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000314 	.word	0x20000314

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000314 	.word	0x20000314

08001224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	60d3      	str	r3, [r2, #12]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db0b      	blt.n	80012b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <__NVIC_EnableIRQ+0x38>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100

080012c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	db0a      	blt.n	80012ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <__NVIC_SetPriority+0x4c>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	440b      	add	r3, r1
 80012e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ec:	e00a      	b.n	8001304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4908      	ldr	r1, [pc, #32]	; (8001314 <__NVIC_SetPriority+0x50>)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	3b04      	subs	r3, #4
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	440b      	add	r3, r1
 8001302:	761a      	strb	r2, [r3, #24]
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001318:	b480      	push	{r7}
 800131a:	b089      	sub	sp, #36	; 0x24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2b04      	cmp	r3, #4
 8001334:	bf28      	it	cs
 8001336:	2304      	movcs	r3, #4
 8001338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3304      	adds	r3, #4
 800133e:	2b06      	cmp	r3, #6
 8001340:	d902      	bls.n	8001348 <NVIC_EncodePriority+0x30>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3b03      	subs	r3, #3
 8001346:	e000      	b.n	800134a <NVIC_EncodePriority+0x32>
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	f04f 32ff 	mov.w	r2, #4294967295
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43da      	mvns	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	401a      	ands	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001360:	f04f 31ff 	mov.w	r1, #4294967295
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa01 f303 	lsl.w	r3, r1, r3
 800136a:	43d9      	mvns	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	4313      	orrs	r3, r2
         );
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001390:	d301      	bcc.n	8001396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001392:	2301      	movs	r3, #1
 8001394:	e00f      	b.n	80013b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <SysTick_Config+0x40>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139e:	210f      	movs	r1, #15
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f7ff ff8e 	bl	80012c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <SysTick_Config+0x40>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ae:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <SysTick_Config+0x40>)
 80013b0:	2207      	movs	r2, #7
 80013b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	e000e010 	.word	0xe000e010

080013c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ff29 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ec:	f7ff ff3e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff ff8e 	bl	8001318 <NVIC_EncodePriority>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff5d 	bl	80012c4 <__NVIC_SetPriority>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff31 	bl	8001288 <__NVIC_EnableIRQ>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffa2 	bl	8001380 <SysTick_Config>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff feda 	bl	800120c <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d008      	beq.n	8001478 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e052      	b.n	800151e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0216 	bic.w	r2, r2, #22
 8001486:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001496:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <HAL_DMA_Abort+0x62>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0208 	bic.w	r2, r2, #8
 80014b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c8:	e013      	b.n	80014f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ca:	f7ff fe9f 	bl	800120c <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d90c      	bls.n	80014f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2220      	movs	r2, #32
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2203      	movs	r2, #3
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e015      	b.n	800151e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1e4      	bne.n	80014ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001504:	223f      	movs	r2, #63	; 0x3f
 8001506:	409a      	lsls	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d004      	beq.n	8001544 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e00c      	b.n	800155e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2205      	movs	r2, #5
 8001548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e16b      	b.n	8001860 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001588:	2201      	movs	r2, #1
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	697a      	ldr	r2, [r7, #20]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	f040 815a 	bne.w	800185a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0303 	and.w	r3, r3, #3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d005      	beq.n	80015be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d130      	bne.n	8001620 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f4:	2201      	movs	r2, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 0201 	and.w	r2, r3, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b03      	cmp	r3, #3
 800162a:	d017      	beq.n	800165c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	2203      	movs	r2, #3
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d123      	bne.n	80016b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	691a      	ldr	r2, [r3, #16]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	08da      	lsrs	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3208      	adds	r2, #8
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0203 	and.w	r2, r3, #3
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80b4 	beq.w	800185a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b60      	ldr	r3, [pc, #384]	; (8001878 <HAL_GPIO_Init+0x30c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a5f      	ldr	r2, [pc, #380]	; (8001878 <HAL_GPIO_Init+0x30c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <HAL_GPIO_Init+0x30c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800170e:	4a5b      	ldr	r2, [pc, #364]	; (800187c <HAL_GPIO_Init+0x310>)
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	089b      	lsrs	r3, r3, #2
 8001714:	3302      	adds	r3, #2
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_GPIO_Init+0x314>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d02b      	beq.n	8001792 <HAL_GPIO_Init+0x226>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a51      	ldr	r2, [pc, #324]	; (8001884 <HAL_GPIO_Init+0x318>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d025      	beq.n	800178e <HAL_GPIO_Init+0x222>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a50      	ldr	r2, [pc, #320]	; (8001888 <HAL_GPIO_Init+0x31c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01f      	beq.n	800178a <HAL_GPIO_Init+0x21e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4f      	ldr	r2, [pc, #316]	; (800188c <HAL_GPIO_Init+0x320>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x21a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <HAL_GPIO_Init+0x324>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x216>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4d      	ldr	r2, [pc, #308]	; (8001894 <HAL_GPIO_Init+0x328>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x212>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4c      	ldr	r2, [pc, #304]	; (8001898 <HAL_GPIO_Init+0x32c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x20e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4b      	ldr	r2, [pc, #300]	; (800189c <HAL_GPIO_Init+0x330>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x20a>
 8001772:	2307      	movs	r3, #7
 8001774:	e00e      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001776:	2308      	movs	r3, #8
 8001778:	e00c      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800177a:	2306      	movs	r3, #6
 800177c:	e00a      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800177e:	2305      	movs	r3, #5
 8001780:	e008      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001782:	2304      	movs	r3, #4
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001786:	2303      	movs	r3, #3
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x228>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x228>
 8001792:	2300      	movs	r3, #0
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4093      	lsls	r3, r2
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a4:	4935      	ldr	r1, [pc, #212]	; (800187c <HAL_GPIO_Init+0x310>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_GPIO_Init+0x334>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d6:	4a32      	ldr	r2, [pc, #200]	; (80018a0 <HAL_GPIO_Init+0x334>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017dc:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_GPIO_Init+0x334>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_GPIO_Init+0x334>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001806:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <HAL_GPIO_Init+0x334>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182a:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_GPIO_Init+0x334>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_GPIO_Init+0x334>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001854:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_GPIO_Init+0x334>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	f67f ae90 	bls.w	8001588 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40021000 	.word	0x40021000
 8001894:	40021400 	.word	0x40021400
 8001898:	40021800 	.word	0x40021800
 800189c:	40021c00 	.word	0x40021c00
 80018a0:	40013c00 	.word	0x40013c00

080018a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691a      	ldr	r2, [r3, #16]
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	4013      	ands	r3, r2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
 80018e0:	4613      	mov	r3, r2
 80018e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e4:	787b      	ldrb	r3, [r7, #1]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018f0:	e003      	b.n	80018fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	041a      	lsls	r2, r3, #16
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	619a      	str	r2, [r3, #24]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	4618      	mov	r0, r3
 8001928:	f004 f84b 	bl	80059c2 <HAL_GPIO_EXTI_Callback>
  }
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e12b      	b.n	8001ba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff f9f4 	bl	8000d4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2224      	movs	r2, #36	; 0x24
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f022 0201 	bic.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800198a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800199a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800199c:	f001 fd12 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 80019a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	4a81      	ldr	r2, [pc, #516]	; (8001bac <HAL_I2C_Init+0x274>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d807      	bhi.n	80019bc <HAL_I2C_Init+0x84>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a80      	ldr	r2, [pc, #512]	; (8001bb0 <HAL_I2C_Init+0x278>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	bf94      	ite	ls
 80019b4:	2301      	movls	r3, #1
 80019b6:	2300      	movhi	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	e006      	b.n	80019ca <HAL_I2C_Init+0x92>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a7d      	ldr	r2, [pc, #500]	; (8001bb4 <HAL_I2C_Init+0x27c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	bf94      	ite	ls
 80019c4:	2301      	movls	r3, #1
 80019c6:	2300      	movhi	r3, #0
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0e7      	b.n	8001ba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4a78      	ldr	r2, [pc, #480]	; (8001bb8 <HAL_I2C_Init+0x280>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9b      	lsrs	r3, r3, #18
 80019dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	4a6a      	ldr	r2, [pc, #424]	; (8001bac <HAL_I2C_Init+0x274>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d802      	bhi.n	8001a0c <HAL_I2C_Init+0xd4>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	e009      	b.n	8001a20 <HAL_I2C_Init+0xe8>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	4a69      	ldr	r2, [pc, #420]	; (8001bbc <HAL_I2C_Init+0x284>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	3301      	adds	r3, #1
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	495c      	ldr	r1, [pc, #368]	; (8001bac <HAL_I2C_Init+0x274>)
 8001a3c:	428b      	cmp	r3, r1
 8001a3e:	d819      	bhi.n	8001a74 <HAL_I2C_Init+0x13c>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e59      	subs	r1, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a4e:	1c59      	adds	r1, r3, #1
 8001a50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a54:	400b      	ands	r3, r1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00a      	beq.n	8001a70 <HAL_I2C_Init+0x138>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1e59      	subs	r1, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6e:	e051      	b.n	8001b14 <HAL_I2C_Init+0x1dc>
 8001a70:	2304      	movs	r3, #4
 8001a72:	e04f      	b.n	8001b14 <HAL_I2C_Init+0x1dc>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d111      	bne.n	8001aa0 <HAL_I2C_Init+0x168>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e58      	subs	r0, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	440b      	add	r3, r1
 8001a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e012      	b.n	8001ac6 <HAL_I2C_Init+0x18e>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e58      	subs	r0, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	0099      	lsls	r1, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Init+0x196>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e022      	b.n	8001b14 <HAL_I2C_Init+0x1dc>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10e      	bne.n	8001af4 <HAL_I2C_Init+0x1bc>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e58      	subs	r0, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6859      	ldr	r1, [r3, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	440b      	add	r3, r1
 8001ae4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af2:	e00f      	b.n	8001b14 <HAL_I2C_Init+0x1dc>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1e58      	subs	r0, r3, #1
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	0099      	lsls	r1, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	6809      	ldr	r1, [r1, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6911      	ldr	r1, [r2, #16]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68d2      	ldr	r2, [r2, #12]
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	000186a0 	.word	0x000186a0
 8001bb0:	001e847f 	.word	0x001e847f
 8001bb4:	003d08ff 	.word	0x003d08ff
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	10624dd3 	.word	0x10624dd3

08001bc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	607a      	str	r2, [r7, #4]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	460b      	mov	r3, r1
 8001bce:	817b      	strh	r3, [r7, #10]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff fb1a 	bl	800120c <HAL_GetTick>
 8001bd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	f040 80e0 	bne.w	8001da8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2319      	movs	r3, #25
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4970      	ldr	r1, [pc, #448]	; (8001db4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fde8 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e0d3      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_I2C_Master_Transmit+0x50>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e0cc      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d007      	beq.n	8001c36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2221      	movs	r2, #33	; 0x21
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2210      	movs	r2, #16
 8001c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	893a      	ldrh	r2, [r7, #8]
 8001c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fbbc 	bl	80023fc <I2C_MasterRequestWrite>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e08d      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ca4:	e066      	b.n	8001d74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	6a39      	ldr	r1, [r7, #32]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 fe62 	bl	8002974 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d107      	bne.n	8001cce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e06b      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d11b      	bne.n	8001d48 <HAL_I2C_Master_Transmit+0x188>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d017      	beq.n	8001d48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	6a39      	ldr	r1, [r7, #32]
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fe52 	bl	80029f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00d      	beq.n	8001d74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d107      	bne.n	8001d70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e01a      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d194      	bne.n	8001ca6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e000      	b.n	8001daa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001da8:	2302      	movs	r3, #2
  }
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	00100002 	.word	0x00100002
 8001db8:	ffff0000 	.word	0xffff0000

08001dbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	817b      	strh	r3, [r7, #10]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff fa1c 	bl	800120c <HAL_GetTick>
 8001dd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	f040 820b 	bne.w	80021fa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2319      	movs	r3, #25
 8001dea:	2201      	movs	r2, #1
 8001dec:	497c      	ldr	r1, [pc, #496]	; (8001fe0 <HAL_I2C_Master_Receive+0x224>)
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fcea 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e1fe      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_I2C_Master_Receive+0x50>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e1f7      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d007      	beq.n	8001e32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2222      	movs	r2, #34	; 0x22
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2210      	movs	r2, #16
 8001e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	893a      	ldrh	r2, [r7, #8]
 8001e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4a5c      	ldr	r2, [pc, #368]	; (8001fe4 <HAL_I2C_Master_Receive+0x228>)
 8001e72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fb40 	bl	8002500 <I2C_MasterRequestRead>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1b8      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d113      	bne.n	8001eba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	623b      	str	r3, [r7, #32]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	623b      	str	r3, [r7, #32]
 8001ea6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e18c      	b.n	80021d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d11b      	bne.n	8001efa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	61fb      	str	r3, [r7, #28]
 8001ee6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e16c      	b.n	80021d4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d11b      	bne.n	8001f3a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	e14c      	b.n	80021d4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f60:	e138      	b.n	80021d4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	f200 80f1 	bhi.w	800214e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d123      	bne.n	8001fbc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fd7d 	bl	8002a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e139      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fba:	e10b      	b.n	80021d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d14e      	bne.n	8002062 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4906      	ldr	r1, [pc, #24]	; (8001fe8 <HAL_I2C_Master_Receive+0x22c>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fbfa 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e10e      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
 8001fde:	bf00      	nop
 8001fe0:	00100002 	.word	0x00100002
 8001fe4:	ffff0000 	.word	0xffff0000
 8001fe8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	691a      	ldr	r2, [r3, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002060:	e0b8      	b.n	80021d4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	2200      	movs	r2, #0
 800206a:	4966      	ldr	r1, [pc, #408]	; (8002204 <HAL_I2C_Master_Receive+0x448>)
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fbab 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0bf      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800208a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	2200      	movs	r2, #0
 80020c6:	494f      	ldr	r1, [pc, #316]	; (8002204 <HAL_I2C_Master_Receive+0x448>)
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 fb7d 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e091      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691a      	ldr	r2, [r3, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800214c:	e042      	b.n	80021d4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fc90 	bl	8002a78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e04c      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b04      	cmp	r3, #4
 80021a0:	d118      	bne.n	80021d4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f47f aec2 	bne.w	8001f62 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e000      	b.n	80021fc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	00010004 	.word	0x00010004

08002208 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af02      	add	r7, sp, #8
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4603      	mov	r3, r0
 8002218:	817b      	strh	r3, [r7, #10]
 800221a:	460b      	mov	r3, r1
 800221c:	813b      	strh	r3, [r7, #8]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002222:	f7fe fff3 	bl	800120c <HAL_GetTick>
 8002226:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b20      	cmp	r3, #32
 8002232:	f040 80d9 	bne.w	80023e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2319      	movs	r3, #25
 800223c:	2201      	movs	r2, #1
 800223e:	496d      	ldr	r1, [pc, #436]	; (80023f4 <HAL_I2C_Mem_Write+0x1ec>)
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fac1 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
 800224e:	e0cc      	b.n	80023ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_I2C_Mem_Write+0x56>
 800225a:	2302      	movs	r3, #2
 800225c:	e0c5      	b.n	80023ea <HAL_I2C_Mem_Write+0x1e2>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d007      	beq.n	8002284 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002292:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2221      	movs	r2, #33	; 0x21
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6a3a      	ldr	r2, [r7, #32]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4a4d      	ldr	r2, [pc, #308]	; (80023f8 <HAL_I2C_Mem_Write+0x1f0>)
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022c6:	88f8      	ldrh	r0, [r7, #6]
 80022c8:	893a      	ldrh	r2, [r7, #8]
 80022ca:	8979      	ldrh	r1, [r7, #10]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	4603      	mov	r3, r0
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f9e0 	bl	800269c <I2C_RequestMemoryWrite>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d052      	beq.n	8002388 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e081      	b.n	80023ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fb42 	bl	8002974 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d107      	bne.n	800230e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e06b      	b.n	80023ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d11b      	bne.n	8002388 <HAL_I2C_Mem_Write+0x180>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d017      	beq.n	8002388 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1aa      	bne.n	80022e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fb2e 	bl	80029f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00d      	beq.n	80023bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d107      	bne.n	80023b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e016      	b.n	80023ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	00100002 	.word	0x00100002
 80023f8:	ffff0000 	.word	0xffff0000

080023fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	460b      	mov	r3, r1
 800240a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d006      	beq.n	8002426 <I2C_MasterRequestWrite+0x2a>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d003      	beq.n	8002426 <I2C_MasterRequestWrite+0x2a>
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002424:	d108      	bne.n	8002438 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e00b      	b.n	8002450 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	2b12      	cmp	r3, #18
 800243e:	d107      	bne.n	8002450 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800244e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f9b3 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002476:	d103      	bne.n	8002480 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e035      	b.n	80024f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800248c:	d108      	bne.n	80024a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800248e:	897b      	ldrh	r3, [r7, #10]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800249c:	611a      	str	r2, [r3, #16]
 800249e:	e01b      	b.n	80024d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024a0:	897b      	ldrh	r3, [r7, #10]
 80024a2:	11db      	asrs	r3, r3, #7
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f003 0306 	and.w	r3, r3, #6
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f063 030f 	orn	r3, r3, #15
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <I2C_MasterRequestWrite+0xfc>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f9d9 	bl	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e010      	b.n	80024f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ce:	897b      	ldrh	r3, [r7, #10]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <I2C_MasterRequestWrite+0x100>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f9c9 	bl	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	00010008 	.word	0x00010008
 80024fc:	00010002 	.word	0x00010002

08002500 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	603b      	str	r3, [r7, #0]
 800250c:	460b      	mov	r3, r1
 800250e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002524:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d006      	beq.n	800253a <I2C_MasterRequestRead+0x3a>
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d003      	beq.n	800253a <I2C_MasterRequestRead+0x3a>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002538:	d108      	bne.n	800254c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	e00b      	b.n	8002564 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	2b11      	cmp	r3, #17
 8002552:	d107      	bne.n	8002564 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002562:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f929 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00d      	beq.n	8002598 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258a:	d103      	bne.n	8002594 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e079      	b.n	800268c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a0:	d108      	bne.n	80025b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025a2:	897b      	ldrh	r3, [r7, #10]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	611a      	str	r2, [r3, #16]
 80025b2:	e05f      	b.n	8002674 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025b4:	897b      	ldrh	r3, [r7, #10]
 80025b6:	11db      	asrs	r3, r3, #7
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	f003 0306 	and.w	r3, r3, #6
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	f063 030f 	orn	r3, r3, #15
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4930      	ldr	r1, [pc, #192]	; (8002694 <I2C_MasterRequestRead+0x194>)
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f94f 	bl	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e054      	b.n	800268c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025e2:	897b      	ldrh	r3, [r7, #10]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4929      	ldr	r1, [pc, #164]	; (8002698 <I2C_MasterRequestRead+0x198>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f93f 	bl	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e044      	b.n	800268c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002626:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f8c7 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00d      	beq.n	800265c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264e:	d103      	bne.n	8002658 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e017      	b.n	800268c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800265c:	897b      	ldrh	r3, [r7, #10]
 800265e:	11db      	asrs	r3, r3, #7
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 0306 	and.w	r3, r3, #6
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f063 030e 	orn	r3, r3, #14
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4907      	ldr	r1, [pc, #28]	; (8002698 <I2C_MasterRequestRead+0x198>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f8fb 	bl	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	00010008 	.word	0x00010008
 8002698:	00010002 	.word	0x00010002

0800269c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	4608      	mov	r0, r1
 80026a6:	4611      	mov	r1, r2
 80026a8:	461a      	mov	r2, r3
 80026aa:	4603      	mov	r3, r0
 80026ac:	817b      	strh	r3, [r7, #10]
 80026ae:	460b      	mov	r3, r1
 80026b0:	813b      	strh	r3, [r7, #8]
 80026b2:	4613      	mov	r3, r2
 80026b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f878 	bl	80027c8 <I2C_WaitOnFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ec:	d103      	bne.n	80026f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e05f      	b.n	80027ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002708:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	6a3a      	ldr	r2, [r7, #32]
 800270e:	492d      	ldr	r1, [pc, #180]	; (80027c4 <I2C_RequestMemoryWrite+0x128>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f8b0 	bl	8002876 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e04c      	b.n	80027ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002738:	6a39      	ldr	r1, [r7, #32]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f91a 	bl	8002974 <I2C_WaitOnTXEFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00d      	beq.n	8002762 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b04      	cmp	r3, #4
 800274c:	d107      	bne.n	800275e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e02b      	b.n	80027ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d105      	bne.n	8002774 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002768:	893b      	ldrh	r3, [r7, #8]
 800276a:	b2da      	uxtb	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e021      	b.n	80027b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002774:	893b      	ldrh	r3, [r7, #8]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	b29b      	uxth	r3, r3
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002784:	6a39      	ldr	r1, [r7, #32]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f8f4 	bl	8002974 <I2C_WaitOnTXEFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00d      	beq.n	80027ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	2b04      	cmp	r3, #4
 8002798:	d107      	bne.n	80027aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e005      	b.n	80027ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027ae:	893b      	ldrh	r3, [r7, #8]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	00010002 	.word	0x00010002

080027c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d8:	e025      	b.n	8002826 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d021      	beq.n	8002826 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7fe fd13 	bl	800120c <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d116      	bne.n	8002826 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e023      	b.n	800286e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10d      	bne.n	800284c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	43da      	mvns	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4013      	ands	r3, r2
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	bf0c      	ite	eq
 8002842:	2301      	moveq	r3, #1
 8002844:	2300      	movne	r3, #0
 8002846:	b2db      	uxtb	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	e00c      	b.n	8002866 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	43da      	mvns	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4013      	ands	r3, r2
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	bf0c      	ite	eq
 800285e:	2301      	moveq	r3, #1
 8002860:	2300      	movne	r3, #0
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	429a      	cmp	r2, r3
 800286a:	d0b6      	beq.n	80027da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002884:	e051      	b.n	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002894:	d123      	bne.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f043 0204 	orr.w	r2, r3, #4
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e046      	b.n	800296c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e4:	d021      	beq.n	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e6:	f7fe fc91 	bl	800120c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d302      	bcc.n	80028fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d116      	bne.n	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f043 0220 	orr.w	r2, r3, #32
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e020      	b.n	800296c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d10c      	bne.n	800294e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4013      	ands	r3, r2
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e00b      	b.n	8002966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	43da      	mvns	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d18d      	bne.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002980:	e02d      	b.n	80029de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8ce 	bl	8002b24 <I2C_IsAcknowledgeFailed>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e02d      	b.n	80029ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d021      	beq.n	80029de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7fe fc37 	bl	800120c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d116      	bne.n	80029de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e007      	b.n	80029ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b80      	cmp	r3, #128	; 0x80
 80029ea:	d1ca      	bne.n	8002982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a02:	e02d      	b.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f88d 	bl	8002b24 <I2C_IsAcknowledgeFailed>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e02d      	b.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1a:	d021      	beq.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1c:	f7fe fbf6 	bl	800120c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d116      	bne.n	8002a60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f043 0220 	orr.w	r2, r3, #32
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e007      	b.n	8002a70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d1ca      	bne.n	8002a04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a84:	e042      	b.n	8002b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d119      	bne.n	8002ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0210 	mvn.w	r2, #16
 8002a9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e029      	b.n	8002b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac8:	f7fe fba0 	bl	800120c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e007      	b.n	8002b1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d1b5      	bne.n	8002a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d11b      	bne.n	8002b74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f043 0204 	orr.w	r2, r3, #4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e264      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d075      	beq.n	8002c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba2:	4ba3      	ldr	r3, [pc, #652]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d00c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bae:	4ba0      	ldr	r3, [pc, #640]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	d112      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bba:	4b9d      	ldr	r3, [pc, #628]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	4b99      	ldr	r3, [pc, #612]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05b      	beq.n	8002c8c <HAL_RCC_OscConfig+0x108>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d157      	bne.n	8002c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e23f      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x74>
 8002bea:	4b91      	ldr	r3, [pc, #580]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a90      	ldr	r2, [pc, #576]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e01d      	b.n	8002c34 <HAL_RCC_OscConfig+0xb0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b8b      	ldr	r3, [pc, #556]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a8a      	ldr	r2, [pc, #552]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b88      	ldr	r3, [pc, #544]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a87      	ldr	r2, [pc, #540]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e00b      	b.n	8002c34 <HAL_RCC_OscConfig+0xb0>
 8002c1c:	4b84      	ldr	r3, [pc, #528]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a83      	ldr	r2, [pc, #524]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d013      	beq.n	8002c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe fae6 	bl	800120c <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe fae2 	bl	800120c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e204      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b76      	ldr	r3, [pc, #472]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0xc0>
 8002c62:	e014      	b.n	8002c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fad2 	bl	800120c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe face 	bl	800120c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1f0      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	4b6c      	ldr	r3, [pc, #432]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0xe8>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d063      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9a:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca6:	4b62      	ldr	r3, [pc, #392]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d11c      	bne.n	8002cec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b5f      	ldr	r3, [pc, #380]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d116      	bne.n	8002cec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbe:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x152>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d001      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e1c4      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4952      	ldr	r1, [pc, #328]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	e03a      	b.n	8002d62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d020      	beq.n	8002d36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf4:	4b4f      	ldr	r3, [pc, #316]	; (8002e34 <HAL_RCC_OscConfig+0x2b0>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fa87 	bl	800120c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d02:	f7fe fa83 	bl	800120c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1a5      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	4b46      	ldr	r3, [pc, #280]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4940      	ldr	r1, [pc, #256]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]
 8002d34:	e015      	b.n	8002d62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d36:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <HAL_RCC_OscConfig+0x2b0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fa66 	bl	800120c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d44:	f7fe fa62 	bl	800120c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e184      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d030      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d76:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_RCC_OscConfig+0x2b4>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fa46 	bl	800120c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d84:	f7fe fa42 	bl	800120c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e164      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d96:	4b26      	ldr	r3, [pc, #152]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0x200>
 8002da2:	e015      	b.n	8002dd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da4:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x2b4>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fa2f 	bl	800120c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db2:	f7fe fa2b 	bl	800120c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e14d      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80a0 	beq.w	8002f1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de2:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10f      	bne.n	8002e0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a0e      	ldr	r2, [pc, #56]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_OscConfig+0x2b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d121      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1a:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_RCC_OscConfig+0x2b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a07      	ldr	r2, [pc, #28]	; (8002e3c <HAL_RCC_OscConfig+0x2b8>)
 8002e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e26:	f7fe f9f1 	bl	800120c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e011      	b.n	8002e52 <HAL_RCC_OscConfig+0x2ce>
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	42470000 	.word	0x42470000
 8002e38:	42470e80 	.word	0x42470e80
 8002e3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e40:	f7fe f9e4 	bl	800120c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e106      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b85      	ldr	r3, [pc, #532]	; (8003068 <HAL_RCC_OscConfig+0x4e4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
 8002e66:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a80      	ldr	r2, [pc, #512]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	e01c      	b.n	8002eae <HAL_RCC_OscConfig+0x32a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x312>
 8002e7c:	4b7b      	ldr	r3, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a7a      	ldr	r2, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	4b78      	ldr	r3, [pc, #480]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	e00b      	b.n	8002eae <HAL_RCC_OscConfig+0x32a>
 8002e96:	4b75      	ldr	r3, [pc, #468]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a74      	ldr	r2, [pc, #464]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	4b72      	ldr	r3, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a71      	ldr	r2, [pc, #452]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002ea8:	f023 0304 	bic.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d015      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb6:	f7fe f9a9 	bl	800120c <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fe f9a5 	bl	800120c <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0c5      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed4:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ee      	beq.n	8002ebe <HAL_RCC_OscConfig+0x33a>
 8002ee0:	e014      	b.n	8002f0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee2:	f7fe f993 	bl	800120c <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe f98f 	bl	800120c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0af      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f00:	4b5a      	ldr	r3, [pc, #360]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ee      	bne.n	8002eea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	4a55      	ldr	r2, [pc, #340]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 809b 	beq.w	800305e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d05c      	beq.n	8002fee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d141      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <HAL_RCC_OscConfig+0x4ec>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe f963 	bl	800120c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe f95f 	bl	800120c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e081      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5c:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	019b      	lsls	r3, r3, #6
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	3b01      	subs	r3, #1
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	4937      	ldr	r1, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <HAL_RCC_OscConfig+0x4ec>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe f938 	bl	800120c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe f934 	bl	800120c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e056      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
 8002fbe:	e04e      	b.n	800305e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_OscConfig+0x4ec>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc6:	f7fe f921 	bl	800120c <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe f91d 	bl	800120c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e03f      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x44a>
 8002fec:	e037      	b.n	800305e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e032      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_RCC_OscConfig+0x4e8>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d028      	beq.n	800305a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d121      	bne.n	800305a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d11a      	bne.n	800305a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003030:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003032:	4293      	cmp	r3, r2
 8003034:	d111      	bne.n	800305a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	085b      	lsrs	r3, r3, #1
 8003042:	3b01      	subs	r3, #1
 8003044:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d107      	bne.n	800305a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40007000 	.word	0x40007000
 800306c:	40023800 	.word	0x40023800
 8003070:	42470060 	.word	0x42470060

08003074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0cc      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003088:	4b68      	ldr	r3, [pc, #416]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d90c      	bls.n	80030b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b65      	ldr	r3, [pc, #404]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0b8      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d020      	beq.n	80030fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a58      	ldr	r2, [pc, #352]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a52      	ldr	r2, [pc, #328]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ec:	4b50      	ldr	r3, [pc, #320]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	494d      	ldr	r1, [pc, #308]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d044      	beq.n	8003194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b47      	ldr	r3, [pc, #284]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d119      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e07f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d003      	beq.n	8003132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312e:	2b03      	cmp	r3, #3
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e06f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b3b      	ldr	r3, [pc, #236]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e067      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b37      	ldr	r3, [pc, #220]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4934      	ldr	r1, [pc, #208]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003164:	f7fe f852 	bl	800120c <HAL_GetTick>
 8003168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fe f84e 	bl	800120c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e04f      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d20c      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_ClockConfig+0x1b8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e032      	b.n	8003222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4916      	ldr	r1, [pc, #88]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	490e      	ldr	r1, [pc, #56]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031fa:	f000 f821 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031fe:	4602      	mov	r2, r0
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	490a      	ldr	r1, [pc, #40]	; (8003234 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	5ccb      	ldrb	r3, [r1, r3]
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd ffb2 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023c00 	.word	0x40023c00
 8003230:	40023800 	.word	0x40023800
 8003234:	080076a4 	.word	0x080076a4
 8003238:	20000000 	.word	0x20000000
 800323c:	20000004 	.word	0x20000004

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003246:	2100      	movs	r1, #0
 8003248:	6079      	str	r1, [r7, #4]
 800324a:	2100      	movs	r1, #0
 800324c:	60f9      	str	r1, [r7, #12]
 800324e:	2100      	movs	r1, #0
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003252:	2100      	movs	r1, #0
 8003254:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003256:	4952      	ldr	r1, [pc, #328]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003258:	6889      	ldr	r1, [r1, #8]
 800325a:	f001 010c 	and.w	r1, r1, #12
 800325e:	2908      	cmp	r1, #8
 8003260:	d00d      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x3e>
 8003262:	2908      	cmp	r1, #8
 8003264:	f200 8094 	bhi.w	8003390 <HAL_RCC_GetSysClockFreq+0x150>
 8003268:	2900      	cmp	r1, #0
 800326a:	d002      	beq.n	8003272 <HAL_RCC_GetSysClockFreq+0x32>
 800326c:	2904      	cmp	r1, #4
 800326e:	d003      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x38>
 8003270:	e08e      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003272:	4b4c      	ldr	r3, [pc, #304]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003274:	60bb      	str	r3, [r7, #8]
       break;
 8003276:	e08e      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003278:	4b4b      	ldr	r3, [pc, #300]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x168>)
 800327a:	60bb      	str	r3, [r7, #8]
      break;
 800327c:	e08b      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327e:	4948      	ldr	r1, [pc, #288]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003280:	6849      	ldr	r1, [r1, #4]
 8003282:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003286:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003288:	4945      	ldr	r1, [pc, #276]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800328a:	6849      	ldr	r1, [r1, #4]
 800328c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003290:	2900      	cmp	r1, #0
 8003292:	d024      	beq.n	80032de <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003294:	4942      	ldr	r1, [pc, #264]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003296:	6849      	ldr	r1, [r1, #4]
 8003298:	0989      	lsrs	r1, r1, #6
 800329a:	4608      	mov	r0, r1
 800329c:	f04f 0100 	mov.w	r1, #0
 80032a0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80032a4:	f04f 0500 	mov.w	r5, #0
 80032a8:	ea00 0204 	and.w	r2, r0, r4
 80032ac:	ea01 0305 	and.w	r3, r1, r5
 80032b0:	493d      	ldr	r1, [pc, #244]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80032b2:	fb01 f003 	mul.w	r0, r1, r3
 80032b6:	2100      	movs	r1, #0
 80032b8:	fb01 f102 	mul.w	r1, r1, r2
 80032bc:	1844      	adds	r4, r0, r1
 80032be:	493a      	ldr	r1, [pc, #232]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x168>)
 80032c0:	fba2 0101 	umull	r0, r1, r2, r1
 80032c4:	1863      	adds	r3, r4, r1
 80032c6:	4619      	mov	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	f7fd fb98 	bl	8000a04 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e04a      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032de:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	461a      	mov	r2, r3
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	ea02 0400 	and.w	r4, r2, r0
 80032f6:	ea03 0501 	and.w	r5, r3, r1
 80032fa:	4620      	mov	r0, r4
 80032fc:	4629      	mov	r1, r5
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	014b      	lsls	r3, r1, #5
 8003308:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800330c:	0142      	lsls	r2, r0, #5
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	1b00      	subs	r0, r0, r4
 8003314:	eb61 0105 	sbc.w	r1, r1, r5
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	018b      	lsls	r3, r1, #6
 8003322:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003326:	0182      	lsls	r2, r0, #6
 8003328:	1a12      	subs	r2, r2, r0
 800332a:	eb63 0301 	sbc.w	r3, r3, r1
 800332e:	f04f 0000 	mov.w	r0, #0
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	00d9      	lsls	r1, r3, #3
 8003338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800333c:	00d0      	lsls	r0, r2, #3
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	1912      	adds	r2, r2, r4
 8003344:	eb45 0303 	adc.w	r3, r5, r3
 8003348:	f04f 0000 	mov.w	r0, #0
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	0299      	lsls	r1, r3, #10
 8003352:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003356:	0290      	lsls	r0, r2, #10
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	f7fd fb4c 	bl	8000a04 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4613      	mov	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	3301      	adds	r3, #1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	60bb      	str	r3, [r7, #8]
      break;
 800338e:	e002      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003392:	60bb      	str	r3, [r7, #8]
      break;
 8003394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003396:	68bb      	ldr	r3, [r7, #8]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bdb0      	pop	{r4, r5, r7, pc}
 80033a0:	40023800 	.word	0x40023800
 80033a4:	00f42400 	.word	0x00f42400
 80033a8:	017d7840 	.word	0x017d7840

080033ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000000 	.word	0x20000000

080033c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033c8:	f7ff fff0 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	0a9b      	lsrs	r3, r3, #10
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	4903      	ldr	r1, [pc, #12]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40023800 	.word	0x40023800
 80033e8:	080076b4 	.word	0x080076b4

080033ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033f0:	f7ff ffdc 	bl	80033ac <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	0b5b      	lsrs	r3, r3, #13
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	; (8003410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	080076b4 	.word	0x080076b4

08003414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e041      	b.n	80034aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d106      	bne.n	8003440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fcce 	bl	8000ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	4619      	mov	r1, r3
 8003452:	4610      	mov	r0, r2
 8003454:	f000 fe8e 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d001      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e04e      	b.n	800356a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a23      	ldr	r2, [pc, #140]	; (8003578 <HAL_TIM_Base_Start_IT+0xc4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d022      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d01d      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1f      	ldr	r2, [pc, #124]	; (800357c <HAL_TIM_Base_Start_IT+0xc8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d018      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_TIM_Base_Start_IT+0xcc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <HAL_TIM_Base_Start_IT+0xd0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00e      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_TIM_Base_Start_IT+0xd4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d009      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_TIM_Base_Start_IT+0xd8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d004      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x80>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIM_Base_Start_IT+0xdc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d010      	beq.n	8003568 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003556:	e007      	b.n	8003568 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40010000 	.word	0x40010000
 800357c:	40000400 	.word	0x40000400
 8003580:	40000800 	.word	0x40000800
 8003584:	40000c00 	.word	0x40000c00
 8003588:	40010400 	.word	0x40010400
 800358c:	40014000 	.word	0x40014000
 8003590:	40001800 	.word	0x40001800

08003594 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e041      	b.n	800362a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f839 	bl	8003632 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f000 fdce 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_TIM_PWM_Start+0x24>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e022      	b.n	80036b2 <HAL_TIM_PWM_Start+0x6a>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b04      	cmp	r3, #4
 8003670:	d109      	bne.n	8003686 <HAL_TIM_PWM_Start+0x3e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e015      	b.n	80036b2 <HAL_TIM_PWM_Start+0x6a>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d109      	bne.n	80036a0 <HAL_TIM_PWM_Start+0x58>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	bf14      	ite	ne
 8003698:	2301      	movne	r3, #1
 800369a:	2300      	moveq	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	e008      	b.n	80036b2 <HAL_TIM_PWM_Start+0x6a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e07c      	b.n	80037b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <HAL_TIM_PWM_Start+0x82>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c8:	e013      	b.n	80036f2 <HAL_TIM_PWM_Start+0xaa>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d104      	bne.n	80036da <HAL_TIM_PWM_Start+0x92>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d8:	e00b      	b.n	80036f2 <HAL_TIM_PWM_Start+0xaa>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d104      	bne.n	80036ea <HAL_TIM_PWM_Start+0xa2>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e8:	e003      	b.n	80036f2 <HAL_TIM_PWM_Start+0xaa>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	6839      	ldr	r1, [r7, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 f94e 	bl	800499c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2d      	ldr	r2, [pc, #180]	; (80037bc <HAL_TIM_PWM_Start+0x174>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIM_PWM_Start+0xcc>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2c      	ldr	r2, [pc, #176]	; (80037c0 <HAL_TIM_PWM_Start+0x178>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_TIM_PWM_Start+0xd0>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_TIM_PWM_Start+0xd2>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a22      	ldr	r2, [pc, #136]	; (80037bc <HAL_TIM_PWM_Start+0x174>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d01d      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1f      	ldr	r2, [pc, #124]	; (80037c4 <HAL_TIM_PWM_Start+0x17c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <HAL_TIM_PWM_Start+0x180>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <HAL_TIM_PWM_Start+0x184>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a16      	ldr	r2, [pc, #88]	; (80037c0 <HAL_TIM_PWM_Start+0x178>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_TIM_PWM_Start+0x188>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_TIM_PWM_Start+0x136>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <HAL_TIM_PWM_Start+0x18c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d111      	bne.n	80037a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b06      	cmp	r3, #6
 800378e:	d010      	beq.n	80037b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	e007      	b.n	80037b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40000400 	.word	0x40000400
 80037c8:	40000800 	.word	0x40000800
 80037cc:	40000c00 	.word	0x40000c00
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40001800 	.word	0x40001800

080037d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e041      	b.n	800386e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f839 	bl	8003876 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f000 fcac 	bl	8004174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d104      	bne.n	80038aa <HAL_TIM_IC_Start_IT+0x1e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	e013      	b.n	80038d2 <HAL_TIM_IC_Start_IT+0x46>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d104      	bne.n	80038ba <HAL_TIM_IC_Start_IT+0x2e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	e00b      	b.n	80038d2 <HAL_TIM_IC_Start_IT+0x46>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d104      	bne.n	80038ca <HAL_TIM_IC_Start_IT+0x3e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	e003      	b.n	80038d2 <HAL_TIM_IC_Start_IT+0x46>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d104      	bne.n	80038e4 <HAL_TIM_IC_Start_IT+0x58>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e013      	b.n	800390c <HAL_TIM_IC_Start_IT+0x80>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d104      	bne.n	80038f4 <HAL_TIM_IC_Start_IT+0x68>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e00b      	b.n	800390c <HAL_TIM_IC_Start_IT+0x80>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d104      	bne.n	8003904 <HAL_TIM_IC_Start_IT+0x78>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e003      	b.n	800390c <HAL_TIM_IC_Start_IT+0x80>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800390a:	b2db      	uxtb	r3, r3
 800390c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800390e:	7bbb      	ldrb	r3, [r7, #14]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d102      	bne.n	800391a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003914:	7b7b      	ldrb	r3, [r7, #13]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d001      	beq.n	800391e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0cc      	b.n	8003ab8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <HAL_TIM_IC_Start_IT+0xa2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392c:	e013      	b.n	8003956 <HAL_TIM_IC_Start_IT+0xca>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d104      	bne.n	800393e <HAL_TIM_IC_Start_IT+0xb2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800393c:	e00b      	b.n	8003956 <HAL_TIM_IC_Start_IT+0xca>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d104      	bne.n	800394e <HAL_TIM_IC_Start_IT+0xc2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800394c:	e003      	b.n	8003956 <HAL_TIM_IC_Start_IT+0xca>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d104      	bne.n	8003966 <HAL_TIM_IC_Start_IT+0xda>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003964:	e013      	b.n	800398e <HAL_TIM_IC_Start_IT+0x102>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b04      	cmp	r3, #4
 800396a:	d104      	bne.n	8003976 <HAL_TIM_IC_Start_IT+0xea>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003974:	e00b      	b.n	800398e <HAL_TIM_IC_Start_IT+0x102>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d104      	bne.n	8003986 <HAL_TIM_IC_Start_IT+0xfa>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003984:	e003      	b.n	800398e <HAL_TIM_IC_Start_IT+0x102>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b0c      	cmp	r3, #12
 8003992:	d841      	bhi.n	8003a18 <HAL_TIM_IC_Start_IT+0x18c>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <HAL_TIM_IC_Start_IT+0x110>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	08003a19 	.word	0x08003a19
 80039a4:	08003a19 	.word	0x08003a19
 80039a8:	08003a19 	.word	0x08003a19
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	08003a19 	.word	0x08003a19
 80039b4:	08003a19 	.word	0x08003a19
 80039b8:	08003a19 	.word	0x08003a19
 80039bc:	080039f5 	.word	0x080039f5
 80039c0:	08003a19 	.word	0x08003a19
 80039c4:	08003a19 	.word	0x08003a19
 80039c8:	08003a19 	.word	0x08003a19
 80039cc:	08003a07 	.word	0x08003a07
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f042 0202 	orr.w	r2, r2, #2
 80039de:	60da      	str	r2, [r3, #12]
      break;
 80039e0:	e01d      	b.n	8003a1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0204 	orr.w	r2, r2, #4
 80039f0:	60da      	str	r2, [r3, #12]
      break;
 80039f2:	e014      	b.n	8003a1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0208 	orr.w	r2, r2, #8
 8003a02:	60da      	str	r2, [r3, #12]
      break;
 8003a04:	e00b      	b.n	8003a1e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0210 	orr.w	r2, r2, #16
 8003a14:	60da      	str	r2, [r3, #12]
      break;
 8003a16:	e002      	b.n	8003a1e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d148      	bne.n	8003ab6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	6839      	ldr	r1, [r7, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 ffb5 	bl	800499c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <HAL_TIM_IC_Start_IT+0x234>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d022      	beq.n	8003a82 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a44:	d01d      	beq.n	8003a82 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_TIM_IC_Start_IT+0x238>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d018      	beq.n	8003a82 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <HAL_TIM_IC_Start_IT+0x23c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <HAL_TIM_IC_Start_IT+0x240>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <HAL_TIM_IC_Start_IT+0x244>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	; (8003ad4 <HAL_TIM_IC_Start_IT+0x248>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIM_IC_Start_IT+0x1f6>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <HAL_TIM_IC_Start_IT+0x24c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d111      	bne.n	8003aa6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b06      	cmp	r3, #6
 8003a92:	d010      	beq.n	8003ab6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa4:	e007      	b.n	8003ab6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40010400 	.word	0x40010400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40001800 	.word	0x40001800

08003adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0202 	mvn.w	r2, #2
 8003b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f002 fc92 	bl	8006448 <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fb05 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fb0c 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0204 	mvn.w	r2, #4
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f002 fc68 	bl	8006448 <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fadb 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fae2 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0208 	mvn.w	r2, #8
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f002 fc3e 	bl	8006448 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fab1 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fab8 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f002 fc14 	bl	8006448 <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fa87 	bl	8004136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fa8e 	bl	800414a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f002 fc66 	bl	800652c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6a:	2b80      	cmp	r3, #128	; 0x80
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b80      	cmp	r3, #128	; 0x80
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 ff86 	bl	8004b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d10e      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b40      	cmp	r3, #64	; 0x40
 8003ca6:	d107      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa53 	bl	800415e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0220 	mvn.w	r2, #32
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 ff50 	bl	8004b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e088      	b.n	8003e1c <HAL_TIM_IC_ConfigChannel+0x130>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d11b      	bne.n	8003d50 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f000 fc74 	bl	8004614 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 020c 	bic.w	r2, r2, #12
 8003d3a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6999      	ldr	r1, [r3, #24]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	619a      	str	r2, [r3, #24]
 8003d4e:	e060      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d11c      	bne.n	8003d90 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6819      	ldr	r1, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f000 fcf8 	bl	800475a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d78:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6999      	ldr	r1, [r3, #24]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	021a      	lsls	r2, r3, #8
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	619a      	str	r2, [r3, #24]
 8003d8e:	e040      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d11b      	bne.n	8003dce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f000 fd45 	bl	8004834 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 020c 	bic.w	r2, r2, #12
 8003db8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69d9      	ldr	r1, [r3, #28]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	61da      	str	r2, [r3, #28]
 8003dcc:	e021      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	d11c      	bne.n	8003e0e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f000 fd62 	bl	80048ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003df6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69d9      	ldr	r1, [r3, #28]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	021a      	lsls	r2, r3, #8
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
 8003e0c:	e001      	b.n	8003e12 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e0ae      	b.n	8003fa0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	f200 809f 	bhi.w	8003f90 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e8d 	.word	0x08003e8d
 8003e5c:	08003f91 	.word	0x08003f91
 8003e60:	08003f91 	.word	0x08003f91
 8003e64:	08003f91 	.word	0x08003f91
 8003e68:	08003ecd 	.word	0x08003ecd
 8003e6c:	08003f91 	.word	0x08003f91
 8003e70:	08003f91 	.word	0x08003f91
 8003e74:	08003f91 	.word	0x08003f91
 8003e78:	08003f0f 	.word	0x08003f0f
 8003e7c:	08003f91 	.word	0x08003f91
 8003e80:	08003f91 	.word	0x08003f91
 8003e84:	08003f91 	.word	0x08003f91
 8003e88:	08003f4f 	.word	0x08003f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fa0e 	bl	80042b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0208 	orr.w	r2, r2, #8
 8003ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0204 	bic.w	r2, r2, #4
 8003eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6999      	ldr	r1, [r3, #24]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	619a      	str	r2, [r3, #24]
      break;
 8003eca:	e064      	b.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa5e 	bl	8004394 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	619a      	str	r2, [r3, #24]
      break;
 8003f0c:	e043      	b.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fab3 	bl	8004480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0208 	orr.w	r2, r2, #8
 8003f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0204 	bic.w	r2, r2, #4
 8003f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69d9      	ldr	r1, [r3, #28]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	61da      	str	r2, [r3, #28]
      break;
 8003f4c:	e023      	b.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fb07 	bl	8004568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69d9      	ldr	r1, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	021a      	lsls	r2, r3, #8
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	61da      	str	r2, [r3, #28]
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75fb      	strb	r3, [r7, #23]
      break;
 8003f94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIM_ConfigClockSource+0x1c>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e0b4      	b.n	800412e <HAL_TIM_ConfigClockSource+0x186>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffc:	d03e      	beq.n	800407c <HAL_TIM_ConfigClockSource+0xd4>
 8003ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004002:	f200 8087 	bhi.w	8004114 <HAL_TIM_ConfigClockSource+0x16c>
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400a:	f000 8086 	beq.w	800411a <HAL_TIM_ConfigClockSource+0x172>
 800400e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004012:	d87f      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b70      	cmp	r3, #112	; 0x70
 8004016:	d01a      	beq.n	800404e <HAL_TIM_ConfigClockSource+0xa6>
 8004018:	2b70      	cmp	r3, #112	; 0x70
 800401a:	d87b      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b60      	cmp	r3, #96	; 0x60
 800401e:	d050      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004020:	2b60      	cmp	r3, #96	; 0x60
 8004022:	d877      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b50      	cmp	r3, #80	; 0x50
 8004026:	d03c      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004028:	2b50      	cmp	r3, #80	; 0x50
 800402a:	d873      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d058      	beq.n	80040e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d86f      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b30      	cmp	r3, #48	; 0x30
 8004036:	d064      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x15a>
 8004038:	2b30      	cmp	r3, #48	; 0x30
 800403a:	d86b      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b20      	cmp	r3, #32
 800403e:	d060      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x15a>
 8004040:	2b20      	cmp	r3, #32
 8004042:	d867      	bhi.n	8004114 <HAL_TIM_ConfigClockSource+0x16c>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05c      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x15a>
 8004048:	2b10      	cmp	r3, #16
 800404a:	d05a      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0x15a>
 800404c:	e062      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6899      	ldr	r1, [r3, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f000 fc7d 	bl	800495c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004070:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	609a      	str	r2, [r3, #8]
      break;
 800407a:	e04f      	b.n	800411c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6899      	ldr	r1, [r3, #8]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f000 fc66 	bl	800495c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409e:	609a      	str	r2, [r3, #8]
      break;
 80040a0:	e03c      	b.n	800411c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 fb24 	bl	80046fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2150      	movs	r1, #80	; 0x50
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fc33 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 80040c0:	e02c      	b.n	800411c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f000 fb80 	bl	80047d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2160      	movs	r1, #96	; 0x60
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fc23 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 80040e0:	e01c      	b.n	800411c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 fb04 	bl	80046fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2140      	movs	r1, #64	; 0x40
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fc13 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 8004100:	e00c      	b.n	800411c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f000 fc0a 	bl	8004926 <TIM_ITRx_SetConfig>
      break;
 8004112:	e003      	b.n	800411c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      break;
 8004118:	e000      	b.n	800411c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800411a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a40      	ldr	r2, [pc, #256]	; (8004288 <TIM_Base_SetConfig+0x114>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d013      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004192:	d00f      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a3d      	ldr	r2, [pc, #244]	; (800428c <TIM_Base_SetConfig+0x118>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00b      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a3c      	ldr	r2, [pc, #240]	; (8004290 <TIM_Base_SetConfig+0x11c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a3b      	ldr	r2, [pc, #236]	; (8004294 <TIM_Base_SetConfig+0x120>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a3a      	ldr	r2, [pc, #232]	; (8004298 <TIM_Base_SetConfig+0x124>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d108      	bne.n	80041c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2f      	ldr	r2, [pc, #188]	; (8004288 <TIM_Base_SetConfig+0x114>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d02b      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d027      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2c      	ldr	r2, [pc, #176]	; (800428c <TIM_Base_SetConfig+0x118>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d023      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2b      	ldr	r2, [pc, #172]	; (8004290 <TIM_Base_SetConfig+0x11c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01f      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a2a      	ldr	r2, [pc, #168]	; (8004294 <TIM_Base_SetConfig+0x120>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d01b      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a29      	ldr	r2, [pc, #164]	; (8004298 <TIM_Base_SetConfig+0x124>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d017      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a28      	ldr	r2, [pc, #160]	; (800429c <TIM_Base_SetConfig+0x128>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <TIM_Base_SetConfig+0x12c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00f      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a26      	ldr	r2, [pc, #152]	; (80042a4 <TIM_Base_SetConfig+0x130>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d00b      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a25      	ldr	r2, [pc, #148]	; (80042a8 <TIM_Base_SetConfig+0x134>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d007      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a24      	ldr	r2, [pc, #144]	; (80042ac <TIM_Base_SetConfig+0x138>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d003      	beq.n	8004226 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a23      	ldr	r2, [pc, #140]	; (80042b0 <TIM_Base_SetConfig+0x13c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a0a      	ldr	r2, [pc, #40]	; (8004288 <TIM_Base_SetConfig+0x114>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_Base_SetConfig+0xf8>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <TIM_Base_SetConfig+0x124>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d103      	bne.n	8004274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	615a      	str	r2, [r3, #20]
}
 800427a:	bf00      	nop
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000
 800428c:	40000400 	.word	0x40000400
 8004290:	40000800 	.word	0x40000800
 8004294:	40000c00 	.word	0x40000c00
 8004298:	40010400 	.word	0x40010400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800
 80042a8:	40001800 	.word	0x40001800
 80042ac:	40001c00 	.word	0x40001c00
 80042b0:	40002000 	.word	0x40002000

080042b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0201 	bic.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 0302 	bic.w	r3, r3, #2
 80042fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a20      	ldr	r2, [pc, #128]	; (800438c <TIM_OC1_SetConfig+0xd8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_OC1_SetConfig+0x64>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <TIM_OC1_SetConfig+0xdc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10c      	bne.n	8004332 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f023 0308 	bic.w	r3, r3, #8
 800431e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f023 0304 	bic.w	r3, r3, #4
 8004330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a15      	ldr	r2, [pc, #84]	; (800438c <TIM_OC1_SetConfig+0xd8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC1_SetConfig+0x8e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <TIM_OC1_SetConfig+0xdc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d111      	bne.n	8004366 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40010000 	.word	0x40010000
 8004390:	40010400 	.word	0x40010400

08004394 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f023 0210 	bic.w	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0320 	bic.w	r3, r3, #32
 80043de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a22      	ldr	r2, [pc, #136]	; (8004478 <TIM_OC2_SetConfig+0xe4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_OC2_SetConfig+0x68>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a21      	ldr	r2, [pc, #132]	; (800447c <TIM_OC2_SetConfig+0xe8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d10d      	bne.n	8004418 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004402:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004416:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a17      	ldr	r2, [pc, #92]	; (8004478 <TIM_OC2_SetConfig+0xe4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC2_SetConfig+0x94>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a16      	ldr	r2, [pc, #88]	; (800447c <TIM_OC2_SetConfig+0xe8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d113      	bne.n	8004450 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800442e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	4313      	orrs	r3, r2
 8004442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40010400 	.word	0x40010400

08004480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0303 	bic.w	r3, r3, #3
 80044b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a21      	ldr	r2, [pc, #132]	; (8004560 <TIM_OC3_SetConfig+0xe0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d003      	beq.n	80044e6 <TIM_OC3_SetConfig+0x66>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a20      	ldr	r2, [pc, #128]	; (8004564 <TIM_OC3_SetConfig+0xe4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10d      	bne.n	8004502 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a16      	ldr	r2, [pc, #88]	; (8004560 <TIM_OC3_SetConfig+0xe0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC3_SetConfig+0x92>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a15      	ldr	r2, [pc, #84]	; (8004564 <TIM_OC3_SetConfig+0xe4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d113      	bne.n	800453a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40010000 	.word	0x40010000
 8004564:	40010400 	.word	0x40010400

08004568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	021b      	lsls	r3, r3, #8
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	031b      	lsls	r3, r3, #12
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <TIM_OC4_SetConfig+0xa4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_OC4_SetConfig+0x68>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a11      	ldr	r2, [pc, #68]	; (8004610 <TIM_OC4_SetConfig+0xa8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d109      	bne.n	80045e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	019b      	lsls	r3, r3, #6
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	621a      	str	r2, [r3, #32]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	40010000 	.word	0x40010000
 8004610:	40010400 	.word	0x40010400

08004614 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <TIM_TI1_SetConfig+0xcc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01b      	beq.n	800467a <TIM_TI1_SetConfig+0x66>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004648:	d017      	beq.n	800467a <TIM_TI1_SetConfig+0x66>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <TIM_TI1_SetConfig+0xd0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <TIM_TI1_SetConfig+0x66>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <TIM_TI1_SetConfig+0xd4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00f      	beq.n	800467a <TIM_TI1_SetConfig+0x66>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a23      	ldr	r2, [pc, #140]	; (80046ec <TIM_TI1_SetConfig+0xd8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00b      	beq.n	800467a <TIM_TI1_SetConfig+0x66>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <TIM_TI1_SetConfig+0xdc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <TIM_TI1_SetConfig+0x66>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <TIM_TI1_SetConfig+0xe0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_TI1_SetConfig+0x66>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <TIM_TI1_SetConfig+0xe4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <TIM_TI1_SetConfig+0x6a>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <TIM_TI1_SetConfig+0x6c>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e003      	b.n	800469e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f023 030a 	bic.w	r3, r3, #10
 80046b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f003 030a 	and.w	r3, r3, #10
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40010400 	.word	0x40010400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40001800 	.word	0x40001800

080046fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f023 0201 	bic.w	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f023 030a 	bic.w	r3, r3, #10
 8004738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800475a:	b480      	push	{r7}
 800475c:	b087      	sub	sp, #28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f023 0210 	bic.w	r2, r3, #16
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004786:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	031b      	lsls	r3, r3, #12
 800479e:	b29b      	uxth	r3, r3
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	621a      	str	r2, [r3, #32]
}
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f023 0210 	bic.w	r2, r3, #16
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	031b      	lsls	r3, r3, #12
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	621a      	str	r2, [r3, #32]
}
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f023 0303 	bic.w	r3, r3, #3
 8004860:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004870:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	b2db      	uxtb	r3, r3
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004884:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	621a      	str	r2, [r3, #32]
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	031b      	lsls	r3, r3, #12
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80048fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	031b      	lsls	r3, r3, #12
 8004904:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	f043 0307 	orr.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	609a      	str	r2, [r3, #8]
}
 8004950:	bf00      	nop
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	431a      	orrs	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	609a      	str	r2, [r3, #8]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	2201      	movs	r2, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a1a      	ldr	r2, [r3, #32]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	43db      	mvns	r3, r3
 80049be:	401a      	ands	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e05a      	b.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a21      	ldr	r2, [pc, #132]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d022      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d01d      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1d      	ldr	r2, [pc, #116]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d018      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1b      	ldr	r2, [pc, #108]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00e      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a15      	ldr	r2, [pc, #84]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10c      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40010400 	.word	0x40010400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40001800 	.word	0x40001800

08004ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e03d      	b.n	8004b78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e03f      	b.n	8004c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc f9fe 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fcdb 	bl	80055ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d11d      	bne.n	8004c9c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_UART_Receive_IT+0x26>
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e016      	b.n	8004c9e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_UART_Receive_IT+0x38>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e00f      	b.n	8004c9e <HAL_UART_Receive_IT+0x58>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c8c:	88fb      	ldrh	r3, [r7, #6]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f000 fab6 	bl	8005204 <UART_Start_Receive_IT>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	e000      	b.n	8004c9e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
	...

08004ca8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b0ba      	sub	sp, #232	; 0xe8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_UART_IRQHandler+0x66>
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fb95 	bl	8005436 <UART_Receive_IT>
      return;
 8004d0c:	e256      	b.n	80051bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80de 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x22c>
 8004d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80d1 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_UART_IRQHandler+0xae>
 8004d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f043 0201 	orr.w	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0xd2>
 8004d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f043 0202 	orr.w	r2, r3, #2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_UART_IRQHandler+0xf6>
 8004d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f043 0204 	orr.w	r2, r3, #4
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d011      	beq.n	8004dce <HAL_UART_IRQHandler+0x126>
 8004daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d105      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0208 	orr.w	r2, r3, #8
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 81ed 	beq.w	80051b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_UART_IRQHandler+0x14e>
 8004de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fb20 	bl	8005436 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b40      	cmp	r3, #64	; 0x40
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <HAL_UART_IRQHandler+0x17a>
 8004e1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d04f      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa28 	bl	8005278 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d141      	bne.n	8004eba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3314      	adds	r3, #20
 8004e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3314      	adds	r3, #20
 8004e5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1d9      	bne.n	8004e36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d013      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	4a7d      	ldr	r2, [pc, #500]	; (8005084 <HAL_UART_IRQHandler+0x3dc>)
 8004e90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fc fb45 	bl	8001526 <HAL_DMA_Abort_IT>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004eac:	4610      	mov	r0, r2
 8004eae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e00e      	b.n	8004ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f990 	bl	80051d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	e00a      	b.n	8004ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f98c 	bl	80051d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	e006      	b.n	8004ed0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f988 	bl	80051d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ece:	e170      	b.n	80051b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed0:	bf00      	nop
    return;
 8004ed2:	e16e      	b.n	80051b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	f040 814a 	bne.w	8005172 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 8143 	beq.w	8005172 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 813c 	beq.w	8005172 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004efa:	2300      	movs	r3, #0
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	f040 80b4 	bne.w	8005088 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8140 	beq.w	80051b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	f080 8139 	bcs.w	80051b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f56:	f000 8088 	beq.w	800506a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1d9      	bne.n	8004f5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3314      	adds	r3, #20
 8004fac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e1      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3314      	adds	r3, #20
 8004fe8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3314      	adds	r3, #20
 8005002:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005006:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005008:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800500c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005014:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e3      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503a:	f023 0310 	bic.w	r3, r3, #16
 800503e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800504c:	65ba      	str	r2, [r7, #88]	; 0x58
 800504e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800505a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e3      	bne.n	8005028 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	4618      	mov	r0, r3
 8005066:	f7fc f9ee 	bl	8001446 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005072:	b29b      	uxth	r3, r3
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	b29b      	uxth	r3, r3
 8005078:	4619      	mov	r1, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f8b6 	bl	80051ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005080:	e099      	b.n	80051b6 <HAL_UART_IRQHandler+0x50e>
 8005082:	bf00      	nop
 8005084:	0800533f 	.word	0x0800533f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005090:	b29b      	uxth	r3, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 808b 	beq.w	80051ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80050a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8086 	beq.w	80051ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b8:	e853 3f00 	ldrex	r3, [r3]
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050d2:	647a      	str	r2, [r7, #68]	; 0x44
 80050d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e3      	bne.n	80050ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3314      	adds	r3, #20
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	623b      	str	r3, [r7, #32]
   return(result);
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3314      	adds	r3, #20
 8005106:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800510a:	633a      	str	r2, [r7, #48]	; 0x30
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e3      	bne.n	80050e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	60fb      	str	r3, [r7, #12]
   return(result);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0310 	bic.w	r3, r3, #16
 8005142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005150:	61fa      	str	r2, [r7, #28]
 8005152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	617b      	str	r3, [r7, #20]
   return(result);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e3      	bne.n	800512c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005168:	4619      	mov	r1, r3
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f83e 	bl	80051ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005170:	e023      	b.n	80051ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_UART_IRQHandler+0x4ea>
 800517e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f8eb 	bl	8005366 <UART_Transmit_IT>
    return;
 8005190:	e014      	b.n	80051bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <HAL_UART_IRQHandler+0x514>
 800519e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f92b 	bl	8005406 <UART_EndTransmit_IT>
    return;
 80051b0:	e004      	b.n	80051bc <HAL_UART_IRQHandler+0x514>
    return;
 80051b2:	bf00      	nop
 80051b4:	e002      	b.n	80051bc <HAL_UART_IRQHandler+0x514>
      return;
 80051b6:	bf00      	nop
 80051b8:	e000      	b.n	80051bc <HAL_UART_IRQHandler+0x514>
      return;
 80051ba:	bf00      	nop
  }
}
 80051bc:	37e8      	adds	r7, #232	; 0xe8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	4613      	mov	r3, r2
 8005210:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2222      	movs	r2, #34	; 0x22
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005248:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0220 	orr.w	r2, r2, #32
 8005268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b095      	sub	sp, #84	; 0x54
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	330c      	adds	r3, #12
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a0:	643a      	str	r2, [r7, #64]	; 0x40
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e5      	bne.n	8005280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3314      	adds	r3, #20
 80052ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f023 0301 	bic.w	r3, r3, #1
 80052ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3314      	adds	r3, #20
 80052d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d119      	bne.n	8005324 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f023 0310 	bic.w	r3, r3, #16
 8005306:	647b      	str	r3, [r7, #68]	; 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005310:	61ba      	str	r2, [r7, #24]
 8005312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6979      	ldr	r1, [r7, #20]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	613b      	str	r3, [r7, #16]
   return(result);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e5      	bne.n	80052f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005332:	bf00      	nop
 8005334:	3754      	adds	r7, #84	; 0x54
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ff3d 	bl	80051d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800535e:	bf00      	nop
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b21      	cmp	r3, #33	; 0x21
 8005378:	d13e      	bne.n	80053f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d114      	bne.n	80053ae <UART_Transmit_IT+0x48>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d110      	bne.n	80053ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	1c9a      	adds	r2, r3, #2
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	621a      	str	r2, [r3, #32]
 80053ac:	e008      	b.n	80053c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	1c59      	adds	r1, r3, #1
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6211      	str	r1, [r2, #32]
 80053b8:	781a      	ldrb	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4619      	mov	r1, r3
 80053ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10f      	bne.n	80053f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053f8:	2302      	movs	r3, #2
  }
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800541c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7ff fecc 	bl	80051c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b08c      	sub	sp, #48	; 0x30
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b22      	cmp	r3, #34	; 0x22
 8005448:	f040 80ab 	bne.w	80055a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d117      	bne.n	8005486 <UART_Receive_IT+0x50>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d113      	bne.n	8005486 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b29b      	uxth	r3, r3
 8005470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005474:	b29a      	uxth	r2, r3
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	1c9a      	adds	r2, r3, #2
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	629a      	str	r2, [r3, #40]	; 0x28
 8005484:	e026      	b.n	80054d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d007      	beq.n	80054aa <UART_Receive_IT+0x74>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <UART_Receive_IT+0x82>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e008      	b.n	80054ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29b      	uxth	r3, r3
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	4619      	mov	r1, r3
 80054e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d15a      	bne.n	800559e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0220 	bic.w	r2, r2, #32
 80054f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d135      	bne.n	8005594 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	613b      	str	r3, [r7, #16]
   return(result);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f023 0310 	bic.w	r3, r3, #16
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	330c      	adds	r3, #12
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	623a      	str	r2, [r7, #32]
 8005550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	69f9      	ldr	r1, [r7, #28]
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	61bb      	str	r3, [r7, #24]
   return(result);
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e5      	bne.n	800552e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b10      	cmp	r3, #16
 800556e:	d10a      	bne.n	8005586 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff fe2d 	bl	80051ec <HAL_UARTEx_RxEventCallback>
 8005592:	e002      	b.n	800559a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f9e5 	bl	8005964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e002      	b.n	80055a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3730      	adds	r7, #48	; 0x30
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b0:	b09f      	sub	sp, #124	; 0x7c
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	68d9      	ldr	r1, [r3, #12]
 80055c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	ea40 0301 	orr.w	r3, r0, r1
 80055cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	431a      	orrs	r2, r3
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80055e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055f0:	f021 010c 	bic.w	r1, r1, #12
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055fa:	430b      	orrs	r3, r1
 80055fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	6999      	ldr	r1, [r3, #24]
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	ea40 0301 	orr.w	r3, r0, r1
 8005614:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4bc5      	ldr	r3, [pc, #788]	; (8005930 <UART_SetConfig+0x384>)
 800561c:	429a      	cmp	r2, r3
 800561e:	d004      	beq.n	800562a <UART_SetConfig+0x7e>
 8005620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4bc3      	ldr	r3, [pc, #780]	; (8005934 <UART_SetConfig+0x388>)
 8005626:	429a      	cmp	r2, r3
 8005628:	d103      	bne.n	8005632 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800562a:	f7fd fedf 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
 800562e:	6778      	str	r0, [r7, #116]	; 0x74
 8005630:	e002      	b.n	8005638 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005632:	f7fd fec7 	bl	80033c4 <HAL_RCC_GetPCLK1Freq>
 8005636:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005640:	f040 80b6 	bne.w	80057b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005646:	461c      	mov	r4, r3
 8005648:	f04f 0500 	mov.w	r5, #0
 800564c:	4622      	mov	r2, r4
 800564e:	462b      	mov	r3, r5
 8005650:	1891      	adds	r1, r2, r2
 8005652:	6439      	str	r1, [r7, #64]	; 0x40
 8005654:	415b      	adcs	r3, r3
 8005656:	647b      	str	r3, [r7, #68]	; 0x44
 8005658:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800565c:	1912      	adds	r2, r2, r4
 800565e:	eb45 0303 	adc.w	r3, r5, r3
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f04f 0100 	mov.w	r1, #0
 800566a:	00d9      	lsls	r1, r3, #3
 800566c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005670:	00d0      	lsls	r0, r2, #3
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	1911      	adds	r1, r2, r4
 8005678:	6639      	str	r1, [r7, #96]	; 0x60
 800567a:	416b      	adcs	r3, r5
 800567c:	667b      	str	r3, [r7, #100]	; 0x64
 800567e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	461a      	mov	r2, r3
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	1891      	adds	r1, r2, r2
 800568a:	63b9      	str	r1, [r7, #56]	; 0x38
 800568c:	415b      	adcs	r3, r3
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005694:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005698:	f7fb f9b4 	bl	8000a04 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4ba5      	ldr	r3, [pc, #660]	; (8005938 <UART_SetConfig+0x38c>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	011e      	lsls	r6, r3, #4
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	461c      	mov	r4, r3
 80056ae:	f04f 0500 	mov.w	r5, #0
 80056b2:	4622      	mov	r2, r4
 80056b4:	462b      	mov	r3, r5
 80056b6:	1891      	adds	r1, r2, r2
 80056b8:	6339      	str	r1, [r7, #48]	; 0x30
 80056ba:	415b      	adcs	r3, r3
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
 80056be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80056c2:	1912      	adds	r2, r2, r4
 80056c4:	eb45 0303 	adc.w	r3, r5, r3
 80056c8:	f04f 0000 	mov.w	r0, #0
 80056cc:	f04f 0100 	mov.w	r1, #0
 80056d0:	00d9      	lsls	r1, r3, #3
 80056d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056d6:	00d0      	lsls	r0, r2, #3
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	1911      	adds	r1, r2, r4
 80056de:	65b9      	str	r1, [r7, #88]	; 0x58
 80056e0:	416b      	adcs	r3, r5
 80056e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	461a      	mov	r2, r3
 80056ea:	f04f 0300 	mov.w	r3, #0
 80056ee:	1891      	adds	r1, r2, r2
 80056f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80056f2:	415b      	adcs	r3, r3
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056fe:	f7fb f981 	bl	8000a04 <__aeabi_uldivmod>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4b8c      	ldr	r3, [pc, #560]	; (8005938 <UART_SetConfig+0x38c>)
 8005708:	fba3 1302 	umull	r1, r3, r3, r2
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	2164      	movs	r1, #100	; 0x64
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	3332      	adds	r3, #50	; 0x32
 800571a:	4a87      	ldr	r2, [pc, #540]	; (8005938 <UART_SetConfig+0x38c>)
 800571c:	fba2 2303 	umull	r2, r3, r2, r3
 8005720:	095b      	lsrs	r3, r3, #5
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005728:	441e      	add	r6, r3
 800572a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800572c:	4618      	mov	r0, r3
 800572e:	f04f 0100 	mov.w	r1, #0
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	1894      	adds	r4, r2, r2
 8005738:	623c      	str	r4, [r7, #32]
 800573a:	415b      	adcs	r3, r3
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
 800573e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005742:	1812      	adds	r2, r2, r0
 8005744:	eb41 0303 	adc.w	r3, r1, r3
 8005748:	f04f 0400 	mov.w	r4, #0
 800574c:	f04f 0500 	mov.w	r5, #0
 8005750:	00dd      	lsls	r5, r3, #3
 8005752:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005756:	00d4      	lsls	r4, r2, #3
 8005758:	4622      	mov	r2, r4
 800575a:	462b      	mov	r3, r5
 800575c:	1814      	adds	r4, r2, r0
 800575e:	653c      	str	r4, [r7, #80]	; 0x50
 8005760:	414b      	adcs	r3, r1
 8005762:	657b      	str	r3, [r7, #84]	; 0x54
 8005764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	461a      	mov	r2, r3
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	1891      	adds	r1, r2, r2
 8005770:	61b9      	str	r1, [r7, #24]
 8005772:	415b      	adcs	r3, r3
 8005774:	61fb      	str	r3, [r7, #28]
 8005776:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800577a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800577e:	f7fb f941 	bl	8000a04 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4b6c      	ldr	r3, [pc, #432]	; (8005938 <UART_SetConfig+0x38c>)
 8005788:	fba3 1302 	umull	r1, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	2164      	movs	r1, #100	; 0x64
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	3332      	adds	r3, #50	; 0x32
 800579a:	4a67      	ldr	r2, [pc, #412]	; (8005938 <UART_SetConfig+0x38c>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	f003 0207 	and.w	r2, r3, #7
 80057a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4432      	add	r2, r6
 80057ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057ae:	e0b9      	b.n	8005924 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b2:	461c      	mov	r4, r3
 80057b4:	f04f 0500 	mov.w	r5, #0
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	6139      	str	r1, [r7, #16]
 80057c0:	415b      	adcs	r3, r3
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057c8:	1912      	adds	r2, r2, r4
 80057ca:	eb45 0303 	adc.w	r3, r5, r3
 80057ce:	f04f 0000 	mov.w	r0, #0
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	00d9      	lsls	r1, r3, #3
 80057d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057dc:	00d0      	lsls	r0, r2, #3
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	eb12 0804 	adds.w	r8, r2, r4
 80057e6:	eb43 0905 	adc.w	r9, r3, r5
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f04f 0100 	mov.w	r1, #0
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	008b      	lsls	r3, r1, #2
 80057fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005802:	0082      	lsls	r2, r0, #2
 8005804:	4640      	mov	r0, r8
 8005806:	4649      	mov	r1, r9
 8005808:	f7fb f8fc 	bl	8000a04 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4b49      	ldr	r3, [pc, #292]	; (8005938 <UART_SetConfig+0x38c>)
 8005812:	fba3 2302 	umull	r2, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	011e      	lsls	r6, r3, #4
 800581a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800581c:	4618      	mov	r0, r3
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	1894      	adds	r4, r2, r2
 8005828:	60bc      	str	r4, [r7, #8]
 800582a:	415b      	adcs	r3, r3
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005832:	1812      	adds	r2, r2, r0
 8005834:	eb41 0303 	adc.w	r3, r1, r3
 8005838:	f04f 0400 	mov.w	r4, #0
 800583c:	f04f 0500 	mov.w	r5, #0
 8005840:	00dd      	lsls	r5, r3, #3
 8005842:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005846:	00d4      	lsls	r4, r2, #3
 8005848:	4622      	mov	r2, r4
 800584a:	462b      	mov	r3, r5
 800584c:	1814      	adds	r4, r2, r0
 800584e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005850:	414b      	adcs	r3, r1
 8005852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	f04f 0100 	mov.w	r1, #0
 800585e:	f04f 0200 	mov.w	r2, #0
 8005862:	f04f 0300 	mov.w	r3, #0
 8005866:	008b      	lsls	r3, r1, #2
 8005868:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800586c:	0082      	lsls	r2, r0, #2
 800586e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005872:	f7fb f8c7 	bl	8000a04 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b2f      	ldr	r3, [pc, #188]	; (8005938 <UART_SetConfig+0x38c>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	; 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	3332      	adds	r3, #50	; 0x32
 800588e:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <UART_SetConfig+0x38c>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800589a:	441e      	add	r6, r3
 800589c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589e:	4618      	mov	r0, r3
 80058a0:	f04f 0100 	mov.w	r1, #0
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	1894      	adds	r4, r2, r2
 80058aa:	603c      	str	r4, [r7, #0]
 80058ac:	415b      	adcs	r3, r3
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b4:	1812      	adds	r2, r2, r0
 80058b6:	eb41 0303 	adc.w	r3, r1, r3
 80058ba:	f04f 0400 	mov.w	r4, #0
 80058be:	f04f 0500 	mov.w	r5, #0
 80058c2:	00dd      	lsls	r5, r3, #3
 80058c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058c8:	00d4      	lsls	r4, r2, #3
 80058ca:	4622      	mov	r2, r4
 80058cc:	462b      	mov	r3, r5
 80058ce:	eb12 0a00 	adds.w	sl, r2, r0
 80058d2:	eb43 0b01 	adc.w	fp, r3, r1
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4618      	mov	r0, r3
 80058dc:	f04f 0100 	mov.w	r1, #0
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	008b      	lsls	r3, r1, #2
 80058ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ee:	0082      	lsls	r2, r0, #2
 80058f0:	4650      	mov	r0, sl
 80058f2:	4659      	mov	r1, fp
 80058f4:	f7fb f886 	bl	8000a04 <__aeabi_uldivmod>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <UART_SetConfig+0x38c>)
 80058fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005902:	095b      	lsrs	r3, r3, #5
 8005904:	2164      	movs	r1, #100	; 0x64
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	3332      	adds	r3, #50	; 0x32
 8005910:	4a09      	ldr	r2, [pc, #36]	; (8005938 <UART_SetConfig+0x38c>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	f003 020f 	and.w	r2, r3, #15
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4432      	add	r2, r6
 8005922:	609a      	str	r2, [r3, #8]
}
 8005924:	bf00      	nop
 8005926:	377c      	adds	r7, #124	; 0x7c
 8005928:	46bd      	mov	sp, r7
 800592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592e:	bf00      	nop
 8005930:	40011000 	.word	0x40011000
 8005934:	40011400 	.word	0x40011400
 8005938:	51eb851f 	.word	0x51eb851f

0800593c <main>:
#include "RobotControl.h"
#include "maincpp.h"

uint8_t pData[10];
int main(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
	DcControlSetup();
 8005940:	f000 fbea 	bl	8006118 <DcControlSetup>
//	if(!MPU6050_Init())
//	{
//		return 0;
//	}
	robot_rotateright_angle(185);
 8005944:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8005958 <main+0x1c>
 8005948:	f000 ffd4 	bl	80068f4 <robot_rotateright_angle>

//	robot_backward(70);
	HAL_UART_Receive_IT(&huart1, pData, 1);
 800594c:	2201      	movs	r2, #1
 800594e:	4903      	ldr	r1, [pc, #12]	; (800595c <main+0x20>)
 8005950:	4803      	ldr	r0, [pc, #12]	; (8005960 <main+0x24>)
 8005952:	f7ff f978 	bl	8004c46 <HAL_UART_Receive_IT>
	while (1)
 8005956:	e7fe      	b.n	8005956 <main+0x1a>
 8005958:	43390000 	.word	0x43390000
 800595c:	20000318 	.word	0x20000318
 8005960:	20000208 	.word	0x20000208

08005964 <HAL_UART_RxCpltCallback>:
	}

}
uint8_t data[4];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	static int count;

//	HAL_UART_Receive_IT(&huart1, pData, Size)
//    HAL_UART_Transmit(&huart1, UART1_rxBuffer, 12, 100);
	HAL_UART_Receive_IT(&huart1, pData, 1);
 800596c:	2201      	movs	r2, #1
 800596e:	490d      	ldr	r1, [pc, #52]	; (80059a4 <HAL_UART_RxCpltCallback+0x40>)
 8005970:	480d      	ldr	r0, [pc, #52]	; (80059a8 <HAL_UART_RxCpltCallback+0x44>)
 8005972:	f7ff f968 	bl	8004c46 <HAL_UART_Receive_IT>
	data[count] = pData[0];
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <HAL_UART_RxCpltCallback+0x48>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <HAL_UART_RxCpltCallback+0x40>)
 800597c:	7811      	ldrb	r1, [r2, #0]
 800597e:	4a0c      	ldr	r2, [pc, #48]	; (80059b0 <HAL_UART_RxCpltCallback+0x4c>)
 8005980:	54d1      	strb	r1, [r2, r3]
	count++;
 8005982:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <HAL_UART_RxCpltCallback+0x48>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	4a08      	ldr	r2, [pc, #32]	; (80059ac <HAL_UART_RxCpltCallback+0x48>)
 800598a:	6013      	str	r3, [r2, #0]
	if(count == 3)
 800598c:	4b07      	ldr	r3, [pc, #28]	; (80059ac <HAL_UART_RxCpltCallback+0x48>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d102      	bne.n	800599a <HAL_UART_RxCpltCallback+0x36>
	{
		count = 0;
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_UART_RxCpltCallback+0x48>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
	}
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000318 	.word	0x20000318
 80059a8:	20000208 	.word	0x20000208
 80059ac:	20000090 	.word	0x20000090
 80059b0:	20000324 	.word	0x20000324

080059b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80059b8:	2020      	movs	r0, #32
 80059ba:	f7fb ffa5 	bl	8001908 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80059be:	bf00      	nop
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	4603      	mov	r3, r0
 80059ca:	80fb      	strh	r3, [r7, #6]
	MPU6050_dmpDataReady();
 80059cc:	f000 f88c 	bl	8005ae8 <MPU6050_dmpDataReady>
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <checkRobotStopCondition>:

void_t checkRobotStopCondition(void_t)
{
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	ed2d 8b02 	vpush	{d8}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
	u8_t status = MPU6050_GetYawValue();
 80059e2:	f000 f887 	bl	8005af4 <MPU6050_GetYawValue>
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
	if(status == 0)//read success
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d004      	beq.n	80059fa <checkRobotStopCondition+0x22>
	{

	}
	else
	{
		if(status == 2)
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d101      	bne.n	80059fa <checkRobotStopCondition+0x22>
		{
			MX_I2C1_Init();
 80059f6:	f000 fb31 	bl	800605c <MX_I2C1_Init>
		}
	}


	if(isRun_distance())
 80059fa:	f000 ff0d 	bl	8006818 <isRun_distance>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d014      	beq.n	8005a2e <checkRobotStopCondition+0x56>
	{
	  if(getDc1PulseCount() >= getDc1Despulse() && getDc2PulseCount() >= getDc2Despulse())
 8005a04:	f000 ff14 	bl	8006830 <getDc1PulseCount>
 8005a08:	4604      	mov	r4, r0
 8005a0a:	f000 ff4f 	bl	80068ac <getDc1Despulse>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	429c      	cmp	r4, r3
 8005a12:	d34c      	bcc.n	8005aae <checkRobotStopCondition+0xd6>
 8005a14:	f000 ff18 	bl	8006848 <getDc2PulseCount>
 8005a18:	4604      	mov	r4, r0
 8005a1a:	f000 ff53 	bl	80068c4 <getDc2Despulse>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	429c      	cmp	r4, r3
 8005a22:	d344      	bcc.n	8005aae <checkRobotStopCondition+0xd6>
	  {
		  resetPulse_distance();
 8005a24:	f000 ff1c 	bl	8006860 <resetPulse_distance>
		  robot_stop();
 8005a28:	f000 fe96 	bl	8006758 <robot_stop>
					robot_stop();
				}
			}
		}
	}
}
 8005a2c:	e03f      	b.n	8005aae <checkRobotStopCondition+0xd6>
	else if (isRobotRotate())
 8005a2e:	f000 ff55 	bl	80068dc <isRobotRotate>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d03a      	beq.n	8005aae <checkRobotStopCondition+0xd6>
		if(getRobotState() == ROBOT_ROTATE_LEFT)
 8005a38:	f000 feb0 	bl	800679c <getRobotState>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d118      	bne.n	8005a74 <checkRobotStopCondition+0x9c>
			if(fabs(robot_get_current_angle() - robot_get_des_angle()) < 1)
 8005a42:	f000 ff8f 	bl	8006964 <robot_get_current_angle>
 8005a46:	eeb0 8a40 	vmov.f32	s16, s0
 8005a4a:	f000 ff99 	bl	8006980 <robot_get_des_angle>
 8005a4e:	eef0 7a40 	vmov.f32	s15, s0
 8005a52:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005a56:	eef0 7ae7 	vabs.f32	s15, s15
 8005a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a66:	d400      	bmi.n	8005a6a <checkRobotStopCondition+0x92>
}
 8005a68:	e021      	b.n	8005aae <checkRobotStopCondition+0xd6>
				resetPulse_distance();
 8005a6a:	f000 fef9 	bl	8006860 <resetPulse_distance>
				robot_stop();
 8005a6e:	f000 fe73 	bl	8006758 <robot_stop>
}
 8005a72:	e01c      	b.n	8005aae <checkRobotStopCondition+0xd6>
			if(getRobotState() == ROBOT_ROTATE_RIGHT)
 8005a74:	f000 fe92 	bl	800679c <getRobotState>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	d117      	bne.n	8005aae <checkRobotStopCondition+0xd6>
				if(fabs(robot_get_current_angle() - robot_get_des_angle()) < 1)
 8005a7e:	f000 ff71 	bl	8006964 <robot_get_current_angle>
 8005a82:	eeb0 8a40 	vmov.f32	s16, s0
 8005a86:	f000 ff7b 	bl	8006980 <robot_get_des_angle>
 8005a8a:	eef0 7a40 	vmov.f32	s15, s0
 8005a8e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005a92:	eef0 7ae7 	vabs.f32	s15, s15
 8005a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa2:	d400      	bmi.n	8005aa6 <checkRobotStopCondition+0xce>
}
 8005aa4:	e003      	b.n	8005aae <checkRobotStopCondition+0xd6>
					resetPulse_distance();
 8005aa6:	f000 fedb 	bl	8006860 <resetPulse_distance>
					robot_stop();
 8005aaa:	f000 fe55 	bl	8006758 <robot_stop>
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	ecbd 8b02 	vpop	{d8}
 8005ab8:	bd90      	pop	{r4, r7, pc}
	...

08005abc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005ac0:	4803      	ldr	r0, [pc, #12]	; (8005ad0 <TIM4_IRQHandler+0x14>)
 8005ac2:	f7fe f80b 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  checkRobotStopCondition();
 8005ac6:	f7ff ff87 	bl	80059d8 <checkRobotStopCondition>
  /* USER CODE END TIM4_IRQn 1 */
}
 8005aca:	bf00      	nop
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	2000016c 	.word	0x2000016c

08005ad4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005ad8:	4802      	ldr	r0, [pc, #8]	; (8005ae4 <USART1_IRQHandler+0x10>)
 8005ada:	f7ff f8e5 	bl	8004ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005ade:	bf00      	nop
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000208 	.word	0x20000208

08005ae8 <MPU6050_dmpDataReady>:
#include "maincpp.h"

YPRAngle_t y;
extern float g_current_angle;
void MPU6050_dmpDataReady(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
	MPU_dmpDataReady();
 8005aec:	f001 f970 	bl	8006dd0 <_Z16MPU_dmpDataReadyv>
}
 8005af0:	bf00      	nop
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <MPU6050_GetYawValue>:
	//MPU_FAIL		1
	return MPU_Init(&MPU6050_I2C);
}

uint8_t MPU6050_GetYawValue(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
	//READ_MPU_SUCCESS		0
	//READ_MPU_SUCCESS		1
	//READ_MPU_I2C_LOST		2
	u8_t stt =  MPU_GetYawPitchRoll(y);
 8005afa:	4807      	ldr	r0, [pc, #28]	; (8005b18 <MPU6050_GetYawValue+0x24>)
 8005afc:	f001 f9ec 	bl	8006ed8 <_Z19MPU_GetYawPitchRollR10YPRAngle_t>
 8005b00:	4603      	mov	r3, r0
 8005b02:	71fb      	strb	r3, [r7, #7]
	g_current_angle = y.yaw;
 8005b04:	4b04      	ldr	r3, [pc, #16]	; (8005b18 <MPU6050_GetYawValue+0x24>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <MPU6050_GetYawValue+0x28>)
 8005b0a:	6013      	str	r3, [r2, #0]
	return stt;
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2000024c 	.word	0x2000024c
 8005b1c:	20000374 	.word	0x20000374

08005b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b094      	sub	sp, #80	; 0x50
 8005b24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b26:	f107 0320 	add.w	r3, r7, #32
 8005b2a:	2230      	movs	r2, #48	; 0x30
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 fda4 	bl	800767c <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	609a      	str	r2, [r3, #8]
 8005b40:	60da      	str	r2, [r3, #12]
 8005b42:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8005b44:	2300      	movs	r3, #0
 8005b46:	60bb      	str	r3, [r7, #8]
 8005b48:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <SystemClock_Config+0xc8>)
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	4a26      	ldr	r2, [pc, #152]	; (8005be8 <SystemClock_Config+0xc8>)
 8005b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b52:	6413      	str	r3, [r2, #64]	; 0x40
 8005b54:	4b24      	ldr	r3, [pc, #144]	; (8005be8 <SystemClock_Config+0xc8>)
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b60:	2300      	movs	r3, #0
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	4b21      	ldr	r3, [pc, #132]	; (8005bec <SystemClock_Config+0xcc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a20      	ldr	r2, [pc, #128]	; (8005bec <SystemClock_Config+0xcc>)
 8005b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <SystemClock_Config+0xcc>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b80:	2301      	movs	r3, #1
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005b84:	2310      	movs	r3, #16
 8005b86:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 8005b90:	2308      	movs	r3, #8
 8005b92:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 84;
 8005b94:	2354      	movs	r3, #84	; 0x54
 8005b96:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005b9c:	2304      	movs	r3, #4
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ba0:	f107 0320 	add.w	r3, r7, #32
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fc ffed 	bl	8002b84 <HAL_RCC_OscConfig>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <SystemClock_Config+0x94>
	  {
	    Error_Handler();
 8005bb0:	f000 faac 	bl	800610c <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005bb4:	230f      	movs	r3, #15
 8005bb6:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bc4:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005bca:	f107 030c 	add.w	r3, r7, #12
 8005bce:	2102      	movs	r1, #2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fd fa4f 	bl	8003074 <HAL_RCC_ClockConfig>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <SystemClock_Config+0xc0>
	  {
	    Error_Handler();
 8005bdc:	f000 fa96 	bl	800610c <Error_Handler>
	  }
}
 8005be0:	bf00      	nop
 8005be2:	3750      	adds	r7, #80	; 0x50
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40007000 	.word	0x40007000

08005bf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b096      	sub	sp, #88	; 0x58
 8005bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	611a      	str	r2, [r3, #16]
 8005c10:	615a      	str	r2, [r3, #20]
 8005c12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c14:	f107 0314 	add.w	r3, r7, #20
 8005c18:	2220      	movs	r2, #32
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fd2d 	bl	800767c <memset>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	605a      	str	r2, [r3, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005c2e:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c30:	4a43      	ldr	r2, [pc, #268]	; (8005d40 <MX_TIM1_Init+0x150>)
 8005c32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005c34:	4b41      	ldr	r3, [pc, #260]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c3a:	4b40      	ldr	r3, [pc, #256]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8399;
 8005c40:	4b3e      	ldr	r3, [pc, #248]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c42:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005c46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c48:	4b3c      	ldr	r3, [pc, #240]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005c4e:	4b3b      	ldr	r3, [pc, #236]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c54:	4b39      	ldr	r3, [pc, #228]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005c5a:	4838      	ldr	r0, [pc, #224]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c5c:	f7fd fbda 	bl	8003414 <HAL_TIM_Base_Init>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <MX_TIM1_Init+0x7a>
	{
	  Error_Handler();
 8005c66:	f000 fa51 	bl	800610c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c6e:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4831      	ldr	r0, [pc, #196]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c76:	f7fe f997 	bl	8003fa8 <HAL_TIM_ConfigClockSource>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <MX_TIM1_Init+0x94>
	{
	  Error_Handler();
 8005c80:	f000 fa44 	bl	800610c <Error_Handler>
	}
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005c84:	482d      	ldr	r0, [pc, #180]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005c86:	f7fd fc85 	bl	8003594 <HAL_TIM_PWM_Init>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8005c90:	f000 fa3c 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c94:	2300      	movs	r3, #0
 8005c96:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005c9c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4826      	ldr	r0, [pc, #152]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005ca4:	f7fe fea0 	bl	80049e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8005cae:	f000 fa2d 	bl	800610c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cb2:	2360      	movs	r3, #96	; 0x60
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005cca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cce:	220c      	movs	r2, #12
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	481a      	ldr	r0, [pc, #104]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005cd4:	f7fe f8a6 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8005cde:	f000 fa15 	bl	800610c <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4814      	ldr	r0, [pc, #80]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005cec:	f7fe f89a 	bl	8003e24 <HAL_TIM_PWM_ConfigChannel>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <MX_TIM1_Init+0x10a>
{
  Error_Handler();
 8005cf6:	f000 fa09 	bl	800610c <Error_Handler>
}

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4807      	ldr	r0, [pc, #28]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005d20:	f7fe fede 	bl	8004ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8005d2a:	f000 f9ef 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005d2e:	4803      	ldr	r0, [pc, #12]	; (8005d3c <MX_TIM1_Init+0x14c>)
 8005d30:	f7fb f904 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8005d34:	bf00      	nop
 8005d36:	3758      	adds	r7, #88	; 0x58
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000094 	.word	0x20000094
 8005d40:	40010000 	.word	0x40010000

08005d44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d4a:	f107 0308 	add.w	r3, r7, #8
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	609a      	str	r2, [r3, #8]
 8005d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d58:	463b      	mov	r3, r7
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005d60:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <MX_TIM3_Init+0x98>)
 8005d64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 419;
 8005d66:	4b1c      	ldr	r3, [pc, #112]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005d68:	f240 12a3 	movw	r2, #419	; 0x1a3
 8005d6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8005d74:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005d76:	f242 720f 	movw	r2, #9999	; 0x270f
 8005d7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d7c:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005d88:	4813      	ldr	r0, [pc, #76]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005d8a:	f7fd fb43 	bl	8003414 <HAL_TIM_Base_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8005d94:	f000 f9ba 	bl	800610c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005d9e:	f107 0308 	add.w	r3, r7, #8
 8005da2:	4619      	mov	r1, r3
 8005da4:	480c      	ldr	r0, [pc, #48]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005da6:	f7fe f8ff 	bl	8003fa8 <HAL_TIM_ConfigClockSource>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8005db0:	f000 f9ac 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4805      	ldr	r0, [pc, #20]	; (8005dd8 <MX_TIM3_Init+0x94>)
 8005dc2:	f7fe fe11 	bl	80049e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8005dcc:	f000 f99e 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005dd0:	bf00      	nop
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000124 	.word	0x20000124
 8005ddc:	40000400 	.word	0x40000400

08005de0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08a      	sub	sp, #40	; 0x28
 8005de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005de6:	f107 0320 	add.w	r3, r7, #32
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005df0:	f107 0310 	add.w	r3, r7, #16
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	605a      	str	r2, [r3, #4]
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	60da      	str	r2, [r3, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dfe:	463b      	mov	r3, r7
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	605a      	str	r2, [r3, #4]
 8005e06:	609a      	str	r2, [r3, #8]
 8005e08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e0a:	4b32      	ldr	r3, [pc, #200]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8005e12:	4b30      	ldr	r3, [pc, #192]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e14:	2253      	movs	r2, #83	; 0x53
 8005e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e18:	4b2e      	ldr	r3, [pc, #184]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005e1e:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005e24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e26:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e2c:	4b29      	ldr	r3, [pc, #164]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e32:	4828      	ldr	r0, [pc, #160]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e34:	f7fd faee 	bl	8003414 <HAL_TIM_Base_Init>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <MX_TIM2_Init+0x62>
    {
      Error_Handler();
 8005e3e:	f000 f965 	bl	800610c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e46:	603b      	str	r3, [r7, #0]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e48:	463b      	mov	r3, r7
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4821      	ldr	r0, [pc, #132]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e4e:	f7fe f8ab 	bl	8003fa8 <HAL_TIM_ConfigClockSource>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <MX_TIM2_Init+0x7c>
    {
      Error_Handler();
 8005e58:	f000 f958 	bl	800610c <Error_Handler>
    }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005e5c:	481d      	ldr	r0, [pc, #116]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e5e:	f7fd fcbb 	bl	80037d8 <HAL_TIM_IC_Init>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005e68:	f000 f950 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e70:	2300      	movs	r3, #0
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e74:	f107 0320 	add.w	r3, r7, #32
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4816      	ldr	r0, [pc, #88]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005e7c:	f7fe fdb4 	bl	80049e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8005e86:	f000 f941 	bl	800610c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	617b      	str	r3, [r7, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61bb      	str	r3, [r7, #24]
  sConfigIC.ICFilter = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005e9a:	f107 0310 	add.w	r3, r7, #16
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	480c      	ldr	r0, [pc, #48]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005ea4:	f7fd ff22 	bl	8003cec <HAL_TIM_IC_ConfigChannel>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005eae:	f000 f92d 	bl	800610c <Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8005eb2:	f107 0310 	add.w	r3, r7, #16
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4806      	ldr	r0, [pc, #24]	; (8005ed4 <MX_TIM2_Init+0xf4>)
 8005ebc:	f7fd ff16 	bl	8003cec <HAL_TIM_IC_ConfigChannel>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <MX_TIM2_Init+0xea>
	{
	  Error_Handler();
 8005ec6:	f000 f921 	bl	800610c <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005eca:	bf00      	nop
 8005ecc:	3728      	adds	r7, #40	; 0x28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200000dc 	.word	0x200000dc

08005ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	609a      	str	r2, [r3, #8]
 8005eea:	60da      	str	r2, [r3, #12]
 8005eec:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	4b30      	ldr	r3, [pc, #192]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	4a2f      	ldr	r2, [pc, #188]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005ef8:	f043 0301 	orr.w	r3, r3, #1
 8005efc:	6313      	str	r3, [r2, #48]	; 0x30
 8005efe:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	60bb      	str	r3, [r7, #8]
 8005f08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	4b29      	ldr	r3, [pc, #164]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	4a28      	ldr	r2, [pc, #160]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005f14:	f043 0310 	orr.w	r3, r3, #16
 8005f18:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1a:	4b26      	ldr	r3, [pc, #152]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	607b      	str	r3, [r7, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	603b      	str	r3, [r7, #0]
 8005f2a:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	4a21      	ldr	r2, [pc, #132]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005f30:	f043 0302 	orr.w	r3, r3, #2
 8005f34:	6313      	str	r3, [r2, #48]	; 0x30
 8005f36:	4b1f      	ldr	r3, [pc, #124]	; (8005fb4 <MX_GPIO_Init+0xdc>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8005f42:	2201      	movs	r2, #1
 8005f44:	2103      	movs	r1, #3
 8005f46:	481c      	ldr	r0, [pc, #112]	; (8005fb8 <MX_GPIO_Init+0xe0>)
 8005f48:	f7fb fcc4 	bl	80018d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005f4c:	2333      	movs	r3, #51	; 0x33
 8005f4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f50:	2301      	movs	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f5c:	f107 030c 	add.w	r3, r7, #12
 8005f60:	4619      	mov	r1, r3
 8005f62:	4815      	ldr	r0, [pc, #84]	; (8005fb8 <MX_GPIO_Init+0xe0>)
 8005f64:	f7fb fb02 	bl	800156c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005f68:	230c      	movs	r3, #12
 8005f6a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f74:	f107 030c 	add.w	r3, r7, #12
 8005f78:	4619      	mov	r1, r3
 8005f7a:	480f      	ldr	r0, [pc, #60]	; (8005fb8 <MX_GPIO_Init+0xe0>)
 8005f7c:	f7fb faf6 	bl	800156c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005f80:	2320      	movs	r3, #32
 8005f82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005f84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005f88:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f8e:	f107 030c 	add.w	r3, r7, #12
 8005f92:	4619      	mov	r1, r3
 8005f94:	4809      	ldr	r0, [pc, #36]	; (8005fbc <MX_GPIO_Init+0xe4>)
 8005f96:	f7fb fae9 	bl	800156c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	2017      	movs	r0, #23
 8005fa0:	f7fb fa1b 	bl	80013da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005fa4:	2017      	movs	r0, #23
 8005fa6:	f7fb fa34 	bl	8001412 <HAL_NVIC_EnableIRQ>
}
 8005faa:	bf00      	nop
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	40020000 	.word	0x40020000
 8005fbc:	40020400 	.word	0x40020400

08005fc0 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005fc6:	f107 0308 	add.w	r3, r7, #8
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	609a      	str	r2, [r3, #8]
 8005fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <MX_TIM4_Init+0x94>)
 8005fde:	4a1e      	ldr	r2, [pc, #120]	; (8006058 <MX_TIM4_Init+0x98>)
 8005fe0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <MX_TIM4_Init+0x94>)
 8005fe4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005fe8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fea:	4b1a      	ldr	r3, [pc, #104]	; (8006054 <MX_TIM4_Init+0x94>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005ff0:	4b18      	ldr	r3, [pc, #96]	; (8006054 <MX_TIM4_Init+0x94>)
 8005ff2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ff6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ff8:	4b16      	ldr	r3, [pc, #88]	; (8006054 <MX_TIM4_Init+0x94>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <MX_TIM4_Init+0x94>)
 8006000:	2200      	movs	r2, #0
 8006002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006004:	4813      	ldr	r0, [pc, #76]	; (8006054 <MX_TIM4_Init+0x94>)
 8006006:	f7fd fa05 	bl	8003414 <HAL_TIM_Base_Init>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8006010:	f000 f87c 	bl	800610c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006018:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4619      	mov	r1, r3
 8006020:	480c      	ldr	r0, [pc, #48]	; (8006054 <MX_TIM4_Init+0x94>)
 8006022:	f7fd ffc1 	bl	8003fa8 <HAL_TIM_ConfigClockSource>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800602c:	f000 f86e 	bl	800610c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006030:	2300      	movs	r3, #0
 8006032:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006034:	2300      	movs	r3, #0
 8006036:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006038:	463b      	mov	r3, r7
 800603a:	4619      	mov	r1, r3
 800603c:	4805      	ldr	r0, [pc, #20]	; (8006054 <MX_TIM4_Init+0x94>)
 800603e:	f7fe fcd3 	bl	80049e8 <HAL_TIMEx_MasterConfigSynchronization>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8006048:	f000 f860 	bl	800610c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800604c:	bf00      	nop
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	2000016c 	.word	0x2000016c
 8006058:	40000800 	.word	0x40000800

0800605c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8006060:	4b12      	ldr	r3, [pc, #72]	; (80060ac <MX_I2C1_Init+0x50>)
 8006062:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <MX_I2C1_Init+0x54>)
 8006064:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8006066:	4b11      	ldr	r3, [pc, #68]	; (80060ac <MX_I2C1_Init+0x50>)
 8006068:	4a12      	ldr	r2, [pc, #72]	; (80060b4 <MX_I2C1_Init+0x58>)
 800606a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800606c:	4b0f      	ldr	r3, [pc, #60]	; (80060ac <MX_I2C1_Init+0x50>)
 800606e:	2200      	movs	r2, #0
 8006070:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8006072:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <MX_I2C1_Init+0x50>)
 8006074:	2200      	movs	r2, #0
 8006076:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006078:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <MX_I2C1_Init+0x50>)
 800607a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800607e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006080:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <MX_I2C1_Init+0x50>)
 8006082:	2200      	movs	r2, #0
 8006084:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <MX_I2C1_Init+0x50>)
 8006088:	2200      	movs	r2, #0
 800608a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <MX_I2C1_Init+0x50>)
 800608e:	2200      	movs	r2, #0
 8006090:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <MX_I2C1_Init+0x50>)
 8006094:	2200      	movs	r2, #0
 8006096:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006098:	4804      	ldr	r0, [pc, #16]	; (80060ac <MX_I2C1_Init+0x50>)
 800609a:	f7fb fc4d 	bl	8001938 <HAL_I2C_Init>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_I2C1_Init+0x4c>
	{
	 Error_Handler();
 80060a4:	f000 f832 	bl	800610c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80060a8:	bf00      	nop
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	200001b4 	.word	0x200001b4
 80060b0:	40005400 	.word	0x40005400
 80060b4:	00061a80 	.word	0x00061a80

080060b8 <MX_USART1_UART_Init>:
   * @brief USART1 Initialization Function
   * @param None
   * @retval None
   */
 static void MX_USART1_UART_Init(void)
 {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */

   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 80060bc:	4b11      	ldr	r3, [pc, #68]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060be:	4a12      	ldr	r2, [pc, #72]	; (8006108 <MX_USART1_UART_Init+0x50>)
 80060c0:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060c8:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060ca:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 80060d0:	4b0c      	ldr	r3, [pc, #48]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060d8:	2200      	movs	r2, #0
 80060da:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 80060dc:	4b09      	ldr	r3, [pc, #36]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060de:	220c      	movs	r2, #12
 80060e0:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060e2:	4b08      	ldr	r3, [pc, #32]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060e8:	4b06      	ldr	r3, [pc, #24]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	61da      	str	r2, [r3, #28]
   if (HAL_UART_Init(&huart1) != HAL_OK)
 80060ee:	4805      	ldr	r0, [pc, #20]	; (8006104 <MX_USART1_UART_Init+0x4c>)
 80060f0:	f7fe fd5c 	bl	8004bac <HAL_UART_Init>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <MX_USART1_UART_Init+0x46>
   {
     Error_Handler();
 80060fa:	f000 f807 	bl	800610c <Error_Handler>
   }
   /* USER CODE BEGIN USART1_Init 2 */

   /* USER CODE END USART1_Init 2 */

 }
 80060fe:	bf00      	nop
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000208 	.word	0x20000208
 8006108:	40011000 	.word	0x40011000

0800610c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006110:	b672      	cpsid	i
}
 8006112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006114:	e7fe      	b.n	8006114 <Error_Handler+0x8>
	...

08006118 <DcControlSetup>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
void DcControlSetup(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
	HAL_Init();
 800611c:	f7fb f810 	bl	8001140 <HAL_Init>
	SystemClock_Config();
 8006120:	f7ff fcfe 	bl	8005b20 <SystemClock_Config>

	MX_GPIO_Init();
 8006124:	f7ff fed8 	bl	8005ed8 <MX_GPIO_Init>
	MX_TIM1_Init();
 8006128:	f7ff fd62 	bl	8005bf0 <MX_TIM1_Init>
	MX_TIM2_Init();
 800612c:	f7ff fe58 	bl	8005de0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8006130:	f7ff fe08 	bl	8005d44 <MX_TIM3_Init>
	MX_TIM4_Init();
 8006134:	f7ff ff44 	bl	8005fc0 <MX_TIM4_Init>
	MX_I2C1_Init();
 8006138:	f7ff ff90 	bl	800605c <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800613c:	f7ff ffbc 	bl	80060b8 <MX_USART1_UART_Init>

	HAL_TIM_Base_Start_IT(&DC1_TIM_UPDATE);
 8006140:	480e      	ldr	r0, [pc, #56]	; (800617c <DcControlSetup+0x64>)
 8006142:	f7fd f9b7 	bl	80034b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&DC1_TIM_PULSE_COUNT);
 8006146:	480e      	ldr	r0, [pc, #56]	; (8006180 <DcControlSetup+0x68>)
 8006148:	f7fd f9b4 	bl	80034b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&DC2_TIM_PULSE_COUNT);
 800614c:	480c      	ldr	r0, [pc, #48]	; (8006180 <DcControlSetup+0x68>)
 800614e:	f7fd f9b1 	bl	80034b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&TIM_CHECK_ROBOT_STOP_UPDATE);
 8006152:	480c      	ldr	r0, [pc, #48]	; (8006184 <DcControlSetup+0x6c>)
 8006154:	f7fd f9ae 	bl	80034b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&DC1_TIM_PULSE_COUNT, DC1_TIM_PULSE_COUNT_CHANNEL);
 8006158:	2104      	movs	r1, #4
 800615a:	4809      	ldr	r0, [pc, #36]	; (8006180 <DcControlSetup+0x68>)
 800615c:	f7fd fb96 	bl	800388c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&DC2_TIM_PULSE_COUNT, DC2_TIM_PULSE_COUNT_CHANNEL);
 8006160:	2108      	movs	r1, #8
 8006162:	4807      	ldr	r0, [pc, #28]	; (8006180 <DcControlSetup+0x68>)
 8006164:	f7fd fb92 	bl	800388c <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&DC1_TIM_PWM, DC1_TIM_PWM_CHANNEL);
 8006168:	210c      	movs	r1, #12
 800616a:	4807      	ldr	r0, [pc, #28]	; (8006188 <DcControlSetup+0x70>)
 800616c:	f7fd fa6c 	bl	8003648 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&DC2_TIM_PWM, DC2_TIM_PWM_CHANNEL);
 8006170:	2100      	movs	r1, #0
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <DcControlSetup+0x70>)
 8006174:	f7fd fa68 	bl	8003648 <HAL_TIM_PWM_Start>
}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000124 	.word	0x20000124
 8006180:	200000dc 	.word	0x200000dc
 8006184:	2000016c 	.word	0x2000016c
 8006188:	20000094 	.word	0x20000094

0800618c <dcControl>:

void_t dcControl(i32_t wPulse, TIM_HandleTypeDef htim, u8_t tim_Channel)
{
 800618c:	b084      	sub	sp, #16
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	f107 0014 	add.w	r0, r7, #20
 800619a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	static uint16_t iwPulse_length = 0;
//
//	iwPulse_length = (TIM_PERIOD * iwDuty_cycle)/100;

	__HAL_TIM_SET_COMPARE(&htim, tim_Channel, wPulse);
 800619e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d103      	bne.n	80061ae <dcControl+0x22>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80061ac:	e012      	b.n	80061d4 <dcControl+0x48>
	__HAL_TIM_SET_COMPARE(&htim, tim_Channel, wPulse);
 80061ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d103      	bne.n	80061be <dcControl+0x32>
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80061bc:	e00a      	b.n	80061d4 <dcControl+0x48>
	__HAL_TIM_SET_COMPARE(&htim, tim_Channel, wPulse);
 80061be:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80061c2:	2b08      	cmp	r3, #8
 80061c4:	d103      	bne.n	80061ce <dcControl+0x42>
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80061cc:	e002      	b.n	80061d4 <dcControl+0x48>
	__HAL_TIM_SET_COMPARE(&htim, tim_Channel, wPulse);
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	b004      	add	sp, #16
 80061e0:	4770      	bx	lr
	...

080061e4 <dc1_speed_PID>:
  * @param 	[wDespulse]		:		pulse want to obtain
  *
  * @return		-	NonewDespulse
  */
void_t dc1_speed_PID(u32_t wDespulse)
{
 80061e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e6:	b093      	sub	sp, #76	; 0x4c
 80061e8:	af10      	add	r7, sp, #64	; 0x40
 80061ea:	6078      	str	r0, [r7, #4]
	g_iwErrDc1 = wDespulse - abs(g_iwPulseDc1);
 80061ec:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <dc1_speed_PID+0xf8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	bfb8      	it	lt
 80061f4:	425b      	neglt	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	4b38      	ldr	r3, [pc, #224]	; (80062e0 <dc1_speed_PID+0xfc>)
 8006200:	601a      	str	r2, [r3, #0]

	g_iwpPartDc1 = g_byKp*g_iwErrDc1;
 8006202:	4b38      	ldr	r3, [pc, #224]	; (80062e4 <dc1_speed_PID+0x100>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	4b35      	ldr	r3, [pc, #212]	; (80062e0 <dc1_speed_PID+0xfc>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	fb03 f302 	mul.w	r3, r3, r2
 8006210:	4a35      	ldr	r2, [pc, #212]	; (80062e8 <dc1_speed_PID+0x104>)
 8006212:	6013      	str	r3, [r2, #0]
	g_iwdPartDc1 = g_byKd*(g_iwErrDc1 - g_iwPreErrDc1)*INV_SAMPLING_TIME;
 8006214:	4b35      	ldr	r3, [pc, #212]	; (80062ec <dc1_speed_PID+0x108>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	4619      	mov	r1, r3
 800621a:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <dc1_speed_PID+0xfc>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b34      	ldr	r3, [pc, #208]	; (80062f0 <dc1_speed_PID+0x10c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	fb03 f201 	mul.w	r2, r3, r1
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	461a      	mov	r2, r3
 8006232:	4b30      	ldr	r3, [pc, #192]	; (80062f4 <dc1_speed_PID+0x110>)
 8006234:	601a      	str	r2, [r3, #0]
	g_iwiPartDc1 += g_byKi*SAMPLING_TIME*g_iwErrDc1/1000;
 8006236:	4b30      	ldr	r3, [pc, #192]	; (80062f8 <dc1_speed_PID+0x114>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	2332      	movs	r3, #50	; 0x32
 800623e:	fb03 f302 	mul.w	r3, r3, r2
 8006242:	4a27      	ldr	r2, [pc, #156]	; (80062e0 <dc1_speed_PID+0xfc>)
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	4a2c      	ldr	r2, [pc, #176]	; (80062fc <dc1_speed_PID+0x118>)
 800624c:	fb82 1203 	smull	r1, r2, r2, r3
 8006250:	1192      	asrs	r2, r2, #6
 8006252:	17db      	asrs	r3, r3, #31
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	4b2a      	ldr	r3, [pc, #168]	; (8006300 <dc1_speed_PID+0x11c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4413      	add	r3, r2
 800625c:	4a28      	ldr	r2, [pc, #160]	; (8006300 <dc1_speed_PID+0x11c>)
 800625e:	6013      	str	r3, [r2, #0]
	g_iwOutputDc1 += g_iwpPartDc1 + g_iwdPartDc1 + g_iwiPartDc1;
 8006260:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <dc1_speed_PID+0x104>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b23      	ldr	r3, [pc, #140]	; (80062f4 <dc1_speed_PID+0x110>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	441a      	add	r2, r3
 800626a:	4b25      	ldr	r3, [pc, #148]	; (8006300 <dc1_speed_PID+0x11c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	441a      	add	r2, r3
 8006270:	4b24      	ldr	r3, [pc, #144]	; (8006304 <dc1_speed_PID+0x120>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4413      	add	r3, r2
 8006276:	4a23      	ldr	r2, [pc, #140]	; (8006304 <dc1_speed_PID+0x120>)
 8006278:	6013      	str	r3, [r2, #0]

	if(g_iwOutputDc1 >= TIM_PERIOD) g_iwOutputDc1 = TIM_PERIOD - 1;
 800627a:	4b22      	ldr	r3, [pc, #136]	; (8006304 <dc1_speed_PID+0x120>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8006282:	4293      	cmp	r3, r2
 8006284:	dd03      	ble.n	800628e <dc1_speed_PID+0xaa>
 8006286:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <dc1_speed_PID+0x120>)
 8006288:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800628c:	601a      	str	r2, [r3, #0]
	if(g_iwOutputDc1 <= 0) g_iwOutputDc1 = 1;
 800628e:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <dc1_speed_PID+0x120>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	dc02      	bgt.n	800629c <dc1_speed_PID+0xb8>
 8006296:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <dc1_speed_PID+0x120>)
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]

	dcControl(g_iwOutputDc1, DC1_TIM_PWM, DC1_TIM_PWM_CHANNEL);
 800629c:	4b19      	ldr	r3, [pc, #100]	; (8006304 <dc1_speed_PID+0x120>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	4e19      	ldr	r6, [pc, #100]	; (8006308 <dc1_speed_PID+0x124>)
 80062a4:	230c      	movs	r3, #12
 80062a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80062a8:	466d      	mov	r5, sp
 80062aa:	f106 040c 	add.w	r4, r6, #12
 80062ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80062be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80062c2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80062c6:	6838      	ldr	r0, [r7, #0]
 80062c8:	f7ff ff60 	bl	800618c <dcControl>

	g_iwPreErrDc1 = g_iwErrDc1;
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <dc1_speed_PID+0xfc>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a07      	ldr	r2, [pc, #28]	; (80062f0 <dc1_speed_PID+0x10c>)
 80062d2:	6013      	str	r3, [r2, #0]


}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062dc:	2000033c 	.word	0x2000033c
 80062e0:	2000032c 	.word	0x2000032c
 80062e4:	20000009 	.word	0x20000009
 80062e8:	2000025c 	.word	0x2000025c
 80062ec:	2000000a 	.word	0x2000000a
 80062f0:	20000354 	.word	0x20000354
 80062f4:	20000260 	.word	0x20000260
 80062f8:	20000258 	.word	0x20000258
 80062fc:	10624dd3 	.word	0x10624dd3
 8006300:	20000264 	.word	0x20000264
 8006304:	2000035c 	.word	0x2000035c
 8006308:	20000094 	.word	0x20000094

0800630c <dc2_speed_PID>:
  * @param 	[wDespulse]		:		pulse want to obtain
  *
  * @return		-	NonewDespulse
  */
void_t dc2_speed_PID(u32_t wDespulse)
{
 800630c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630e:	b093      	sub	sp, #76	; 0x4c
 8006310:	af10      	add	r7, sp, #64	; 0x40
 8006312:	6078      	str	r0, [r7, #4]
	g_iwErrDc2 = wDespulse - abs(g_iwPulseDc2);
 8006314:	4b3b      	ldr	r3, [pc, #236]	; (8006404 <dc2_speed_PID+0xf8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	bfb8      	it	lt
 800631c:	425b      	neglt	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	461a      	mov	r2, r3
 8006326:	4b38      	ldr	r3, [pc, #224]	; (8006408 <dc2_speed_PID+0xfc>)
 8006328:	601a      	str	r2, [r3, #0]

	g_iwpPartDc2 = g_byKp*g_iwErrDc2;
 800632a:	4b38      	ldr	r3, [pc, #224]	; (800640c <dc2_speed_PID+0x100>)
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	4b35      	ldr	r3, [pc, #212]	; (8006408 <dc2_speed_PID+0xfc>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	fb03 f302 	mul.w	r3, r3, r2
 8006338:	4a35      	ldr	r2, [pc, #212]	; (8006410 <dc2_speed_PID+0x104>)
 800633a:	6013      	str	r3, [r2, #0]
	g_iwdPartDc2 = g_byKd*(g_iwErrDc2 - g_iwPreErrDc2)*INV_SAMPLING_TIME;
 800633c:	4b35      	ldr	r3, [pc, #212]	; (8006414 <dc2_speed_PID+0x108>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	4619      	mov	r1, r3
 8006342:	4b31      	ldr	r3, [pc, #196]	; (8006408 <dc2_speed_PID+0xfc>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b34      	ldr	r3, [pc, #208]	; (8006418 <dc2_speed_PID+0x10c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	fb03 f201 	mul.w	r2, r3, r1
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	461a      	mov	r2, r3
 800635a:	4b30      	ldr	r3, [pc, #192]	; (800641c <dc2_speed_PID+0x110>)
 800635c:	601a      	str	r2, [r3, #0]
	g_iwiPartDc2 += g_byKi*SAMPLING_TIME*g_iwErrDc2/1000;
 800635e:	4b30      	ldr	r3, [pc, #192]	; (8006420 <dc2_speed_PID+0x114>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	2332      	movs	r3, #50	; 0x32
 8006366:	fb03 f302 	mul.w	r3, r3, r2
 800636a:	4a27      	ldr	r2, [pc, #156]	; (8006408 <dc2_speed_PID+0xfc>)
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	fb02 f303 	mul.w	r3, r2, r3
 8006372:	4a2c      	ldr	r2, [pc, #176]	; (8006424 <dc2_speed_PID+0x118>)
 8006374:	fb82 1203 	smull	r1, r2, r2, r3
 8006378:	1192      	asrs	r2, r2, #6
 800637a:	17db      	asrs	r3, r3, #31
 800637c:	1ad2      	subs	r2, r2, r3
 800637e:	4b2a      	ldr	r3, [pc, #168]	; (8006428 <dc2_speed_PID+0x11c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4413      	add	r3, r2
 8006384:	4a28      	ldr	r2, [pc, #160]	; (8006428 <dc2_speed_PID+0x11c>)
 8006386:	6013      	str	r3, [r2, #0]
	g_iwOutputDc2 += g_iwpPartDc2 + g_iwdPartDc2 + g_iwiPartDc2;
 8006388:	4b21      	ldr	r3, [pc, #132]	; (8006410 <dc2_speed_PID+0x104>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	4b23      	ldr	r3, [pc, #140]	; (800641c <dc2_speed_PID+0x110>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	441a      	add	r2, r3
 8006392:	4b25      	ldr	r3, [pc, #148]	; (8006428 <dc2_speed_PID+0x11c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	441a      	add	r2, r3
 8006398:	4b24      	ldr	r3, [pc, #144]	; (800642c <dc2_speed_PID+0x120>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4413      	add	r3, r2
 800639e:	4a23      	ldr	r2, [pc, #140]	; (800642c <dc2_speed_PID+0x120>)
 80063a0:	6013      	str	r3, [r2, #0]

	if(g_iwOutputDc2 >= TIM_PERIOD) g_iwOutputDc2 = TIM_PERIOD - 1;
 80063a2:	4b22      	ldr	r3, [pc, #136]	; (800642c <dc2_speed_PID+0x120>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80063aa:	4293      	cmp	r3, r2
 80063ac:	dd03      	ble.n	80063b6 <dc2_speed_PID+0xaa>
 80063ae:	4b1f      	ldr	r3, [pc, #124]	; (800642c <dc2_speed_PID+0x120>)
 80063b0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80063b4:	601a      	str	r2, [r3, #0]
	if(g_iwOutputDc2 <= 0) g_iwOutputDc2 = 1;
 80063b6:	4b1d      	ldr	r3, [pc, #116]	; (800642c <dc2_speed_PID+0x120>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dc02      	bgt.n	80063c4 <dc2_speed_PID+0xb8>
 80063be:	4b1b      	ldr	r3, [pc, #108]	; (800642c <dc2_speed_PID+0x120>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

	dcControl(g_iwOutputDc2, DC2_TIM_PWM, DC2_TIM_PWM_CHANNEL);
 80063c4:	4b19      	ldr	r3, [pc, #100]	; (800642c <dc2_speed_PID+0x120>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	4e19      	ldr	r6, [pc, #100]	; (8006430 <dc2_speed_PID+0x124>)
 80063cc:	2300      	movs	r3, #0
 80063ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80063d0:	466d      	mov	r5, sp
 80063d2:	f106 040c 	add.w	r4, r6, #12
 80063d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80063e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80063ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80063ee:	6838      	ldr	r0, [r7, #0]
 80063f0:	f7ff fecc 	bl	800618c <dcControl>

	g_iwPreErrDc2 = g_iwErrDc2;
 80063f4:	4b04      	ldr	r3, [pc, #16]	; (8006408 <dc2_speed_PID+0xfc>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a07      	ldr	r2, [pc, #28]	; (8006418 <dc2_speed_PID+0x10c>)
 80063fa:	6013      	str	r3, [r2, #0]
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006404:	20000358 	.word	0x20000358
 8006408:	20000348 	.word	0x20000348
 800640c:	20000009 	.word	0x20000009
 8006410:	20000268 	.word	0x20000268
 8006414:	2000000a 	.word	0x2000000a
 8006418:	20000360 	.word	0x20000360
 800641c:	2000026c 	.word	0x2000026c
 8006420:	20000258 	.word	0x20000258
 8006424:	10624dd3 	.word	0x10624dd3
 8006428:	20000270 	.word	0x20000270
 800642c:	20000368 	.word	0x20000368
 8006430:	20000094 	.word	0x20000094

08006434 <TIM2_IRQHandler>:
/* USER CODE BEGIN 4 */
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&DC1_TIM_PULSE_COUNT);
 8006438:	4802      	ldr	r0, [pc, #8]	; (8006444 <TIM2_IRQHandler+0x10>)
 800643a:	f7fd fb4f 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200000dc 	.word	0x200000dc

08006448 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
	if(htim->Instance == DC1_TIM_PULSE_COUNT.Instance && htim->Channel == DC1_TIM_PULSE_COUNT_CHANNEL_ACTIVE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4b29      	ldr	r3, [pc, #164]	; (80064fc <HAL_TIM_IC_CaptureCallback+0xb4>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d121      	bne.n	80064a0 <HAL_TIM_IC_CaptureCallback+0x58>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	7f1b      	ldrb	r3, [r3, #28]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d11d      	bne.n	80064a0 <HAL_TIM_IC_CaptureCallback+0x58>
	{
		u8_t byDirection = HAL_GPIO_ReadPin(DC1_C2_PORT, DC1_C2_PIN);
 8006464:	2104      	movs	r1, #4
 8006466:	4826      	ldr	r0, [pc, #152]	; (8006500 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8006468:	f7fb fa1c 	bl	80018a4 <HAL_GPIO_ReadPin>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]

		if(byDirection == 1)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d105      	bne.n	8006482 <HAL_TIM_IC_CaptureCallback+0x3a>
		{
//			g_DirectionDc1 = DC_CLOCWISE;
			g_iwPulseDc1++;
 8006476:	4b23      	ldr	r3, [pc, #140]	; (8006504 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	4a21      	ldr	r2, [pc, #132]	; (8006504 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	e004      	b.n	800648c <HAL_TIM_IC_CaptureCallback+0x44>
		}
		else
		{
//			g_DirectionDc1 = DC_ANTICLOCKWISE;
			g_iwPulseDc1--;
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3b01      	subs	r3, #1
 8006488:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800648a:	6013      	str	r3, [r2, #0]
		}

		if(g_run_distance == 1)
 800648c:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d12d      	bne.n	80064f0 <HAL_TIM_IC_CaptureCallback+0xa8>
		{
			g_dc1_pulse_count++;
 8006494:	4b1d      	ldr	r3, [pc, #116]	; (800650c <HAL_TIM_IC_CaptureCallback+0xc4>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	4a1c      	ldr	r2, [pc, #112]	; (800650c <HAL_TIM_IC_CaptureCallback+0xc4>)
 800649c:	6013      	str	r3, [r2, #0]
	{
 800649e:	e027      	b.n	80064f0 <HAL_TIM_IC_CaptureCallback+0xa8>
//			}
		}
	}
	else
	{
		if(htim->Instance == DC2_TIM_PULSE_COUNT.Instance && htim->Channel == DC2_TIM_PULSE_COUNT_CHANNEL_ACTIVE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4b15      	ldr	r3, [pc, #84]	; (80064fc <HAL_TIM_IC_CaptureCallback+0xb4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d122      	bne.n	80064f2 <HAL_TIM_IC_CaptureCallback+0xaa>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	7f1b      	ldrb	r3, [r3, #28]
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d11e      	bne.n	80064f2 <HAL_TIM_IC_CaptureCallback+0xaa>
		{
			u8_t byDirection = HAL_GPIO_ReadPin(DC2_C2_PORT, DC2_C2_PIN);
 80064b4:	2108      	movs	r1, #8
 80064b6:	4812      	ldr	r0, [pc, #72]	; (8006500 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80064b8:	f7fb f9f4 	bl	80018a4 <HAL_GPIO_ReadPin>
 80064bc:	4603      	mov	r3, r0
 80064be:	73bb      	strb	r3, [r7, #14]

			if(byDirection == 1)
 80064c0:	7bbb      	ldrb	r3, [r7, #14]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d105      	bne.n	80064d2 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
//					g_DirectionDc2 = DC_CLOCWISE;
				g_iwPulseDc2++;
 80064c6:	4b12      	ldr	r3, [pc, #72]	; (8006510 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3301      	adds	r3, #1
 80064cc:	4a10      	ldr	r2, [pc, #64]	; (8006510 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	e004      	b.n	80064dc <HAL_TIM_IC_CaptureCallback+0x94>
			}
			else
			{
//					g_DirectionDc2 = DC_ANTICLOCKWISE;
				g_iwPulseDc2--;
 80064d2:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	4a0d      	ldr	r2, [pc, #52]	; (8006510 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80064da:	6013      	str	r3, [r2, #0]
			}

			if(g_run_distance == 1)
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d106      	bne.n	80064f2 <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				g_dc2_pulse_count++;
 80064e4:	4b0b      	ldr	r3, [pc, #44]	; (8006514 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	4a0a      	ldr	r2, [pc, #40]	; (8006514 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80064ec:	6013      	str	r3, [r2, #0]
//					g_dc2_pulse_count = 0;
//				}
			}
		}
	}
}
 80064ee:	e000      	b.n	80064f2 <HAL_TIM_IC_CaptureCallback+0xaa>
	{
 80064f0:	bf00      	nop
}
 80064f2:	bf00      	nop
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	200000dc 	.word	0x200000dc
 8006500:	40020000 	.word	0x40020000
 8006504:	2000033c 	.word	0x2000033c
 8006508:	20000344 	.word	0x20000344
 800650c:	20000364 	.word	0x20000364
 8006510:	20000358 	.word	0x20000358
 8006514:	20000334 	.word	0x20000334

08006518 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&DC1_TIM_UPDATE);
 800651c:	4802      	ldr	r0, [pc, #8]	; (8006528 <TIM3_IRQHandler+0x10>)
 800651e:	f7fd fadd 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006522:	bf00      	nop
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20000124 	.word	0x20000124

0800652c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
	if(htim->Instance == DC1_TIM_UPDATE.Instance)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b09      	ldr	r3, [pc, #36]	; (8006560 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d10b      	bne.n	8006558 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		dc1_speed_PID(g_wDespulse);
 8006540:	4b08      	ldr	r3, [pc, #32]	; (8006564 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff fe4d 	bl	80061e4 <dc1_speed_PID>
		dc2_speed_PID(g_wDespulse);
 800654a:	4b06      	ldr	r3, [pc, #24]	; (8006564 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f7ff fedc 	bl	800630c <dc2_speed_PID>
		checkDcStatus();
 8006554:	f000 f808 	bl	8006568 <checkDcStatus>
	}
}
 8006558:	bf00      	nop
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	20000124 	.word	0x20000124
 8006564:	20000328 	.word	0x20000328

08006568 <checkDcStatus>:
  * @param 	-	None
  *
  * @return		-	None
  */
static void_t checkDcStatus(void_t)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
	g_iwRpmDc1 = g_iwPulseDc1*INV_SAMPLING_TIME*60/(11*30);
 800656c:	4b13      	ldr	r3, [pc, #76]	; (80065bc <checkDcStatus+0x54>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006574:	fb02 f303 	mul.w	r3, r2, r3
 8006578:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <checkDcStatus+0x58>)
 800657a:	fb82 1203 	smull	r1, r2, r2, r3
 800657e:	11d2      	asrs	r2, r2, #7
 8006580:	17db      	asrs	r3, r3, #31
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	4a0f      	ldr	r2, [pc, #60]	; (80065c4 <checkDcStatus+0x5c>)
 8006586:	6013      	str	r3, [r2, #0]
	g_iwRpmDc2 = g_iwPulseDc2*INV_SAMPLING_TIME*60/(11*30);
 8006588:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <checkDcStatus+0x60>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	4a0a      	ldr	r2, [pc, #40]	; (80065c0 <checkDcStatus+0x58>)
 8006596:	fb82 1203 	smull	r1, r2, r2, r3
 800659a:	11d2      	asrs	r2, r2, #7
 800659c:	17db      	asrs	r3, r3, #31
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <checkDcStatus+0x64>)
 80065a2:	6013      	str	r3, [r2, #0]
	g_iwPulseDc1 = 0;
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <checkDcStatus+0x54>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]
	g_iwPulseDc2 = 0;
 80065aa:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <checkDcStatus+0x60>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
}
 80065b0:	bf00      	nop
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	2000033c 	.word	0x2000033c
 80065c0:	634c0635 	.word	0x634c0635
 80065c4:	20000330 	.word	0x20000330
 80065c8:	20000358 	.word	0x20000358
 80065cc:	2000034c 	.word	0x2000034c

080065d0 <dc1_RotateClockWise>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc1_RotateClockWise(u16_t wRpm)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	4603      	mov	r3, r0
 80065d8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(INT1_PORT, INT1_PIN, SET);
 80065da:	2201      	movs	r2, #1
 80065dc:	2101      	movs	r1, #1
 80065de:	481e      	ldr	r0, [pc, #120]	; (8006658 <dc1_RotateClockWise+0x88>)
 80065e0:	f7fb f978 	bl	80018d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT2_PORT, INT2_PIN, RESET);
 80065e4:	2200      	movs	r2, #0
 80065e6:	2102      	movs	r1, #2
 80065e8:	481b      	ldr	r0, [pc, #108]	; (8006658 <dc1_RotateClockWise+0x88>)
 80065ea:	f7fb f973 	bl	80018d4 <HAL_GPIO_WritePin>

	float temp = (float)(wRpm);
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	ee07 3a90 	vmov	s15, r3
 80065f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f8:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = (float)(temp/INV_SAMPLING_TIME/60)*11*30;
 80065fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006600:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006604:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006608:	eddf 6a14 	vldr	s13, [pc, #80]	; 800665c <dc1_RotateClockWise+0x8c>
 800660c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006610:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8006614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006618:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800661c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006620:	edc7 7a03 	vstr	s15, [r7, #12]

	g_wDespulse = roundf(temp);
 8006624:	ed97 0a03 	vldr	s0, [r7, #12]
 8006628:	f000 ff0c 	bl	8007444 <roundf>
 800662c:	eef0 7a40 	vmov.f32	s15, s0
 8006630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006634:	ee17 3a90 	vmov	r3, s15
 8006638:	b29a      	uxth	r2, r3
 800663a:	4b09      	ldr	r3, [pc, #36]	; (8006660 <dc1_RotateClockWise+0x90>)
 800663c:	801a      	strh	r2, [r3, #0]

	dc1_speed_PID(g_wDespulse);
 800663e:	4b08      	ldr	r3, [pc, #32]	; (8006660 <dc1_RotateClockWise+0x90>)
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff fdce 	bl	80061e4 <dc1_speed_PID>
	g_DirectionDc1 = DC_CLOCKWISE;
 8006648:	4b06      	ldr	r3, [pc, #24]	; (8006664 <dc1_RotateClockWise+0x94>)
 800664a:	2201      	movs	r2, #1
 800664c:	701a      	strb	r2, [r3, #0]
}
 800664e:	bf00      	nop
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	40020000 	.word	0x40020000
 800665c:	42700000 	.word	0x42700000
 8006660:	20000328 	.word	0x20000328
 8006664:	20000274 	.word	0x20000274

08006668 <dc1_Stop>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc1_Stop(void_t)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INT1_PORT, INT1_PIN, RESET);
 800666c:	2200      	movs	r2, #0
 800666e:	2101      	movs	r1, #1
 8006670:	4806      	ldr	r0, [pc, #24]	; (800668c <dc1_Stop+0x24>)
 8006672:	f7fb f92f 	bl	80018d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT2_PORT, INT2_PIN, RESET);
 8006676:	2200      	movs	r2, #0
 8006678:	2102      	movs	r1, #2
 800667a:	4804      	ldr	r0, [pc, #16]	; (800668c <dc1_Stop+0x24>)
 800667c:	f7fb f92a 	bl	80018d4 <HAL_GPIO_WritePin>

	g_DirectionDc1 = DC_STOP;
 8006680:	4b03      	ldr	r3, [pc, #12]	; (8006690 <dc1_Stop+0x28>)
 8006682:	2200      	movs	r2, #0
 8006684:	701a      	strb	r2, [r3, #0]
}
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40020000 	.word	0x40020000
 8006690:	20000274 	.word	0x20000274

08006694 <dc2_RotateClockWise>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc2_RotateClockWise(u16_t wRpm)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(INT3_PORT, INT3_PIN, RESET);
 800669e:	2200      	movs	r2, #0
 80066a0:	2110      	movs	r1, #16
 80066a2:	481e      	ldr	r0, [pc, #120]	; (800671c <dc2_RotateClockWise+0x88>)
 80066a4:	f7fb f916 	bl	80018d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT4_PORT, INT4_PIN, SET);
 80066a8:	2201      	movs	r2, #1
 80066aa:	2120      	movs	r1, #32
 80066ac:	481b      	ldr	r0, [pc, #108]	; (800671c <dc2_RotateClockWise+0x88>)
 80066ae:	f7fb f911 	bl	80018d4 <HAL_GPIO_WritePin>

	float temp = (float)(wRpm);
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	ee07 3a90 	vmov	s15, r3
 80066b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066bc:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = (float)(temp/INV_SAMPLING_TIME/60)*11*30;
 80066c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80066c4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80066c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066cc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006720 <dc2_RotateClockWise+0x8c>
 80066d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066d4:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80066d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066dc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80066e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066e4:	edc7 7a03 	vstr	s15, [r7, #12]

	g_wDespulse = roundf(temp);
 80066e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80066ec:	f000 feaa 	bl	8007444 <roundf>
 80066f0:	eef0 7a40 	vmov.f32	s15, s0
 80066f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066f8:	ee17 3a90 	vmov	r3, s15
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	4b09      	ldr	r3, [pc, #36]	; (8006724 <dc2_RotateClockWise+0x90>)
 8006700:	801a      	strh	r2, [r3, #0]

	dc2_speed_PID(g_wDespulse);
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <dc2_RotateClockWise+0x90>)
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fe00 	bl	800630c <dc2_speed_PID>
	g_DirectionDc2 = DC_CLOCKWISE;
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <dc2_RotateClockWise+0x94>)
 800670e:	2201      	movs	r2, #1
 8006710:	701a      	strb	r2, [r3, #0]
}
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	40020000 	.word	0x40020000
 8006720:	42700000 	.word	0x42700000
 8006724:	20000328 	.word	0x20000328
 8006728:	20000275 	.word	0x20000275

0800672c <dc2_Stop>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc2_Stop(void_t)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INT3_PORT, INT3_PIN, RESET);
 8006730:	2200      	movs	r2, #0
 8006732:	2110      	movs	r1, #16
 8006734:	4806      	ldr	r0, [pc, #24]	; (8006750 <dc2_Stop+0x24>)
 8006736:	f7fb f8cd 	bl	80018d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT4_PORT, INT4_PIN, RESET);
 800673a:	2200      	movs	r2, #0
 800673c:	2120      	movs	r1, #32
 800673e:	4804      	ldr	r0, [pc, #16]	; (8006750 <dc2_Stop+0x24>)
 8006740:	f7fb f8c8 	bl	80018d4 <HAL_GPIO_WritePin>

	g_DirectionDc2 = DC_STOP;
 8006744:	4b03      	ldr	r3, [pc, #12]	; (8006754 <dc2_Stop+0x28>)
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
}
 800674a:	bf00      	nop
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40020000 	.word	0x40020000
 8006754:	20000275 	.word	0x20000275

08006758 <robot_stop>:
  * @param 	[wSpeed]:	speed(cm/s)
  *
  * @return		-	None
  */
void robot_stop(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
	dc1_Stop();
 800675c:	f7ff ff84 	bl	8006668 <dc1_Stop>
	dc2_Stop();
 8006760:	f7ff ffe4 	bl	800672c <dc2_Stop>

	g_robotState = getRobotState();
 8006764:	f000 f81a 	bl	800679c <getRobotState>
 8006768:	4603      	mov	r3, r0
 800676a:	461a      	mov	r2, r3
 800676c:	4b01      	ldr	r3, [pc, #4]	; (8006774 <robot_stop+0x1c>)
 800676e:	701a      	strb	r2, [r3, #0]
}
 8006770:	bf00      	nop
 8006772:	bd80      	pop	{r7, pc}
 8006774:	2000032a 	.word	0x2000032a

08006778 <robot_rotateright>:
  * @param 		-	None
  *
  * @return		-	None
  */
void_t robot_rotateright(void_t)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
	dc1_RotateClockWise(200);
 800677c:	20c8      	movs	r0, #200	; 0xc8
 800677e:	f7ff ff27 	bl	80065d0 <dc1_RotateClockWise>
	dc2_RotateClockWise(200);
 8006782:	20c8      	movs	r0, #200	; 0xc8
 8006784:	f7ff ff86 	bl	8006694 <dc2_RotateClockWise>

	g_robotState = getRobotState();
 8006788:	f000 f808 	bl	800679c <getRobotState>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	4b01      	ldr	r3, [pc, #4]	; (8006798 <robot_rotateright+0x20>)
 8006792:	701a      	strb	r2, [r3, #0]
}
 8006794:	bf00      	nop
 8006796:	bd80      	pop	{r7, pc}
 8006798:	2000032a 	.word	0x2000032a

0800679c <getRobotState>:
  * @param 		-	None
  *
  * @return		-	RobotState
  */
RobotState getRobotState(void_t)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
	if(g_DirectionDc1 == DC_STOP && g_DirectionDc2 == DC_STOP)
 80067a0:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <getRobotState+0x74>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d105      	bne.n	80067b4 <getRobotState+0x18>
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <getRobotState+0x78>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <getRobotState+0x18>
	{
		return ROBOT_STOP;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e027      	b.n	8006804 <getRobotState+0x68>
	}
	else {
		if(g_DirectionDc1 == DC_CLOCKWISE && g_DirectionDc2 == DC_ANTICLOCKWISE)
 80067b4:	4b16      	ldr	r3, [pc, #88]	; (8006810 <getRobotState+0x74>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d105      	bne.n	80067c8 <getRobotState+0x2c>
 80067bc:	4b15      	ldr	r3, [pc, #84]	; (8006814 <getRobotState+0x78>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d101      	bne.n	80067c8 <getRobotState+0x2c>
		{
			return ROBOT_FORWARD;
 80067c4:	2302      	movs	r3, #2
 80067c6:	e01d      	b.n	8006804 <getRobotState+0x68>
		}
		else
		{
			if (g_DirectionDc1 == DC_ANTICLOCKWISE && g_DirectionDc2 == DC_CLOCKWISE)
 80067c8:	4b11      	ldr	r3, [pc, #68]	; (8006810 <getRobotState+0x74>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d105      	bne.n	80067dc <getRobotState+0x40>
 80067d0:	4b10      	ldr	r3, [pc, #64]	; (8006814 <getRobotState+0x78>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <getRobotState+0x40>
			{
				return ROBOT_BACKWARD;
 80067d8:	2303      	movs	r3, #3
 80067da:	e013      	b.n	8006804 <getRobotState+0x68>
			}
			else
			{
				if(g_DirectionDc1 == DC_ANTICLOCKWISE && g_DirectionDc2 == DC_ANTICLOCKWISE)
 80067dc:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <getRobotState+0x74>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d105      	bne.n	80067f0 <getRobotState+0x54>
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <getRobotState+0x78>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d101      	bne.n	80067f0 <getRobotState+0x54>
				{
					return ROBOT_ROTATE_LEFT;
 80067ec:	2304      	movs	r3, #4
 80067ee:	e009      	b.n	8006804 <getRobotState+0x68>
				}
				else
				{
					if(g_DirectionDc1 == DC_CLOCKWISE && g_DirectionDc2 == DC_CLOCKWISE)
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <getRobotState+0x74>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d105      	bne.n	8006804 <getRobotState+0x68>
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <getRobotState+0x78>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <getRobotState+0x68>
					{
						return ROBOT_ROTATE_RIGHT;
 8006800:	2305      	movs	r3, #5
 8006802:	e7ff      	b.n	8006804 <getRobotState+0x68>
					}
				}
			}
		}
	}
}
 8006804:	4618      	mov	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	20000274 	.word	0x20000274
 8006814:	20000275 	.word	0x20000275

08006818 <isRun_distance>:
  * @param 	-	None
  *
  * @return		-
  */
u8_t isRun_distance(void_t)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
	return g_run_distance;
 800681c:	4b03      	ldr	r3, [pc, #12]	; (800682c <isRun_distance+0x14>)
 800681e:	781b      	ldrb	r3, [r3, #0]
}
 8006820:	4618      	mov	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	20000344 	.word	0x20000344

08006830 <getDc1PulseCount>:
  * @param 	-	None
  *
  * @return		-	pulsecount
  */
u32_t getDc1PulseCount(void_t)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
	return g_dc1_pulse_count;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <getDc1PulseCount+0x14>)
 8006836:	681b      	ldr	r3, [r3, #0]
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000364 	.word	0x20000364

08006848 <getDc2PulseCount>:
  * @param 	-	None
  *
  * @return		-	pulsecount
  */
u32_t getDc2PulseCount(void_t)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
	return g_dc2_pulse_count;
 800684c:	4b03      	ldr	r3, [pc, #12]	; (800685c <getDc2PulseCount+0x14>)
 800684e:	681b      	ldr	r3, [r3, #0]
}
 8006850:	4618      	mov	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	20000334 	.word	0x20000334

08006860 <resetPulse_distance>:
  * @param 	-	None
  *
  * @return		-	None
  */
void_t resetPulse_distance(void_t)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
//	HAL_TIM_Base_Stop(&TIM_CHECK_ROBOT_STOP_UPDATE);
	g_dc1_pulse_count = 0;
 8006864:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <resetPulse_distance+0x34>)
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
	g_dc1_pulse = 0;
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <resetPulse_distance+0x38>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
	g_dc2_pulse_count = 0;
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <resetPulse_distance+0x3c>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
	g_dc2_pulse = 0;
 8006876:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <resetPulse_distance+0x40>)
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
	g_run_distance = 0;
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <resetPulse_distance+0x44>)
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
	g_rotate = 0;
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <resetPulse_distance+0x48>)
 8006884:	2200      	movs	r2, #0
 8006886:	701a      	strb	r2, [r3, #0]
}
 8006888:	bf00      	nop
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000364 	.word	0x20000364
 8006898:	20000338 	.word	0x20000338
 800689c:	20000334 	.word	0x20000334
 80068a0:	20000350 	.word	0x20000350
 80068a4:	20000344 	.word	0x20000344
 80068a8:	20000370 	.word	0x20000370

080068ac <getDc1Despulse>:
  * @param 	-	None
  *
  * @return		-	None
  */
u32_t getDc1Despulse(void_t)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
	return g_dc1_pulse;
 80068b0:	4b03      	ldr	r3, [pc, #12]	; (80068c0 <getDc1Despulse+0x14>)
 80068b2:	681b      	ldr	r3, [r3, #0]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20000338 	.word	0x20000338

080068c4 <getDc2Despulse>:
  * @param 	-	None
  *
  * @return		-	None
  */
u32_t getDc2Despulse(void_t)
{
 80068c4:	b480      	push	{r7}
 80068c6:	af00      	add	r7, sp, #0
	return g_dc2_pulse;
 80068c8:	4b03      	ldr	r3, [pc, #12]	; (80068d8 <getDc2Despulse+0x14>)
 80068ca:	681b      	ldr	r3, [r3, #0]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	20000350 	.word	0x20000350

080068dc <isRobotRotate>:
  * @param 	-	None
  *
  * @return		-	None
  */
u8_t isRobotRotate(void_t)
{
 80068dc:	b480      	push	{r7}
 80068de:	af00      	add	r7, sp, #0
	return g_rotate;
 80068e0:	4b03      	ldr	r3, [pc, #12]	; (80068f0 <isRobotRotate+0x14>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20000370 	.word	0x20000370

080068f4 <robot_rotateright_angle>:
  * @param [angle]	:	angle want to obtain
  *
  * @return		-	None
  */
void_t robot_rotateright_angle(float angle)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	ed87 0a01 	vstr	s0, [r7, #4]
	resetPulse_distance();
 80068fe:	f7ff ffaf 	bl	8006860 <resetPulse_distance>

	g_des_angle = g_current_angle + angle;
 8006902:	4b13      	ldr	r3, [pc, #76]	; (8006950 <robot_rotateright_angle+0x5c>)
 8006904:	ed93 7a00 	vldr	s14, [r3]
 8006908:	edd7 7a01 	vldr	s15, [r7, #4]
 800690c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006910:	4b10      	ldr	r3, [pc, #64]	; (8006954 <robot_rotateright_angle+0x60>)
 8006912:	edc3 7a00 	vstr	s15, [r3]

	if(g_des_angle > 180.0)
 8006916:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <robot_rotateright_angle+0x60>)
 8006918:	edd3 7a00 	vldr	s15, [r3]
 800691c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006958 <robot_rotateright_angle+0x64>
 8006920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006928:	dd09      	ble.n	800693e <robot_rotateright_angle+0x4a>
	{
		g_des_angle = g_des_angle - 360.0;
 800692a:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <robot_rotateright_angle+0x60>)
 800692c:	edd3 7a00 	vldr	s15, [r3]
 8006930:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800695c <robot_rotateright_angle+0x68>
 8006934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <robot_rotateright_angle+0x60>)
 800693a:	edc3 7a00 	vstr	s15, [r3]
	}

	g_rotate = 1;
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <robot_rotateright_angle+0x6c>)
 8006940:	2201      	movs	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
	robot_rotateright();
 8006944:	f7ff ff18 	bl	8006778 <robot_rotateright>
//	HAL_TIM_Base_Start_IT(&TIM_CHECK_ROBOT_STOP_UPDATE);
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20000374 	.word	0x20000374
 8006954:	2000036c 	.word	0x2000036c
 8006958:	43340000 	.word	0x43340000
 800695c:	43b40000 	.word	0x43b40000
 8006960:	20000370 	.word	0x20000370

08006964 <robot_get_current_angle>:
  * @param -	None
  *
  * @return		-	current angle
  */
float robot_get_current_angle(void_t)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
	return g_current_angle;
 8006968:	4b04      	ldr	r3, [pc, #16]	; (800697c <robot_get_current_angle+0x18>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	ee07 3a90 	vmov	s15, r3
}
 8006970:	eeb0 0a67 	vmov.f32	s0, s15
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20000374 	.word	0x20000374

08006980 <robot_get_des_angle>:
  * @param -	None
  *
  * @return		-	destination angle
  */
float robot_get_des_angle(void_t)
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
	return g_des_angle;
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <robot_get_des_angle+0x18>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	ee07 3a90 	vmov	s15, r3
}
 800698c:	eeb0 0a67 	vmov.f32	s0, s15
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	2000036c 	.word	0x2000036c

0800699c <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80069a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80069aa:	f000 fc6f 	bl	800728c <atanf>
 80069ae:	eef0 7a40 	vmov.f32	s15, s0
 80069b2:	eeb0 0a67 	vmov.f32	s0, s15
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80069c6:	edc7 0a00 	vstr	s1, [r7]
 80069ca:	edd7 0a00 	vldr	s1, [r7]
 80069ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80069d2:	f000 fd5d 	bl	8007490 <atan2f>
 80069d6:	eef0 7a40 	vmov.f32	s15, s0
 80069da:	eeb0 0a67 	vmov.f32	s0, s15
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80069ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80069f2:	f000 fd4f 	bl	8007494 <sqrtf>
 80069f6:	eef0 7a40 	vmov.f32	s15, s0
 80069fa:	eeb0 0a67 	vmov.f32	s0, s15
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <_ZN10QuaternionC1Ev>:
        float w;
        float x;
        float y;
        float z;
        
        Quaternion() {
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
            w = 1.0f;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006a12:	601a      	str	r2, [r3, #0]
            x = 0.0f;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	605a      	str	r2, [r3, #4]
            y = 0.0f;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f04f 0200 	mov.w	r2, #0
 8006a22:	609a      	str	r2, [r3, #8]
            z = 0.0f;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f04f 0200 	mov.w	r2, #0
 8006a2a:	60da      	str	r2, [r3, #12]
        }
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <_ZN11VectorInt16C1Ev>:
    public:
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
            x = 0;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	801a      	strh	r2, [r3, #0]
            y = 0;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	805a      	strh	r2, [r3, #2]
            z = 0;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	809a      	strh	r2, [r3, #4]
        }
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4618      	mov	r0, r3
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <_ZN11VectorFloatC1Ev>:
    public:
        float x;
        float y;
        float z;

        VectorFloat() {
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
            x = 0;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
            y = 0;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	605a      	str	r2, [r3, #4]
            z = 0;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	609a      	str	r2, [r3, #8]
        }
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <_ZN7MPU605016dmpGetQuaternionEPsPKh>:
    data[1] = ((packet[4] << 24) + (packet[5] << 16) + (packet[6] << 8) + packet[7]);
    data[2] = ((packet[8] << 24) + (packet[9] << 16) + (packet[10] << 8) + packet[11]);
    data[3] = ((packet[12] << 24) + (packet[13] << 16) + (packet[14] << 8) + packet[15]);
    return 0;
}
uint8_t MPU6050::dmpGetQuaternion(int16_t *data, const uint8_t* packet) {
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    if (packet == 0) packet = dmpPacketBuffer;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <_ZN7MPU605016dmpGetQuaternionEPsPKh+0x18>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	607b      	str	r3, [r7, #4]
    data[0] = ((packet[0] << 8) + packet[1]);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	b21a      	sxth	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	801a      	strh	r2, [r3, #0]
    data[1] = ((packet[4] << 8) + packet[5]);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3305      	adds	r3, #5
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	3302      	adds	r3, #2
 8006ae0:	b212      	sxth	r2, r2
 8006ae2:	801a      	strh	r2, [r3, #0]
    data[2] = ((packet[8] << 8) + packet[9]);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	021b      	lsls	r3, r3, #8
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3309      	adds	r3, #9
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	4413      	add	r3, r2
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	3304      	adds	r3, #4
 8006b00:	b212      	sxth	r2, r2
 8006b02:	801a      	strh	r2, [r3, #0]
    data[3] = ((packet[12] << 8) + packet[13]);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	330c      	adds	r3, #12
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	330d      	adds	r3, #13
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4413      	add	r3, r2
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	3306      	adds	r3, #6
 8006b20:	b212      	sxth	r2, r2
 8006b22:	801a      	strh	r2, [r3, #0]
    return 0;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
	...

08006b34 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>:
uint8_t MPU6050::dmpGetQuaternion(Quaternion *q, const uint8_t* packet) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
    // TODO: accommodate different arrangements of sent data (ONLY default supported now)
    int16_t qI[4];
    uint8_t status = dmpGetQuaternion(qI, packet);
 8006b40:	f107 0314 	add.w	r3, r7, #20
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4619      	mov	r1, r3
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7ff ffa1 	bl	8006a90 <_ZN7MPU605016dmpGetQuaternionEPsPKh>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	77fb      	strb	r3, [r7, #31]
    if (status == 0) {
 8006b52:	7ffb      	ldrb	r3, [r7, #31]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d135      	bne.n	8006bc4 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x90>
        q -> w = (float)qI[0] / 16384.0f;
 8006b58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b64:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8006bd0 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8006b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	edc3 7a00 	vstr	s15, [r3]
        q -> x = (float)qI[1] / 16384.0f;
 8006b72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b7e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006bd0 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8006b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	edc3 7a01 	vstr	s15, [r3, #4]
        q -> y = (float)qI[2] / 16384.0f;
 8006b8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006b90:	ee07 3a90 	vmov	s15, r3
 8006b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b98:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8006bd0 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8006b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	edc3 7a02 	vstr	s15, [r3, #8]
        q -> z = (float)qI[3] / 16384.0f;
 8006ba6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006baa:	ee07 3a90 	vmov	s15, r3
 8006bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bb2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006bd0 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x9c>
 8006bb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	edc3 7a03 	vstr	s15, [r3, #12]
        return 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh+0x92>
    }
    return status; // int16 return value, indicates error if this line is reached
 8006bc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	46800000 	.word	0x46800000

08006bd4 <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>:
// uint8_t MPU6050::dmpGetGyroAndAccelSensor(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetGyroSensor(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetControlData(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetTemperature(long *data, const uint8_t* packet);
// uint8_t MPU6050::dmpGetGravity(long *data, const uint8_t* packet);
uint8_t MPU6050::dmpGetGravity(VectorFloat *v, Quaternion *q) {
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	ed93 7a01 	vldr	s14, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	edd3 6a00 	vldr	s13, [r3]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	edd3 7a02 	vldr	s15, [r3, #8]
 8006bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	edc3 7a00 	vstr	s15, [r3]
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	ed93 7a00 	vldr	s14, [r3]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	edc3 7a01 	vstr	s15, [r3, #4]
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	ed93 7a00 	vldr	s14, [r3]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	edd3 7a00 	vldr	s15, [r3]
 8006c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	edd3 6a01 	vldr	s13, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	edd3 6a03 	vldr	s13, [r3, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	edc3 7a02 	vstr	s15, [r3, #8]
    return 0;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>:
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);   // psi
    data[1] = -asin(2*q -> x*q -> z + 2*q -> w*q -> y);                              // theta
    data[2] = atan2(2*q -> y*q -> z - 2*q -> w*q -> x, 2*q -> w*q -> w + 2*q -> z*q -> z - 1);   // phi
    return 0;
}
uint8_t MPU6050::dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	ed2d 8b02 	vpush	{d8}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
    // yaw: (about Z axis)
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cb4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	edd3 7a02 	vldr	s15, [r3, #8]
 8006cbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	edd3 7a00 	vldr	s15, [r3]
 8006cc8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	edd3 7a03 	vldr	s15, [r3, #12]
 8006cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cd6:	ee37 6a67 	vsub.f32	s12, s14, s15
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	edd3 7a00 	vldr	s15, [r3]
 8006ce0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	edd3 7a00 	vldr	s15, [r3]
 8006cea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cf4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8006cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d0e:	eef0 0a67 	vmov.f32	s1, s15
 8006d12:	eeb0 0a46 	vmov.f32	s0, s12
 8006d16:	f7ff fe51 	bl	80069bc <_ZSt5atan2ff>
 8006d1a:	eef0 7a40 	vmov.f32	s15, s0
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	edc3 7a00 	vstr	s15, [r3]
    // pitch: (nose up/down, about Y axis)
    data[1] = atan(gravity -> x / sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	ed93 8a00 	vldr	s16, [r3]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d52:	f7ff fe47 	bl	80069e4 <_ZSt4sqrtf>
 8006d56:	eeb0 7a40 	vmov.f32	s14, s0
 8006d5a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	1d1c      	adds	r4, r3, #4
 8006d62:	eeb0 0a67 	vmov.f32	s0, s15
 8006d66:	f7ff fe19 	bl	800699c <_ZSt4atanf>
 8006d6a:	eef0 7a40 	vmov.f32	s15, s0
 8006d6e:	edc4 7a00 	vstr	s15, [r4]
    // roll: (tilt left/right, about X axis)
    data[2] = atan(gravity -> y / sqrt(gravity -> x*gravity -> x + gravity -> z*gravity -> z));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	ed93 8a01 	vldr	s16, [r3, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	ed93 7a00 	vldr	s14, [r3]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	edd3 7a00 	vldr	s15, [r3]
 8006d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8006da0:	f7ff fe20 	bl	80069e4 <_ZSt4sqrtf>
 8006da4:	eeb0 7a40 	vmov.f32	s14, s0
 8006da8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f103 0408 	add.w	r4, r3, #8
 8006db2:	eeb0 0a67 	vmov.f32	s0, s15
 8006db6:	f7ff fdf1 	bl	800699c <_ZSt4atanf>
 8006dba:	eef0 7a40 	vmov.f32	s15, s0
 8006dbe:	edc4 7a00 	vstr	s15, [r4]
    return 0;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	ecbd 8b02 	vpop	{d8}
 8006dce:	bd90      	pop	{r4, r7, pc}

08006dd0 <_Z16MPU_dmpDataReadyv>:
*
* @param 		-		None
*
* @return		-	 	None
*/
void_t MPU_dmpDataReady(void_t) {
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
	g_boMpuInterrupt = TRUE;
 8006dd4:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <_Z16MPU_dmpDataReadyv+0x14>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	701a      	strb	r2, [r3, #0]
}
 8006dda:	bf00      	nop
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	2000030c 	.word	0x2000030c

08006de8 <_ZL7readDMPv>:
* @param 		-		None
*
* @return		-	 	None
*/
static u8_t readDMP(void_t)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
	// if programming failed, don't try to do anything
	  if (!g_boDmpReady) return READ_MPU_DMP_FAIL;
 8006dec:	4b32      	ldr	r3, [pc, #200]	; (8006eb8 <_ZL7readDMPv+0xd0>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <_ZL7readDMPv+0x10>
 8006df4:	2303      	movs	r3, #3
 8006df6:	e05c      	b.n	8006eb2 <_ZL7readDMPv+0xca>

	  // wait for MPU interrupt or extra packet(s) available
	  while (!g_boMpuInterrupt && g_wFifoCount < g_wPacketSize) {
 8006df8:	4b30      	ldr	r3, [pc, #192]	; (8006ebc <_ZL7readDMPv+0xd4>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d107      	bne.n	8006e12 <_ZL7readDMPv+0x2a>
 8006e02:	4b2f      	ldr	r3, [pc, #188]	; (8006ec0 <_ZL7readDMPv+0xd8>)
 8006e04:	881a      	ldrh	r2, [r3, #0]
 8006e06:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <_ZL7readDMPv+0xdc>)
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d201      	bcs.n	8006e12 <_ZL7readDMPv+0x2a>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <_ZL7readDMPv+0x2c>
 8006e12:	2300      	movs	r3, #0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d000      	beq.n	8006e1a <_ZL7readDMPv+0x32>
 8006e18:	e7ee      	b.n	8006df8 <_ZL7readDMPv+0x10>
		  // .
		  // .
	  }

	  // reset interrupt flag and get INT_STATUS byte
	  g_boMpuInterrupt = false;
 8006e1a:	4b28      	ldr	r3, [pc, #160]	; (8006ebc <_ZL7readDMPv+0xd4>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	701a      	strb	r2, [r3, #0]
	  g_byMpuIntStatus = g_mpu.getIntStatus();
 8006e20:	4829      	ldr	r0, [pc, #164]	; (8006ec8 <_ZL7readDMPv+0xe0>)
 8006e22:	f000 f9e1 	bl	80071e8 <_ZN7MPU605012getIntStatusEv>
 8006e26:	4603      	mov	r3, r0
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4b28      	ldr	r3, [pc, #160]	; (8006ecc <_ZL7readDMPv+0xe4>)
 8006e2c:	701a      	strb	r2, [r3, #0]

	  // get current FIFO count
	  g_wFifoCount = g_mpu.getFIFOCount();
 8006e2e:	4826      	ldr	r0, [pc, #152]	; (8006ec8 <_ZL7readDMPv+0xe0>)
 8006e30:	f000 f9fb 	bl	800722a <_ZN7MPU605012getFIFOCountEv>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <_ZL7readDMPv+0xd8>)
 8006e3a:	801a      	strh	r2, [r3, #0]

	  // check for overflow (this should never happen unless our code is too inefficient)
	  if ((g_byMpuIntStatus & 0x10) || g_wFifoCount == 1024) {
 8006e3c:	4b23      	ldr	r3, [pc, #140]	; (8006ecc <_ZL7readDMPv+0xe4>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d104      	bne.n	8006e52 <_ZL7readDMPv+0x6a>
 8006e48:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <_ZL7readDMPv+0xd8>)
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e50:	d103      	bne.n	8006e5a <_ZL7readDMPv+0x72>
		  // reset so we can continue cleanly
		  g_mpu.resetFIFO();
 8006e52:	481d      	ldr	r0, [pc, #116]	; (8006ec8 <_ZL7readDMPv+0xe0>)
 8006e54:	f000 f9da 	bl	800720c <_ZN7MPU60509resetFIFOEv>
	  }
	  else
	  {
		  return READ_MPU_I2C_LOST;
	  }
}
 8006e58:	e02b      	b.n	8006eb2 <_ZL7readDMPv+0xca>
	  } else if (g_byMpuIntStatus & 0x02) {
 8006e5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ecc <_ZL7readDMPv+0xe4>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d024      	beq.n	8006eb0 <_ZL7readDMPv+0xc8>
		  while (g_wFifoCount < g_wPacketSize) g_wFifoCount = g_mpu.getFIFOCount();
 8006e66:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <_ZL7readDMPv+0xd8>)
 8006e68:	881a      	ldrh	r2, [r3, #0]
 8006e6a:	4b16      	ldr	r3, [pc, #88]	; (8006ec4 <_ZL7readDMPv+0xdc>)
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d207      	bcs.n	8006e82 <_ZL7readDMPv+0x9a>
 8006e72:	4815      	ldr	r0, [pc, #84]	; (8006ec8 <_ZL7readDMPv+0xe0>)
 8006e74:	f000 f9d9 	bl	800722a <_ZN7MPU605012getFIFOCountEv>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <_ZL7readDMPv+0xd8>)
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e7f1      	b.n	8006e66 <_ZL7readDMPv+0x7e>
		  g_mpu.getFIFOBytes(g_byFifoBuffer, g_wPacketSize);
 8006e82:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <_ZL7readDMPv+0xdc>)
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4911      	ldr	r1, [pc, #68]	; (8006ed0 <_ZL7readDMPv+0xe8>)
 8006e8c:	480e      	ldr	r0, [pc, #56]	; (8006ec8 <_ZL7readDMPv+0xe0>)
 8006e8e:	f000 f9e8 	bl	8007262 <_ZN7MPU605012getFIFOBytesEPhh>
		  g_wFifoCount -= g_wPacketSize;
 8006e92:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <_ZL7readDMPv+0xd8>)
 8006e94:	881a      	ldrh	r2, [r3, #0]
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <_ZL7readDMPv+0xdc>)
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	4b08      	ldr	r3, [pc, #32]	; (8006ec0 <_ZL7readDMPv+0xd8>)
 8006ea0:	801a      	strh	r2, [r3, #0]
			  g_mpu.dmpGetQuaternion(&g_q, g_byFifoBuffer);
 8006ea2:	4a0b      	ldr	r2, [pc, #44]	; (8006ed0 <_ZL7readDMPv+0xe8>)
 8006ea4:	490b      	ldr	r1, [pc, #44]	; (8006ed4 <_ZL7readDMPv+0xec>)
 8006ea6:	4808      	ldr	r0, [pc, #32]	; (8006ec8 <_ZL7readDMPv+0xe0>)
 8006ea8:	f7ff fe44 	bl	8006b34 <_ZN7MPU605016dmpGetQuaternionEP10QuaternionPKh>
		  return READ_MPU_SUCCESS;
 8006eac:	2300      	movs	r3, #0
 8006eae:	e000      	b.n	8006eb2 <_ZL7readDMPv+0xca>
		  return READ_MPU_I2C_LOST;
 8006eb0:	2302      	movs	r3, #2
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	20000276 	.word	0x20000276
 8006ebc:	2000030c 	.word	0x2000030c
 8006ec0:	2000027a 	.word	0x2000027a
 8006ec4:	20000278 	.word	0x20000278
 8006ec8:	200002f4 	.word	0x200002f4
 8006ecc:	2000030d 	.word	0x2000030d
 8006ed0:	2000027c 	.word	0x2000027c
 8006ed4:	200002bc 	.word	0x200002bc

08006ed8 <_Z19MPU_GetYawPitchRollR10YPRAngle_t>:
 *
 * @param 	[&y]		:		return result
 *
 * @return	[status]	:		status
 */
u8_t MPU_GetYawPitchRoll(YPRAngle_t &y){
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	u8_t status = readDMP();
 8006ee0:	f7ff ff82 	bl	8006de8 <_ZL7readDMPv>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]
	g_mpu.dmpGetGravity(&g_gravity, &g_q);
 8006ee8:	4a2f      	ldr	r2, [pc, #188]	; (8006fa8 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xd0>)
 8006eea:	4930      	ldr	r1, [pc, #192]	; (8006fac <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xd4>)
 8006eec:	4830      	ldr	r0, [pc, #192]	; (8006fb0 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xd8>)
 8006eee:	f7ff fe71 	bl	8006bd4 <_ZN7MPU605013dmpGetGravityEP11VectorFloatP10Quaternion>
	g_mpu.dmpGetYawPitchRoll(g_ypr, &g_q, &g_gravity);
 8006ef2:	4b2e      	ldr	r3, [pc, #184]	; (8006fac <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xd4>)
 8006ef4:	4a2c      	ldr	r2, [pc, #176]	; (8006fa8 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xd0>)
 8006ef6:	492f      	ldr	r1, [pc, #188]	; (8006fb4 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xdc>)
 8006ef8:	482d      	ldr	r0, [pc, #180]	; (8006fb0 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xd8>)
 8006efa:	f7ff fecf 	bl	8006c9c <_ZN7MPU605018dmpGetYawPitchRollEPfP10QuaternionP11VectorFloat>

	y.yaw = g_ypr[0]*180/M_PI;
 8006efe:	4b2d      	ldr	r3, [pc, #180]	; (8006fb4 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xdc>)
 8006f00:	edd3 7a00 	vldr	s15, [r3]
 8006f04:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006fb8 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xe0>
 8006f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f0c:	ee17 0a90 	vmov	r0, s15
 8006f10:	f7f9 fabe 	bl	8000490 <__aeabi_f2d>
 8006f14:	a322      	add	r3, pc, #136	; (adr r3, 8006fa0 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xc8>)
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f7f9 fc3b 	bl	8000794 <__aeabi_ddiv>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4610      	mov	r0, r2
 8006f24:	4619      	mov	r1, r3
 8006f26:	f7f9 fd1d 	bl	8000964 <__aeabi_d2f>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	601a      	str	r2, [r3, #0]
	y.pitch = g_ypr[1]*180/M_PI;
 8006f30:	4b20      	ldr	r3, [pc, #128]	; (8006fb4 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xdc>)
 8006f32:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f36:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8006fb8 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xe0>
 8006f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f3e:	ee17 0a90 	vmov	r0, s15
 8006f42:	f7f9 faa5 	bl	8000490 <__aeabi_f2d>
 8006f46:	a316      	add	r3, pc, #88	; (adr r3, 8006fa0 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xc8>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 fc22 	bl	8000794 <__aeabi_ddiv>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4610      	mov	r0, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	f7f9 fd04 	bl	8000964 <__aeabi_d2f>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	605a      	str	r2, [r3, #4]
	y.roll = g_ypr[2]*180/M_PI;
 8006f62:	4b14      	ldr	r3, [pc, #80]	; (8006fb4 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xdc>)
 8006f64:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f68:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8006fb8 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xe0>
 8006f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f70:	ee17 0a90 	vmov	r0, s15
 8006f74:	f7f9 fa8c 	bl	8000490 <__aeabi_f2d>
 8006f78:	a309      	add	r3, pc, #36	; (adr r3, 8006fa0 <_Z19MPU_GetYawPitchRollR10YPRAngle_t+0xc8>)
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f7f9 fc09 	bl	8000794 <__aeabi_ddiv>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f7f9 fceb 	bl	8000964 <__aeabi_d2f>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	609a      	str	r2, [r3, #8]

	return status;
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	54442d18 	.word	0x54442d18
 8006fa4:	400921fb 	.word	0x400921fb
 8006fa8:	200002bc 	.word	0x200002bc
 8006fac:	200002dc 	.word	0x200002dc
 8006fb0:	200002f4 	.word	0x200002f4
 8006fb4:	200002e8 	.word	0x200002e8
 8006fb8:	43340000 	.word	0x43340000

08006fbc <_Z41__static_initialization_and_destruction_0ii>:
	}
	if(g_iwState == 2)
	{
		meansensors();
	}
}
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d113      	bne.n	8006ff4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d10e      	bne.n	8006ff4 <_Z41__static_initialization_and_destruction_0ii+0x38>
Quaternion g_q;           // [w, x, y, z]         quaternion container
 8006fd6:	4809      	ldr	r0, [pc, #36]	; (8006ffc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006fd8:	f7ff fd14 	bl	8006a04 <_ZN10QuaternionC1Ev>
VectorInt16 g_Aa;         // [x, y, z]            accel sensor measurements
 8006fdc:	4808      	ldr	r0, [pc, #32]	; (8007000 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8006fde:	f7ff fd2c 	bl	8006a3a <_ZN11VectorInt16C1Ev>
VectorInt16 g_AaReal;     // [x, y, z]            gravity-free accel sensor measurements
 8006fe2:	4808      	ldr	r0, [pc, #32]	; (8007004 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006fe4:	f7ff fd29 	bl	8006a3a <_ZN11VectorInt16C1Ev>
VectorFloat g_gravity;    // [x, y, z]            gravity vector
 8006fe8:	4807      	ldr	r0, [pc, #28]	; (8007008 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006fea:	f7ff fd3a 	bl	8006a62 <_ZN11VectorFloatC1Ev>
MPU6050 g_mpu;
 8006fee:	4807      	ldr	r0, [pc, #28]	; (800700c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8006ff0:	f000 f8ec 	bl	80071cc <_ZN7MPU6050C1Ev>
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	200002bc 	.word	0x200002bc
 8007000:	200002cc 	.word	0x200002cc
 8007004:	200002d4 	.word	0x200002d4
 8007008:	200002dc 	.word	0x200002dc
 800700c:	200002f4 	.word	0x200002f4

08007010 <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
 8007014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007018:	2001      	movs	r0, #1
 800701a:	f7ff ffcf 	bl	8006fbc <_Z41__static_initialization_and_destruction_0ii>
 800701e:	bd80      	pop	{r7, pc}

08007020 <_Z15I2Cdev_readBytehhPht>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af02      	add	r7, sp, #8
 8007026:	603a      	str	r2, [r7, #0]
 8007028:	461a      	mov	r2, r3
 800702a:	4603      	mov	r3, r0
 800702c:	71fb      	strb	r3, [r7, #7]
 800702e:	460b      	mov	r3, r1
 8007030:	71bb      	strb	r3, [r7, #6]
 8007032:	4613      	mov	r3, r2
 8007034:	80bb      	strh	r3, [r7, #4]
	 return I2Cdev_readBytes(devAddr, regAddr, 1, data, timeout);
 8007036:	79b9      	ldrb	r1, [r7, #6]
 8007038:	79f8      	ldrb	r0, [r7, #7]
 800703a:	88bb      	ldrh	r3, [r7, #4]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2201      	movs	r2, #1
 8007042:	f000 f805 	bl	8007050 <_Z16I2Cdev_readByteshhhPht>
 8007046:	4603      	mov	r3, r0
}
 8007048:	4618      	mov	r0, r3
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <_Z16I2Cdev_readByteshhhPht>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af02      	add	r7, sp, #8
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	4603      	mov	r3, r0
 800705a:	71fb      	strb	r3, [r7, #7]
 800705c:	460b      	mov	r3, r1
 800705e:	71bb      	strb	r3, [r7, #6]
 8007060:	4613      	mov	r3, r2
 8007062:	717b      	strb	r3, [r7, #5]
	  uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 8007064:	8b3b      	ldrh	r3, [r7, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <_Z16I2Cdev_readByteshhhPht+0x1e>
 800706a:	8b3b      	ldrh	r3, [r7, #24]
 800706c:	e001      	b.n	8007072 <_Z16I2Cdev_readByteshhhPht+0x22>
 800706e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007072:	81fb      	strh	r3, [r7, #14]

	  HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 8007074:	4b14      	ldr	r3, [pc, #80]	; (80070c8 <_Z16I2Cdev_readByteshhhPht+0x78>)
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	b29b      	uxth	r3, r3
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	b299      	uxth	r1, r3
 8007080:	89fb      	ldrh	r3, [r7, #14]
 8007082:	1dba      	adds	r2, r7, #6
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	2301      	movs	r3, #1
 8007088:	f7fa fd9a 	bl	8001bc0 <HAL_I2C_Master_Transmit>
	  if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 800708c:	4b0e      	ldr	r3, [pc, #56]	; (80070c8 <_Z16I2Cdev_readByteshhhPht+0x78>)
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	79fb      	ldrb	r3, [r7, #7]
 8007092:	b29b      	uxth	r3, r3
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	b299      	uxth	r1, r3
 8007098:	797b      	ldrb	r3, [r7, #5]
 800709a:	b29a      	uxth	r2, r3
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	4613      	mov	r3, r2
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	f7fa fe8a 	bl	8001dbc <HAL_I2C_Master_Receive>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bf0c      	ite	eq
 80070ae:	2301      	moveq	r3, #1
 80070b0:	2300      	movne	r3, #0
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <_Z16I2Cdev_readByteshhhPht+0x6c>
 80070b8:	797b      	ldrb	r3, [r7, #5]
 80070ba:	e000      	b.n	80070be <_Z16I2Cdev_readByteshhhPht+0x6e>
	  return -1;
 80070bc:	23ff      	movs	r3, #255	; 0xff
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000310 	.word	0x20000310

080070cc <_Z15I2Cdev_writeBithhhh>:
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data)
{
 80070cc:	b590      	push	{r4, r7, lr}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4604      	mov	r4, r0
 80070d4:	4608      	mov	r0, r1
 80070d6:	4611      	mov	r1, r2
 80070d8:	461a      	mov	r2, r3
 80070da:	4623      	mov	r3, r4
 80070dc:	71fb      	strb	r3, [r7, #7]
 80070de:	4603      	mov	r3, r0
 80070e0:	71bb      	strb	r3, [r7, #6]
 80070e2:	460b      	mov	r3, r1
 80070e4:	717b      	strb	r3, [r7, #5]
 80070e6:	4613      	mov	r3, r2
 80070e8:	713b      	strb	r3, [r7, #4]
	//first reading registery value
	uint8_t b;
	I2Cdev_readByte(devAddr, regAddr, &b, I2Cdev_readTimeout);
 80070ea:	4b17      	ldr	r3, [pc, #92]	; (8007148 <_Z15I2Cdev_writeBithhhh+0x7c>)
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	f107 020f 	add.w	r2, r7, #15
 80070f2:	79b9      	ldrb	r1, [r7, #6]
 80070f4:	79f8      	ldrb	r0, [r7, #7]
 80070f6:	f7ff ff93 	bl	8007020 <_Z15I2Cdev_readBytehhPht>
	b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80070fa:	793b      	ldrb	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <_Z15I2Cdev_writeBithhhh+0x4a>
 8007100:	797b      	ldrb	r3, [r7, #5]
 8007102:	2201      	movs	r2, #1
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	b25a      	sxtb	r2, r3
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	b25b      	sxtb	r3, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	b25b      	sxtb	r3, r3
 8007112:	b2db      	uxtb	r3, r3
 8007114:	e00b      	b.n	800712e <_Z15I2Cdev_writeBithhhh+0x62>
 8007116:	797b      	ldrb	r3, [r7, #5]
 8007118:	2201      	movs	r2, #1
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	b25b      	sxtb	r3, r3
 8007120:	43db      	mvns	r3, r3
 8007122:	b25a      	sxtb	r2, r3
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	b25b      	sxtb	r3, r3
 8007128:	4013      	ands	r3, r2
 800712a:	b25b      	sxtb	r3, r3
 800712c:	b2db      	uxtb	r3, r3
 800712e:	73fb      	strb	r3, [r7, #15]
	return I2Cdev_writeByte(devAddr, regAddr, b);
 8007130:	7bfa      	ldrb	r2, [r7, #15]
 8007132:	79b9      	ldrb	r1, [r7, #6]
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 f808 	bl	800714c <_Z16I2Cdev_writeBytehhh>
 800713c:	4603      	mov	r3, r0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	bd90      	pop	{r4, r7, pc}
 8007146:	bf00      	nop
 8007148:	2000000c 	.word	0x2000000c

0800714c <_Z16I2Cdev_writeBytehhh>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	71fb      	strb	r3, [r7, #7]
 8007156:	460b      	mov	r3, r1
 8007158:	71bb      	strb	r3, [r7, #6]
 800715a:	4613      	mov	r3, r2
 800715c:	717b      	strb	r3, [r7, #5]
	return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 800715e:	1d7b      	adds	r3, r7, #5
 8007160:	79b9      	ldrb	r1, [r7, #6]
 8007162:	79f8      	ldrb	r0, [r7, #7]
 8007164:	2201      	movs	r2, #1
 8007166:	f000 f805 	bl	8007174 <_Z17I2Cdev_writeByteshhhPh>
 800716a:	4603      	mov	r3, r0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <_Z17I2Cdev_writeByteshhhPh>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* pData)
{
 8007174:	b590      	push	{r4, r7, lr}
 8007176:	b089      	sub	sp, #36	; 0x24
 8007178:	af04      	add	r7, sp, #16
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	4603      	mov	r3, r0
 800717e:	71fb      	strb	r3, [r7, #7]
 8007180:	460b      	mov	r3, r1
 8007182:	71bb      	strb	r3, [r7, #6]
 8007184:	4613      	mov	r3, r2
 8007186:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(I2Cdev_hi2c, devAddr << 1, regAddr, I2C_MEMADD_SIZE_8BIT, pData, length, 1000);
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <_Z17I2Cdev_writeByteshhhPh+0x54>)
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	b29b      	uxth	r3, r3
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	b299      	uxth	r1, r3
 8007194:	79bb      	ldrb	r3, [r7, #6]
 8007196:	b29a      	uxth	r2, r3
 8007198:	797b      	ldrb	r3, [r7, #5]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80071a0:	9402      	str	r4, [sp, #8]
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2301      	movs	r3, #1
 80071aa:	f7fb f82d 	bl	8002208 <HAL_I2C_Mem_Write>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
	return status == HAL_OK;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bf0c      	ite	eq
 80071b8:	2301      	moveq	r3, #1
 80071ba:	2300      	movne	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	b29b      	uxth	r3, r3
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd90      	pop	{r4, r7, pc}
 80071c8:	20000310 	.word	0x20000310

080071cc <_ZN7MPU6050C1Ev>:
#include "../MPU6050/MPU6050.h"

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2268      	movs	r2, #104	; 0x68
 80071d8:	719a      	strb	r2, [r3, #6]
}
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <_ZN7MPU605012getIntStatusEv>:
 * for getting multiple INT statuses, since each single bit read clears
 * all of them because it has to read the whole byte.
 * @return Current interrupt status
 * @see MPU6050_RA_INT_STATUS
 */
uint8_t MPU6050::getIntStatus() {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
    I2Cdev_readByte(devAddr, MPU6050_RA_INT_STATUS, buffer, 0);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7998      	ldrb	r0, [r3, #6]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	1dda      	adds	r2, r3, #7
 80071f8:	2300      	movs	r3, #0
 80071fa:	213a      	movs	r1, #58	; 0x3a
 80071fc:	f7ff ff10 	bl	8007020 <_Z15I2Cdev_readBytehhPht>
    return buffer[0];
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	79db      	ldrb	r3, [r3, #7]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <_ZN7MPU60509resetFIFOEv>:
 * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This
 * bit automatically clears to 0 after the reset has been triggered.
 * @see MPU6050_RA_USER_CTRL
 * @see MPU6050_USERCTRL_FIFO_RESET_BIT
 */
void MPU6050::resetFIFO() {
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
    I2Cdev_writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7998      	ldrb	r0, [r3, #6]
 8007218:	2301      	movs	r3, #1
 800721a:	2202      	movs	r2, #2
 800721c:	216a      	movs	r1, #106	; 0x6a
 800721e:	f7ff ff55 	bl	80070cc <_Z15I2Cdev_writeBithhhh>
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <_ZN7MPU605012getFIFOCountEv>:
 * number is in turn the number of bytes that can be read from the FIFO buffer
 * and it is directly proportional to the number of samples available given the
 * set of sensor data bound to be stored in the FIFO (register 35 and 36).
 * @return Current FIFO buffer size
 */
uint16_t MPU6050::getFIFOCount() {
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af02      	add	r7, sp, #8
 8007230:	6078      	str	r0, [r7, #4]
    I2Cdev_readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer, 0);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	7998      	ldrb	r0, [r3, #6]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	3307      	adds	r3, #7
 800723a:	2200      	movs	r2, #0
 800723c:	9200      	str	r2, [sp, #0]
 800723e:	2202      	movs	r2, #2
 8007240:	2172      	movs	r1, #114	; 0x72
 8007242:	f7ff ff05 	bl	8007050 <_Z16I2Cdev_readByteshhhPht>
    return (((uint16_t)buffer[0]) << 8) | buffer[1];
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	79db      	ldrb	r3, [r3, #7]
 800724a:	021b      	lsls	r3, r3, #8
 800724c:	b21a      	sxth	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	7a1b      	ldrb	r3, [r3, #8]
 8007252:	b21b      	sxth	r3, r3
 8007254:	4313      	orrs	r3, r2
 8007256:	b21b      	sxth	r3, r3
 8007258:	b29b      	uxth	r3, r3
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <_ZN7MPU605012getFIFOBytesEPhh>:
 */
uint8_t MPU6050::getFIFOByte() {
    I2Cdev_readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer, 0);
    return buffer[0];
}
void MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {
 8007262:	b580      	push	{r7, lr}
 8007264:	b086      	sub	sp, #24
 8007266:	af02      	add	r7, sp, #8
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	4613      	mov	r3, r2
 800726e:	71fb      	strb	r3, [r7, #7]
    I2Cdev_readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data, 0);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	7998      	ldrb	r0, [r3, #6]
 8007274:	79fa      	ldrb	r2, [r7, #7]
 8007276:	2300      	movs	r3, #0
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2174      	movs	r1, #116	; 0x74
 800727e:	f7ff fee7 	bl	8007050 <_Z16I2Cdev_readByteshhhPht>
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <atanf>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	ee10 5a10 	vmov	r5, s0
 8007292:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007296:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800729a:	eef0 7a40 	vmov.f32	s15, s0
 800729e:	db10      	blt.n	80072c2 <atanf+0x36>
 80072a0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80072a4:	dd04      	ble.n	80072b0 <atanf+0x24>
 80072a6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80072aa:	eeb0 0a67 	vmov.f32	s0, s15
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80073e8 <atanf+0x15c>
 80072b4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80073ec <atanf+0x160>
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	bfd8      	it	le
 80072bc:	eef0 7a40 	vmovle.f32	s15, s0
 80072c0:	e7f3      	b.n	80072aa <atanf+0x1e>
 80072c2:	4b4b      	ldr	r3, [pc, #300]	; (80073f0 <atanf+0x164>)
 80072c4:	429c      	cmp	r4, r3
 80072c6:	dc10      	bgt.n	80072ea <atanf+0x5e>
 80072c8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80072cc:	da0a      	bge.n	80072e4 <atanf+0x58>
 80072ce:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80073f4 <atanf+0x168>
 80072d2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072da:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80072de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e2:	dce2      	bgt.n	80072aa <atanf+0x1e>
 80072e4:	f04f 33ff 	mov.w	r3, #4294967295
 80072e8:	e013      	b.n	8007312 <atanf+0x86>
 80072ea:	f000 f8a3 	bl	8007434 <fabsf>
 80072ee:	4b42      	ldr	r3, [pc, #264]	; (80073f8 <atanf+0x16c>)
 80072f0:	429c      	cmp	r4, r3
 80072f2:	dc4f      	bgt.n	8007394 <atanf+0x108>
 80072f4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80072f8:	429c      	cmp	r4, r3
 80072fa:	dc41      	bgt.n	8007380 <atanf+0xf4>
 80072fc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007300:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007304:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007308:	2300      	movs	r3, #0
 800730a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800730e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007318:	eddf 5a38 	vldr	s11, [pc, #224]	; 80073fc <atanf+0x170>
 800731c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8007400 <atanf+0x174>
 8007320:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007404 <atanf+0x178>
 8007324:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8007408 <atanf+0x17c>
 8007328:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800732c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007330:	eddf 5a36 	vldr	s11, [pc, #216]	; 800740c <atanf+0x180>
 8007334:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007338:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8007410 <atanf+0x184>
 800733c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007340:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007414 <atanf+0x188>
 8007344:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007348:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8007418 <atanf+0x18c>
 800734c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007350:	eddf 5a32 	vldr	s11, [pc, #200]	; 800741c <atanf+0x190>
 8007354:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007358:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8007420 <atanf+0x194>
 800735c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007360:	eddf 5a30 	vldr	s11, [pc, #192]	; 8007424 <atanf+0x198>
 8007364:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007368:	eea5 0a87 	vfma.f32	s0, s11, s14
 800736c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007370:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007374:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007378:	d121      	bne.n	80073be <atanf+0x132>
 800737a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800737e:	e794      	b.n	80072aa <atanf+0x1e>
 8007380:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007384:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007388:	ee30 0a27 	vadd.f32	s0, s0, s15
 800738c:	2301      	movs	r3, #1
 800738e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007392:	e7be      	b.n	8007312 <atanf+0x86>
 8007394:	4b24      	ldr	r3, [pc, #144]	; (8007428 <atanf+0x19c>)
 8007396:	429c      	cmp	r4, r3
 8007398:	dc0b      	bgt.n	80073b2 <atanf+0x126>
 800739a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800739e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073a2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80073a6:	2302      	movs	r3, #2
 80073a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80073ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b0:	e7af      	b.n	8007312 <atanf+0x86>
 80073b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80073b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80073ba:	2303      	movs	r3, #3
 80073bc:	e7a9      	b.n	8007312 <atanf+0x86>
 80073be:	4a1b      	ldr	r2, [pc, #108]	; (800742c <atanf+0x1a0>)
 80073c0:	491b      	ldr	r1, [pc, #108]	; (8007430 <atanf+0x1a4>)
 80073c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80073c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80073ca:	ed93 7a00 	vldr	s14, [r3]
 80073ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80073d8:	ed92 0a00 	vldr	s0, [r2]
 80073dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80073e0:	bfb8      	it	lt
 80073e2:	eef1 7a67 	vneglt.f32	s15, s15
 80073e6:	e760      	b.n	80072aa <atanf+0x1e>
 80073e8:	3fc90fdb 	.word	0x3fc90fdb
 80073ec:	bfc90fdb 	.word	0xbfc90fdb
 80073f0:	3edfffff 	.word	0x3edfffff
 80073f4:	7149f2ca 	.word	0x7149f2ca
 80073f8:	3f97ffff 	.word	0x3f97ffff
 80073fc:	3c8569d7 	.word	0x3c8569d7
 8007400:	3d4bda59 	.word	0x3d4bda59
 8007404:	bd15a221 	.word	0xbd15a221
 8007408:	be4ccccd 	.word	0xbe4ccccd
 800740c:	3d886b35 	.word	0x3d886b35
 8007410:	3dba2e6e 	.word	0x3dba2e6e
 8007414:	3e124925 	.word	0x3e124925
 8007418:	3eaaaaab 	.word	0x3eaaaaab
 800741c:	bd6ef16b 	.word	0xbd6ef16b
 8007420:	bd9d8795 	.word	0xbd9d8795
 8007424:	bde38e38 	.word	0xbde38e38
 8007428:	401bffff 	.word	0x401bffff
 800742c:	080076bc 	.word	0x080076bc
 8007430:	080076cc 	.word	0x080076cc

08007434 <fabsf>:
 8007434:	ee10 3a10 	vmov	r3, s0
 8007438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800743c:	ee00 3a10 	vmov	s0, r3
 8007440:	4770      	bx	lr
	...

08007444 <roundf>:
 8007444:	ee10 0a10 	vmov	r0, s0
 8007448:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800744c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8007450:	2a16      	cmp	r2, #22
 8007452:	dc15      	bgt.n	8007480 <roundf+0x3c>
 8007454:	2a00      	cmp	r2, #0
 8007456:	da08      	bge.n	800746a <roundf+0x26>
 8007458:	3201      	adds	r2, #1
 800745a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800745e:	d101      	bne.n	8007464 <roundf+0x20>
 8007460:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8007464:	ee00 3a10 	vmov	s0, r3
 8007468:	4770      	bx	lr
 800746a:	4908      	ldr	r1, [pc, #32]	; (800748c <roundf+0x48>)
 800746c:	4111      	asrs	r1, r2
 800746e:	4208      	tst	r0, r1
 8007470:	d0fa      	beq.n	8007468 <roundf+0x24>
 8007472:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007476:	4113      	asrs	r3, r2
 8007478:	4403      	add	r3, r0
 800747a:	ea23 0301 	bic.w	r3, r3, r1
 800747e:	e7f1      	b.n	8007464 <roundf+0x20>
 8007480:	2a80      	cmp	r2, #128	; 0x80
 8007482:	d1f1      	bne.n	8007468 <roundf+0x24>
 8007484:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	007fffff 	.word	0x007fffff

08007490 <atan2f>:
 8007490:	f000 b826 	b.w	80074e0 <__ieee754_atan2f>

08007494 <sqrtf>:
 8007494:	b508      	push	{r3, lr}
 8007496:	ed2d 8b02 	vpush	{d8}
 800749a:	eeb0 8a40 	vmov.f32	s16, s0
 800749e:	f000 f8bf 	bl	8007620 <__ieee754_sqrtf>
 80074a2:	4b0d      	ldr	r3, [pc, #52]	; (80074d8 <sqrtf+0x44>)
 80074a4:	f993 3000 	ldrsb.w	r3, [r3]
 80074a8:	3301      	adds	r3, #1
 80074aa:	d011      	beq.n	80074d0 <sqrtf+0x3c>
 80074ac:	eeb4 8a48 	vcmp.f32	s16, s16
 80074b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b4:	d60c      	bvs.n	80074d0 <sqrtf+0x3c>
 80074b6:	eddf 8a09 	vldr	s17, [pc, #36]	; 80074dc <sqrtf+0x48>
 80074ba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80074be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c2:	d505      	bpl.n	80074d0 <sqrtf+0x3c>
 80074c4:	f000 f8b0 	bl	8007628 <__errno>
 80074c8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80074cc:	2321      	movs	r3, #33	; 0x21
 80074ce:	6003      	str	r3, [r0, #0]
 80074d0:	ecbd 8b02 	vpop	{d8}
 80074d4:	bd08      	pop	{r3, pc}
 80074d6:	bf00      	nop
 80074d8:	2000000e 	.word	0x2000000e
 80074dc:	00000000 	.word	0x00000000

080074e0 <__ieee754_atan2f>:
 80074e0:	ee10 2a90 	vmov	r2, s1
 80074e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80074e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80074ec:	b510      	push	{r4, lr}
 80074ee:	eef0 7a40 	vmov.f32	s15, s0
 80074f2:	dc06      	bgt.n	8007502 <__ieee754_atan2f+0x22>
 80074f4:	ee10 0a10 	vmov	r0, s0
 80074f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80074fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007500:	dd04      	ble.n	800750c <__ieee754_atan2f+0x2c>
 8007502:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007506:	eeb0 0a67 	vmov.f32	s0, s15
 800750a:	bd10      	pop	{r4, pc}
 800750c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007510:	d103      	bne.n	800751a <__ieee754_atan2f+0x3a>
 8007512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007516:	f7ff beb9 	b.w	800728c <atanf>
 800751a:	1794      	asrs	r4, r2, #30
 800751c:	f004 0402 	and.w	r4, r4, #2
 8007520:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007524:	b943      	cbnz	r3, 8007538 <__ieee754_atan2f+0x58>
 8007526:	2c02      	cmp	r4, #2
 8007528:	d05e      	beq.n	80075e8 <__ieee754_atan2f+0x108>
 800752a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80075fc <__ieee754_atan2f+0x11c>
 800752e:	2c03      	cmp	r4, #3
 8007530:	bf08      	it	eq
 8007532:	eef0 7a47 	vmoveq.f32	s15, s14
 8007536:	e7e6      	b.n	8007506 <__ieee754_atan2f+0x26>
 8007538:	b941      	cbnz	r1, 800754c <__ieee754_atan2f+0x6c>
 800753a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007600 <__ieee754_atan2f+0x120>
 800753e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007604 <__ieee754_atan2f+0x124>
 8007542:	2800      	cmp	r0, #0
 8007544:	bfb8      	it	lt
 8007546:	eef0 7a40 	vmovlt.f32	s15, s0
 800754a:	e7dc      	b.n	8007506 <__ieee754_atan2f+0x26>
 800754c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007550:	d110      	bne.n	8007574 <__ieee754_atan2f+0x94>
 8007552:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007556:	f104 34ff 	add.w	r4, r4, #4294967295
 800755a:	d107      	bne.n	800756c <__ieee754_atan2f+0x8c>
 800755c:	2c02      	cmp	r4, #2
 800755e:	d846      	bhi.n	80075ee <__ieee754_atan2f+0x10e>
 8007560:	4b29      	ldr	r3, [pc, #164]	; (8007608 <__ieee754_atan2f+0x128>)
 8007562:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007566:	edd4 7a00 	vldr	s15, [r4]
 800756a:	e7cc      	b.n	8007506 <__ieee754_atan2f+0x26>
 800756c:	2c02      	cmp	r4, #2
 800756e:	d841      	bhi.n	80075f4 <__ieee754_atan2f+0x114>
 8007570:	4b26      	ldr	r3, [pc, #152]	; (800760c <__ieee754_atan2f+0x12c>)
 8007572:	e7f6      	b.n	8007562 <__ieee754_atan2f+0x82>
 8007574:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007578:	d0df      	beq.n	800753a <__ieee754_atan2f+0x5a>
 800757a:	1a5b      	subs	r3, r3, r1
 800757c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8007580:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007584:	da1a      	bge.n	80075bc <__ieee754_atan2f+0xdc>
 8007586:	2a00      	cmp	r2, #0
 8007588:	da01      	bge.n	800758e <__ieee754_atan2f+0xae>
 800758a:	313c      	adds	r1, #60	; 0x3c
 800758c:	db19      	blt.n	80075c2 <__ieee754_atan2f+0xe2>
 800758e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007592:	f7ff ff4f 	bl	8007434 <fabsf>
 8007596:	f7ff fe79 	bl	800728c <atanf>
 800759a:	eef0 7a40 	vmov.f32	s15, s0
 800759e:	2c01      	cmp	r4, #1
 80075a0:	d012      	beq.n	80075c8 <__ieee754_atan2f+0xe8>
 80075a2:	2c02      	cmp	r4, #2
 80075a4:	d017      	beq.n	80075d6 <__ieee754_atan2f+0xf6>
 80075a6:	2c00      	cmp	r4, #0
 80075a8:	d0ad      	beq.n	8007506 <__ieee754_atan2f+0x26>
 80075aa:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007610 <__ieee754_atan2f+0x130>
 80075ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80075b2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007614 <__ieee754_atan2f+0x134>
 80075b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80075ba:	e7a4      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075bc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007600 <__ieee754_atan2f+0x120>
 80075c0:	e7ed      	b.n	800759e <__ieee754_atan2f+0xbe>
 80075c2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007618 <__ieee754_atan2f+0x138>
 80075c6:	e7ea      	b.n	800759e <__ieee754_atan2f+0xbe>
 80075c8:	ee17 3a90 	vmov	r3, s15
 80075cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	e797      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075d6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007610 <__ieee754_atan2f+0x130>
 80075da:	ee77 7a80 	vadd.f32	s15, s15, s0
 80075de:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007614 <__ieee754_atan2f+0x134>
 80075e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80075e6:	e78e      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075e8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007614 <__ieee754_atan2f+0x134>
 80075ec:	e78b      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075ee:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800761c <__ieee754_atan2f+0x13c>
 80075f2:	e788      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075f4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007618 <__ieee754_atan2f+0x138>
 80075f8:	e785      	b.n	8007506 <__ieee754_atan2f+0x26>
 80075fa:	bf00      	nop
 80075fc:	c0490fdb 	.word	0xc0490fdb
 8007600:	3fc90fdb 	.word	0x3fc90fdb
 8007604:	bfc90fdb 	.word	0xbfc90fdb
 8007608:	080076dc 	.word	0x080076dc
 800760c:	080076e8 	.word	0x080076e8
 8007610:	33bbbd2e 	.word	0x33bbbd2e
 8007614:	40490fdb 	.word	0x40490fdb
 8007618:	00000000 	.word	0x00000000
 800761c:	3f490fdb 	.word	0x3f490fdb

08007620 <__ieee754_sqrtf>:
 8007620:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007624:	4770      	bx	lr
	...

08007628 <__errno>:
 8007628:	4b01      	ldr	r3, [pc, #4]	; (8007630 <__errno+0x8>)
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	20000010 	.word	0x20000010

08007634 <__libc_init_array>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	4d0d      	ldr	r5, [pc, #52]	; (800766c <__libc_init_array+0x38>)
 8007638:	4c0d      	ldr	r4, [pc, #52]	; (8007670 <__libc_init_array+0x3c>)
 800763a:	1b64      	subs	r4, r4, r5
 800763c:	10a4      	asrs	r4, r4, #2
 800763e:	2600      	movs	r6, #0
 8007640:	42a6      	cmp	r6, r4
 8007642:	d109      	bne.n	8007658 <__libc_init_array+0x24>
 8007644:	4d0b      	ldr	r5, [pc, #44]	; (8007674 <__libc_init_array+0x40>)
 8007646:	4c0c      	ldr	r4, [pc, #48]	; (8007678 <__libc_init_array+0x44>)
 8007648:	f000 f820 	bl	800768c <_init>
 800764c:	1b64      	subs	r4, r4, r5
 800764e:	10a4      	asrs	r4, r4, #2
 8007650:	2600      	movs	r6, #0
 8007652:	42a6      	cmp	r6, r4
 8007654:	d105      	bne.n	8007662 <__libc_init_array+0x2e>
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	f855 3b04 	ldr.w	r3, [r5], #4
 800765c:	4798      	blx	r3
 800765e:	3601      	adds	r6, #1
 8007660:	e7ee      	b.n	8007640 <__libc_init_array+0xc>
 8007662:	f855 3b04 	ldr.w	r3, [r5], #4
 8007666:	4798      	blx	r3
 8007668:	3601      	adds	r6, #1
 800766a:	e7f2      	b.n	8007652 <__libc_init_array+0x1e>
 800766c:	080076fc 	.word	0x080076fc
 8007670:	080076fc 	.word	0x080076fc
 8007674:	080076fc 	.word	0x080076fc
 8007678:	08007704 	.word	0x08007704

0800767c <memset>:
 800767c:	4402      	add	r2, r0
 800767e:	4603      	mov	r3, r0
 8007680:	4293      	cmp	r3, r2
 8007682:	d100      	bne.n	8007686 <memset+0xa>
 8007684:	4770      	bx	lr
 8007686:	f803 1b01 	strb.w	r1, [r3], #1
 800768a:	e7f9      	b.n	8007680 <memset+0x4>

0800768c <_init>:
 800768c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768e:	bf00      	nop
 8007690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007692:	bc08      	pop	{r3}
 8007694:	469e      	mov	lr, r3
 8007696:	4770      	bx	lr

08007698 <_fini>:
 8007698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769a:	bf00      	nop
 800769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800769e:	bc08      	pop	{r3}
 80076a0:	469e      	mov	lr, r3
 80076a2:	4770      	bx	lr
