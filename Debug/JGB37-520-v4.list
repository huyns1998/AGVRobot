
JGB37-520-v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000837c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08008508  08008508  00018508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008720  08008720  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008720  08008720  00018720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008728  08008728  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008730  08008730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000033c  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c91e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a09  00000000  00000000  0004c9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b10  00000000  00000000  000503d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a28  00000000  00000000  00051ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f0a  00000000  00000000  00053908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a39f  00000000  00000000  0007b812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da505  00000000  00000000  00095bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001700b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c34  00000000  00000000  0017010c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084ec 	.word	0x080084ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	080084ec 	.word	0x080084ec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_uldivmod>:
 8000d80:	b953      	cbnz	r3, 8000d98 <__aeabi_uldivmod+0x18>
 8000d82:	b94a      	cbnz	r2, 8000d98 <__aeabi_uldivmod+0x18>
 8000d84:	2900      	cmp	r1, #0
 8000d86:	bf08      	it	eq
 8000d88:	2800      	cmpeq	r0, #0
 8000d8a:	bf1c      	itt	ne
 8000d8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d90:	f04f 30ff 	movne.w	r0, #4294967295
 8000d94:	f000 b9a2 	b.w	80010dc <__aeabi_idiv0>
 8000d98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da0:	f000 f83a 	bl	8000e18 <__udivmoddi4>
 8000da4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dac:	b004      	add	sp, #16
 8000dae:	4770      	bx	lr

08000db0 <__aeabi_f2lz>:
 8000db0:	ee07 0a90 	vmov	s15, r0
 8000db4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbc:	d401      	bmi.n	8000dc2 <__aeabi_f2lz+0x12>
 8000dbe:	f000 b80b 	b.w	8000dd8 <__aeabi_f2ulz>
 8000dc2:	eef1 7a67 	vneg.f32	s15, s15
 8000dc6:	b508      	push	{r3, lr}
 8000dc8:	ee17 0a90 	vmov	r0, s15
 8000dcc:	f000 f804 	bl	8000dd8 <__aeabi_f2ulz>
 8000dd0:	4240      	negs	r0, r0
 8000dd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd6:	bd08      	pop	{r3, pc}

08000dd8 <__aeabi_f2ulz>:
 8000dd8:	b5d0      	push	{r4, r6, r7, lr}
 8000dda:	f7ff fb59 	bl	8000490 <__aeabi_f2d>
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__aeabi_f2ulz+0x38>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	4606      	mov	r6, r0
 8000de4:	460f      	mov	r7, r1
 8000de6:	f7ff fbab 	bl	8000540 <__aeabi_dmul>
 8000dea:	f000 f979 	bl	80010e0 <__aeabi_d2uiz>
 8000dee:	4604      	mov	r4, r0
 8000df0:	f7ff fb2c 	bl	800044c <__aeabi_ui2d>
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <__aeabi_f2ulz+0x3c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f7ff fba2 	bl	8000540 <__aeabi_dmul>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4630      	mov	r0, r6
 8000e02:	4639      	mov	r1, r7
 8000e04:	f7ff f9e4 	bl	80001d0 <__aeabi_dsub>
 8000e08:	f000 f96a 	bl	80010e0 <__aeabi_d2uiz>
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e10:	3df00000 	.word	0x3df00000
 8000e14:	41f00000 	.word	0x41f00000

08000e18 <__udivmoddi4>:
 8000e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	9d08      	ldr	r5, [sp, #32]
 8000e1e:	4604      	mov	r4, r0
 8000e20:	468c      	mov	ip, r1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 8083 	bne.w	8000f2e <__udivmoddi4+0x116>
 8000e28:	428a      	cmp	r2, r1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	d947      	bls.n	8000ebe <__udivmoddi4+0xa6>
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	b142      	cbz	r2, 8000e46 <__udivmoddi4+0x2e>
 8000e34:	f1c2 0020 	rsb	r0, r2, #32
 8000e38:	fa24 f000 	lsr.w	r0, r4, r0
 8000e3c:	4091      	lsls	r1, r2
 8000e3e:	4097      	lsls	r7, r2
 8000e40:	ea40 0c01 	orr.w	ip, r0, r1
 8000e44:	4094      	lsls	r4, r2
 8000e46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e4a:	0c23      	lsrs	r3, r4, #16
 8000e4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000e50:	fa1f fe87 	uxth.w	lr, r7
 8000e54:	fb08 c116 	mls	r1, r8, r6, ip
 8000e58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000e60:	4299      	cmp	r1, r3
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x60>
 8000e64:	18fb      	adds	r3, r7, r3
 8000e66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e6a:	f080 8119 	bcs.w	80010a0 <__udivmoddi4+0x288>
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	f240 8116 	bls.w	80010a0 <__udivmoddi4+0x288>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	443b      	add	r3, r7
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d909      	bls.n	8000ea4 <__udivmoddi4+0x8c>
 8000e90:	193c      	adds	r4, r7, r4
 8000e92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e96:	f080 8105 	bcs.w	80010a4 <__udivmoddi4+0x28c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f240 8102 	bls.w	80010a4 <__udivmoddi4+0x28c>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	443c      	add	r4, r7
 8000ea4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea8:	eba4 040e 	sub.w	r4, r4, lr
 8000eac:	2600      	movs	r6, #0
 8000eae:	b11d      	cbz	r5, 8000eb8 <__udivmoddi4+0xa0>
 8000eb0:	40d4      	lsrs	r4, r2
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	b902      	cbnz	r2, 8000ec2 <__udivmoddi4+0xaa>
 8000ec0:	deff      	udf	#255	; 0xff
 8000ec2:	fab2 f282 	clz	r2, r2
 8000ec6:	2a00      	cmp	r2, #0
 8000ec8:	d150      	bne.n	8000f6c <__udivmoddi4+0x154>
 8000eca:	1bcb      	subs	r3, r1, r7
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	fa1f f887 	uxth.w	r8, r7
 8000ed4:	2601      	movs	r6, #1
 8000ed6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000eda:	0c21      	lsrs	r1, r4, #16
 8000edc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ee0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d907      	bls.n	8000efc <__udivmoddi4+0xe4>
 8000eec:	1879      	adds	r1, r7, r1
 8000eee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ef2:	d202      	bcs.n	8000efa <__udivmoddi4+0xe2>
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	f200 80e9 	bhi.w	80010cc <__udivmoddi4+0x2b4>
 8000efa:	4684      	mov	ip, r0
 8000efc:	1ac9      	subs	r1, r1, r3
 8000efe:	b2a3      	uxth	r3, r4
 8000f00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000f0c:	fb08 f800 	mul.w	r8, r8, r0
 8000f10:	45a0      	cmp	r8, r4
 8000f12:	d907      	bls.n	8000f24 <__udivmoddi4+0x10c>
 8000f14:	193c      	adds	r4, r7, r4
 8000f16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f1a:	d202      	bcs.n	8000f22 <__udivmoddi4+0x10a>
 8000f1c:	45a0      	cmp	r8, r4
 8000f1e:	f200 80d9 	bhi.w	80010d4 <__udivmoddi4+0x2bc>
 8000f22:	4618      	mov	r0, r3
 8000f24:	eba4 0408 	sub.w	r4, r4, r8
 8000f28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f2c:	e7bf      	b.n	8000eae <__udivmoddi4+0x96>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d909      	bls.n	8000f46 <__udivmoddi4+0x12e>
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	f000 80b1 	beq.w	800109a <__udivmoddi4+0x282>
 8000f38:	2600      	movs	r6, #0
 8000f3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f3e:	4630      	mov	r0, r6
 8000f40:	4631      	mov	r1, r6
 8000f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f46:	fab3 f683 	clz	r6, r3
 8000f4a:	2e00      	cmp	r6, #0
 8000f4c:	d14a      	bne.n	8000fe4 <__udivmoddi4+0x1cc>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d302      	bcc.n	8000f58 <__udivmoddi4+0x140>
 8000f52:	4282      	cmp	r2, r0
 8000f54:	f200 80b8 	bhi.w	80010c8 <__udivmoddi4+0x2b0>
 8000f58:	1a84      	subs	r4, r0, r2
 8000f5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000f5e:	2001      	movs	r0, #1
 8000f60:	468c      	mov	ip, r1
 8000f62:	2d00      	cmp	r5, #0
 8000f64:	d0a8      	beq.n	8000eb8 <__udivmoddi4+0xa0>
 8000f66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0xa0>
 8000f6c:	f1c2 0320 	rsb	r3, r2, #32
 8000f70:	fa20 f603 	lsr.w	r6, r0, r3
 8000f74:	4097      	lsls	r7, r2
 8000f76:	fa01 f002 	lsl.w	r0, r1, r2
 8000f7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7e:	40d9      	lsrs	r1, r3
 8000f80:	4330      	orrs	r0, r6
 8000f82:	0c03      	lsrs	r3, r0, #16
 8000f84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f88:	fa1f f887 	uxth.w	r8, r7
 8000f8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f94:	fb06 f108 	mul.w	r1, r6, r8
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9e:	d909      	bls.n	8000fb4 <__udivmoddi4+0x19c>
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000fa6:	f080 808d 	bcs.w	80010c4 <__udivmoddi4+0x2ac>
 8000faa:	4299      	cmp	r1, r3
 8000fac:	f240 808a 	bls.w	80010c4 <__udivmoddi4+0x2ac>
 8000fb0:	3e02      	subs	r6, #2
 8000fb2:	443b      	add	r3, r7
 8000fb4:	1a5b      	subs	r3, r3, r1
 8000fb6:	b281      	uxth	r1, r0
 8000fb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb00 f308 	mul.w	r3, r0, r8
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d907      	bls.n	8000fdc <__udivmoddi4+0x1c4>
 8000fcc:	1879      	adds	r1, r7, r1
 8000fce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fd2:	d273      	bcs.n	80010bc <__udivmoddi4+0x2a4>
 8000fd4:	428b      	cmp	r3, r1
 8000fd6:	d971      	bls.n	80010bc <__udivmoddi4+0x2a4>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4439      	add	r1, r7
 8000fdc:	1acb      	subs	r3, r1, r3
 8000fde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fe2:	e778      	b.n	8000ed6 <__udivmoddi4+0xbe>
 8000fe4:	f1c6 0c20 	rsb	ip, r6, #32
 8000fe8:	fa03 f406 	lsl.w	r4, r3, r6
 8000fec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ff0:	431c      	orrs	r4, r3
 8000ff2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ff6:	fa01 f306 	lsl.w	r3, r1, r6
 8000ffa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ffe:	fa21 f10c 	lsr.w	r1, r1, ip
 8001002:	431f      	orrs	r7, r3
 8001004:	0c3b      	lsrs	r3, r7, #16
 8001006:	fbb1 f9fe 	udiv	r9, r1, lr
 800100a:	fa1f f884 	uxth.w	r8, r4
 800100e:	fb0e 1119 	mls	r1, lr, r9, r1
 8001012:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001016:	fb09 fa08 	mul.w	sl, r9, r8
 800101a:	458a      	cmp	sl, r1
 800101c:	fa02 f206 	lsl.w	r2, r2, r6
 8001020:	fa00 f306 	lsl.w	r3, r0, r6
 8001024:	d908      	bls.n	8001038 <__udivmoddi4+0x220>
 8001026:	1861      	adds	r1, r4, r1
 8001028:	f109 30ff 	add.w	r0, r9, #4294967295
 800102c:	d248      	bcs.n	80010c0 <__udivmoddi4+0x2a8>
 800102e:	458a      	cmp	sl, r1
 8001030:	d946      	bls.n	80010c0 <__udivmoddi4+0x2a8>
 8001032:	f1a9 0902 	sub.w	r9, r9, #2
 8001036:	4421      	add	r1, r4
 8001038:	eba1 010a 	sub.w	r1, r1, sl
 800103c:	b2bf      	uxth	r7, r7
 800103e:	fbb1 f0fe 	udiv	r0, r1, lr
 8001042:	fb0e 1110 	mls	r1, lr, r0, r1
 8001046:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800104a:	fb00 f808 	mul.w	r8, r0, r8
 800104e:	45b8      	cmp	r8, r7
 8001050:	d907      	bls.n	8001062 <__udivmoddi4+0x24a>
 8001052:	19e7      	adds	r7, r4, r7
 8001054:	f100 31ff 	add.w	r1, r0, #4294967295
 8001058:	d22e      	bcs.n	80010b8 <__udivmoddi4+0x2a0>
 800105a:	45b8      	cmp	r8, r7
 800105c:	d92c      	bls.n	80010b8 <__udivmoddi4+0x2a0>
 800105e:	3802      	subs	r0, #2
 8001060:	4427      	add	r7, r4
 8001062:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001066:	eba7 0708 	sub.w	r7, r7, r8
 800106a:	fba0 8902 	umull	r8, r9, r0, r2
 800106e:	454f      	cmp	r7, r9
 8001070:	46c6      	mov	lr, r8
 8001072:	4649      	mov	r1, r9
 8001074:	d31a      	bcc.n	80010ac <__udivmoddi4+0x294>
 8001076:	d017      	beq.n	80010a8 <__udivmoddi4+0x290>
 8001078:	b15d      	cbz	r5, 8001092 <__udivmoddi4+0x27a>
 800107a:	ebb3 020e 	subs.w	r2, r3, lr
 800107e:	eb67 0701 	sbc.w	r7, r7, r1
 8001082:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001086:	40f2      	lsrs	r2, r6
 8001088:	ea4c 0202 	orr.w	r2, ip, r2
 800108c:	40f7      	lsrs	r7, r6
 800108e:	e9c5 2700 	strd	r2, r7, [r5]
 8001092:	2600      	movs	r6, #0
 8001094:	4631      	mov	r1, r6
 8001096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109a:	462e      	mov	r6, r5
 800109c:	4628      	mov	r0, r5
 800109e:	e70b      	b.n	8000eb8 <__udivmoddi4+0xa0>
 80010a0:	4606      	mov	r6, r0
 80010a2:	e6e9      	b.n	8000e78 <__udivmoddi4+0x60>
 80010a4:	4618      	mov	r0, r3
 80010a6:	e6fd      	b.n	8000ea4 <__udivmoddi4+0x8c>
 80010a8:	4543      	cmp	r3, r8
 80010aa:	d2e5      	bcs.n	8001078 <__udivmoddi4+0x260>
 80010ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80010b0:	eb69 0104 	sbc.w	r1, r9, r4
 80010b4:	3801      	subs	r0, #1
 80010b6:	e7df      	b.n	8001078 <__udivmoddi4+0x260>
 80010b8:	4608      	mov	r0, r1
 80010ba:	e7d2      	b.n	8001062 <__udivmoddi4+0x24a>
 80010bc:	4660      	mov	r0, ip
 80010be:	e78d      	b.n	8000fdc <__udivmoddi4+0x1c4>
 80010c0:	4681      	mov	r9, r0
 80010c2:	e7b9      	b.n	8001038 <__udivmoddi4+0x220>
 80010c4:	4666      	mov	r6, ip
 80010c6:	e775      	b.n	8000fb4 <__udivmoddi4+0x19c>
 80010c8:	4630      	mov	r0, r6
 80010ca:	e74a      	b.n	8000f62 <__udivmoddi4+0x14a>
 80010cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80010d0:	4439      	add	r1, r7
 80010d2:	e713      	b.n	8000efc <__udivmoddi4+0xe4>
 80010d4:	3802      	subs	r0, #2
 80010d6:	443c      	add	r4, r7
 80010d8:	e724      	b.n	8000f24 <__udivmoddi4+0x10c>
 80010da:	bf00      	nop

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__aeabi_d2uiz>:
 80010e0:	004a      	lsls	r2, r1, #1
 80010e2:	d211      	bcs.n	8001108 <__aeabi_d2uiz+0x28>
 80010e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010e8:	d211      	bcs.n	800110e <__aeabi_d2uiz+0x2e>
 80010ea:	d50d      	bpl.n	8001108 <__aeabi_d2uiz+0x28>
 80010ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010f4:	d40e      	bmi.n	8001114 <__aeabi_d2uiz+0x34>
 80010f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001102:	fa23 f002 	lsr.w	r0, r3, r2
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001112:	d102      	bne.n	800111a <__aeabi_d2uiz+0x3a>
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr

08001120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_MspInit+0x4c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <HAL_MspInit+0x4c>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_MspInit+0x4c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_I2C_MspInit+0x84>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12b      	bne.n	80011ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a17      	ldr	r2, [pc, #92]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU_SCL_Pin|MPU_SDA_Pin;
 80011ae:	23c0      	movs	r3, #192	; 0xc0
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b2:	2312      	movs	r3, #18
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ba:	2302      	movs	r3, #2
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011be:	2304      	movs	r3, #4
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <HAL_I2C_MspInit+0x8c>)
 80011ca:	f000 fbbf 	bl	800194c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_I2C_MspInit+0x88>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3728      	adds	r7, #40	; 0x28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40005400 	.word	0x40005400
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020400 	.word	0x40020400

08001200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a43      	ldr	r2, [pc, #268]	; (800132c <HAL_TIM_Base_MspInit+0x12c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10e      	bne.n	8001240 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	4b42      	ldr	r3, [pc, #264]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a41      	ldr	r2, [pc, #260]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800123e:	e071      	b.n	8001324 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001248:	d135      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	4b38      	ldr	r3, [pc, #224]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a37      	ldr	r2, [pc, #220]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a30      	ldr	r2, [pc, #192]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DC2_TIM_IC_Pin|DC1_TIM_IC_Pin;
 8001282:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4825      	ldr	r0, [pc, #148]	; (8001334 <HAL_TIM_Base_MspInit+0x134>)
 80012a0:	f000 fb54 	bl	800194c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	201c      	movs	r0, #28
 80012aa:	f000 fa86 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012ae:	201c      	movs	r0, #28
 80012b0:	f000 fa9f 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 80012b4:	e036      	b.n	8001324 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_TIM_Base_MspInit+0x138>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d116      	bne.n	80012ee <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	201d      	movs	r0, #29
 80012e2:	f000 fa6a 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012e6:	201d      	movs	r0, #29
 80012e8:	f000 fa83 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 80012ec:	e01a      	b.n	8001324 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM4)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <HAL_TIM_Base_MspInit+0x13c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d115      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_TIM_Base_MspInit+0x130>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	2100      	movs	r1, #0
 8001318:	201e      	movs	r0, #30
 800131a:	f000 fa4e 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800131e:	201e      	movs	r0, #30
 8001320:	f000 fa67 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010000 	.word	0x40010000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400
 8001338:	40000400 	.word	0x40000400
 800133c:	40000800 	.word	0x40000800

08001340 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_TIM_MspPostInit+0x68>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d11e      	bne.n	80013a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_TIM_MspPostInit+0x6c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = DC2_TIM_PWM_Pin|DC1_TIM_PWM_Pin;
 800137e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001382:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001390:	2301      	movs	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <HAL_TIM_MspPostInit+0x70>)
 800139c:	f000 fad6 	bl	800194c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40010000 	.word	0x40010000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40021000 	.word	0x40021000

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <HAL_UART_MspInit+0x94>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d134      	bne.n	8001440 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <HAL_UART_MspInit+0x98>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a1b      	ldr	r2, [pc, #108]	; (800144c <HAL_UART_MspInit+0x98>)
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_UART_MspInit+0x98>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_UART_MspInit+0x98>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_UART_MspInit+0x98>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_UART_MspInit+0x98>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800140e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001420:	2307      	movs	r3, #7
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4809      	ldr	r0, [pc, #36]	; (8001450 <HAL_UART_MspInit+0x9c>)
 800142c:	f000 fa8e 	bl	800194c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2025      	movs	r0, #37	; 0x25
 8001436:	f000 f9c0 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800143a:	2025      	movs	r0, #37	; 0x25
 800143c:	f000 f9d9 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40011000 	.word	0x40011000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <NMI_Handler+0x4>

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <MemManage_Handler+0x4>

08001466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <BusFault_Handler+0x4>

0800146c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler+0x4>

08001472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a0:	f000 f890 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014d2:	490e      	ldr	r1, [pc, #56]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0b      	ldr	r2, [pc, #44]	; (8001514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014e8:	4c0b      	ldr	r4, [pc, #44]	; (8001518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014f6:	f7ff ffd7 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fa:	f006 ffcb 	bl	8008494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fe:	f003 fc2b 	bl	8004d58 <main>
  bx  lr    
 8001502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001510:	08008734 	.word	0x08008734
  ldr r2, =_sbss
 8001514:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001518:	200003b4 	.word	0x200003b4

0800151c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_Init+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <HAL_Init+0x40>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800152e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_Init+0x40>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <HAL_Init+0x40>)
 8001536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800153a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x40>)
 8001542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f92b 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	200f      	movs	r0, #15
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fde4 	bl	8001120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f943 	bl	800180e <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f90b 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	200002d8 	.word	0x200002d8

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200002d8 	.word	0x200002d8

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff feda 	bl	80015ec <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d008      	beq.n	8001858 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e052      	b.n	80018fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0216 	bic.w	r2, r2, #22
 8001866:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001876:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	2b00      	cmp	r3, #0
 800187e:	d103      	bne.n	8001888 <HAL_DMA_Abort+0x62>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	2b00      	cmp	r3, #0
 8001886:	d007      	beq.n	8001898 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0208 	bic.w	r2, r2, #8
 8001896:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a8:	e013      	b.n	80018d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018aa:	f7ff fe9f 	bl	80015ec <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d90c      	bls.n	80018d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2220      	movs	r2, #32
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2203      	movs	r2, #3
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e015      	b.n	80018fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e4      	bne.n	80018aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	223f      	movs	r2, #63	; 0x3f
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d004      	beq.n	8001924 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e00c      	b.n	800193e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2205      	movs	r2, #5
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e16b      	b.n	8001c40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	f040 815a 	bne.w	8001c3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d005      	beq.n	800199e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800199a:	2b02      	cmp	r3, #2
 800199c:	d130      	bne.n	8001a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 0201 	and.w	r2, r3, #1
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d017      	beq.n	8001a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d123      	bne.n	8001a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	220f      	movs	r2, #15
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691a      	ldr	r2, [r3, #16]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	69b9      	ldr	r1, [r7, #24]
 8001a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80b4 	beq.w	8001c3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b60      	ldr	r3, [pc, #384]	; (8001c58 <HAL_GPIO_Init+0x30c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a5f      	ldr	r2, [pc, #380]	; (8001c58 <HAL_GPIO_Init+0x30c>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_GPIO_Init+0x30c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aee:	4a5b      	ldr	r2, [pc, #364]	; (8001c5c <HAL_GPIO_Init+0x310>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_GPIO_Init+0x314>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d02b      	beq.n	8001b72 <HAL_GPIO_Init+0x226>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a51      	ldr	r2, [pc, #324]	; (8001c64 <HAL_GPIO_Init+0x318>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d025      	beq.n	8001b6e <HAL_GPIO_Init+0x222>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a50      	ldr	r2, [pc, #320]	; (8001c68 <HAL_GPIO_Init+0x31c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d01f      	beq.n	8001b6a <HAL_GPIO_Init+0x21e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4f      	ldr	r2, [pc, #316]	; (8001c6c <HAL_GPIO_Init+0x320>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d019      	beq.n	8001b66 <HAL_GPIO_Init+0x21a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4e      	ldr	r2, [pc, #312]	; (8001c70 <HAL_GPIO_Init+0x324>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0x216>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4d      	ldr	r2, [pc, #308]	; (8001c74 <HAL_GPIO_Init+0x328>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00d      	beq.n	8001b5e <HAL_GPIO_Init+0x212>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a4c      	ldr	r2, [pc, #304]	; (8001c78 <HAL_GPIO_Init+0x32c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d007      	beq.n	8001b5a <HAL_GPIO_Init+0x20e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4b      	ldr	r2, [pc, #300]	; (8001c7c <HAL_GPIO_Init+0x330>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d101      	bne.n	8001b56 <HAL_GPIO_Init+0x20a>
 8001b52:	2307      	movs	r3, #7
 8001b54:	e00e      	b.n	8001b74 <HAL_GPIO_Init+0x228>
 8001b56:	2308      	movs	r3, #8
 8001b58:	e00c      	b.n	8001b74 <HAL_GPIO_Init+0x228>
 8001b5a:	2306      	movs	r3, #6
 8001b5c:	e00a      	b.n	8001b74 <HAL_GPIO_Init+0x228>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x228>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x228>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x228>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x228>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x228>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	; (8001c5c <HAL_GPIO_Init+0x310>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b92:	4b3b      	ldr	r3, [pc, #236]	; (8001c80 <HAL_GPIO_Init+0x334>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bb6:	4a32      	ldr	r2, [pc, #200]	; (8001c80 <HAL_GPIO_Init+0x334>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_GPIO_Init+0x334>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be0:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_GPIO_Init+0x334>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_GPIO_Init+0x334>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c0a:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <HAL_GPIO_Init+0x334>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_GPIO_Init+0x334>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <HAL_GPIO_Init+0x334>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f ae90 	bls.w	8001968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021400 	.word	0x40021400
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	40021c00 	.word	0x40021c00
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd0:	e003      	b.n	8001cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cfe:	4a05      	ldr	r2, [pc, #20]	; (8001d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 f86d 	bl	8004de6 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e12b      	b.n	8001f82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fa16 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d7c:	f000 fd30 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8001d80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4a81      	ldr	r2, [pc, #516]	; (8001f8c <HAL_I2C_Init+0x274>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d807      	bhi.n	8001d9c <HAL_I2C_Init+0x84>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a80      	ldr	r2, [pc, #512]	; (8001f90 <HAL_I2C_Init+0x278>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	bf94      	ite	ls
 8001d94:	2301      	movls	r3, #1
 8001d96:	2300      	movhi	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	e006      	b.n	8001daa <HAL_I2C_Init+0x92>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a7d      	ldr	r2, [pc, #500]	; (8001f94 <HAL_I2C_Init+0x27c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	bf94      	ite	ls
 8001da4:	2301      	movls	r3, #1
 8001da6:	2300      	movhi	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0e7      	b.n	8001f82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4a78      	ldr	r2, [pc, #480]	; (8001f98 <HAL_I2C_Init+0x280>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0c9b      	lsrs	r3, r3, #18
 8001dbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a6a      	ldr	r2, [pc, #424]	; (8001f8c <HAL_I2C_Init+0x274>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d802      	bhi.n	8001dec <HAL_I2C_Init+0xd4>
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3301      	adds	r3, #1
 8001dea:	e009      	b.n	8001e00 <HAL_I2C_Init+0xe8>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	4a69      	ldr	r2, [pc, #420]	; (8001f9c <HAL_I2C_Init+0x284>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	3301      	adds	r3, #1
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	495c      	ldr	r1, [pc, #368]	; (8001f8c <HAL_I2C_Init+0x274>)
 8001e1c:	428b      	cmp	r3, r1
 8001e1e:	d819      	bhi.n	8001e54 <HAL_I2C_Init+0x13c>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1e59      	subs	r1, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2e:	1c59      	adds	r1, r3, #1
 8001e30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e34:	400b      	ands	r3, r1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HAL_I2C_Init+0x138>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1e59      	subs	r1, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e4e:	e051      	b.n	8001ef4 <HAL_I2C_Init+0x1dc>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e04f      	b.n	8001ef4 <HAL_I2C_Init+0x1dc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <HAL_I2C_Init+0x168>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1e58      	subs	r0, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6859      	ldr	r1, [r3, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	440b      	add	r3, r1
 8001e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	e012      	b.n	8001ea6 <HAL_I2C_Init+0x18e>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1e58      	subs	r0, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	0099      	lsls	r1, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e96:	3301      	adds	r3, #1
 8001e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf0c      	ite	eq
 8001ea0:	2301      	moveq	r3, #1
 8001ea2:	2300      	movne	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_I2C_Init+0x196>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e022      	b.n	8001ef4 <HAL_I2C_Init+0x1dc>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_I2C_Init+0x1bc>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e58      	subs	r0, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	440b      	add	r3, r1
 8001ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed2:	e00f      	b.n	8001ef4 <HAL_I2C_Init+0x1dc>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1e58      	subs	r0, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	0099      	lsls	r1, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eea:	3301      	adds	r3, #1
 8001eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	6809      	ldr	r1, [r1, #0]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6911      	ldr	r1, [r2, #16]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68d2      	ldr	r2, [r2, #12]
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	000186a0 	.word	0x000186a0
 8001f90:	001e847f 	.word	0x001e847f
 8001f94:	003d08ff 	.word	0x003d08ff
 8001f98:	431bde83 	.word	0x431bde83
 8001f9c:	10624dd3 	.word	0x10624dd3

08001fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e264      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d075      	beq.n	80020aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fbe:	4ba3      	ldr	r3, [pc, #652]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fca:	4ba0      	ldr	r3, [pc, #640]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d112      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd6:	4b9d      	ldr	r3, [pc, #628]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe2:	d10b      	bne.n	8001ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	4b99      	ldr	r3, [pc, #612]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d05b      	beq.n	80020a8 <HAL_RCC_OscConfig+0x108>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d157      	bne.n	80020a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e23f      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d106      	bne.n	8002014 <HAL_RCC_OscConfig+0x74>
 8002006:	4b91      	ldr	r3, [pc, #580]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a90      	ldr	r2, [pc, #576]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0xb0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x98>
 800201e:	4b8b      	ldr	r3, [pc, #556]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a8a      	ldr	r2, [pc, #552]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a87      	ldr	r2, [pc, #540]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0xb0>
 8002038:	4b84      	ldr	r3, [pc, #528]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a83      	ldr	r2, [pc, #524]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a80      	ldr	r2, [pc, #512]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d013      	beq.n	8002080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fac8 	bl	80015ec <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7ff fac4 	bl	80015ec <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e204      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b76      	ldr	r3, [pc, #472]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0xc0>
 800207e:	e014      	b.n	80020aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fab4 	bl	80015ec <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002088:	f7ff fab0 	bl	80015ec <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b64      	cmp	r3, #100	; 0x64
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1f0      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209a:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0xe8>
 80020a6:	e000      	b.n	80020aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d063      	beq.n	800217e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b6:	4b65      	ldr	r3, [pc, #404]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c2:	4b62      	ldr	r3, [pc, #392]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d11c      	bne.n	8002108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ce:	4b5f      	ldr	r3, [pc, #380]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d116      	bne.n	8002108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x152>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e1c4      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4952      	ldr	r1, [pc, #328]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	e03a      	b.n	800217e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002110:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <HAL_RCC_OscConfig+0x2b0>)
 8002112:	2201      	movs	r2, #1
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff fa69 	bl	80015ec <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211e:	f7ff fa65 	bl	80015ec <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1a5      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213c:	4b43      	ldr	r3, [pc, #268]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4940      	ldr	r1, [pc, #256]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800214c:	4313      	orrs	r3, r2
 800214e:	600b      	str	r3, [r1, #0]
 8002150:	e015      	b.n	800217e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <HAL_RCC_OscConfig+0x2b0>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff fa48 	bl	80015ec <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002160:	f7ff fa44 	bl	80015ec <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e184      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b00      	cmp	r3, #0
 8002188:	d030      	beq.n	80021ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d016      	beq.n	80021c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002192:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCC_OscConfig+0x2b4>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7ff fa28 	bl	80015ec <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7ff fa24 	bl	80015ec <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e164      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b2:	4b26      	ldr	r3, [pc, #152]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x200>
 80021be:	e015      	b.n	80021ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCC_OscConfig+0x2b4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff fa11 	bl	80015ec <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ce:	f7ff fa0d 	bl	80015ec <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e14d      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a0 	beq.w	800233a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10f      	bne.n	800222a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_RCC_OscConfig+0x2ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x2b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d121      	bne.n	800227a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_OscConfig+0x2b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a07      	ldr	r2, [pc, #28]	; (8002258 <HAL_RCC_OscConfig+0x2b8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7ff f9d3 	bl	80015ec <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e011      	b.n	800226e <HAL_RCC_OscConfig+0x2ce>
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	42470000 	.word	0x42470000
 8002254:	42470e80 	.word	0x42470e80
 8002258:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7ff f9c6 	bl	80015ec <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e106      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b85      	ldr	r3, [pc, #532]	; (8002484 <HAL_RCC_OscConfig+0x4e4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x2f0>
 8002282:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a80      	ldr	r2, [pc, #512]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	e01c      	b.n	80022ca <HAL_RCC_OscConfig+0x32a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x312>
 8002298:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a7a      	ldr	r2, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	4b78      	ldr	r3, [pc, #480]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a77      	ldr	r2, [pc, #476]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x32a>
 80022b2:	4b75      	ldr	r3, [pc, #468]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b6:	4a74      	ldr	r2, [pc, #464]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6713      	str	r3, [r2, #112]	; 0x70
 80022be:	4b72      	ldr	r3, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	4a71      	ldr	r2, [pc, #452]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d2:	f7ff f98b 	bl	80015ec <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7ff f987 	bl	80015ec <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0c5      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x33a>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7ff f975 	bl	80015ec <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7ff f971 	bl	80015ec <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0af      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b5a      	ldr	r3, [pc, #360]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b56      	ldr	r3, [pc, #344]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a55      	ldr	r2, [pc, #340]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 809b 	beq.w	800247a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d05c      	beq.n	800240a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d141      	bne.n	80023dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_OscConfig+0x4ec>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7ff f945 	bl	80015ec <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002366:	f7ff f941 	bl	80015ec <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e081      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002378:	4b43      	ldr	r3, [pc, #268]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	061b      	lsls	r3, r3, #24
 80023a8:	4937      	ldr	r1, [pc, #220]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_RCC_OscConfig+0x4ec>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff f91a 	bl	80015ec <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023bc:	f7ff f916 	bl	80015ec <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e056      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x41c>
 80023da:	e04e      	b.n	800247a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023dc:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCC_OscConfig+0x4ec>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff f903 	bl	80015ec <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ea:	f7ff f8ff 	bl	80015ec <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e03f      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fc:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x44a>
 8002408:	e037      	b.n	800247a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e032      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_RCC_OscConfig+0x4e8>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d028      	beq.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d121      	bne.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d11a      	bne.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800244c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	3b01      	subs	r3, #1
 8002460:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40007000 	.word	0x40007000
 8002488:	40023800 	.word	0x40023800
 800248c:	42470060 	.word	0x42470060

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0cc      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b68      	ldr	r3, [pc, #416]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d90c      	bls.n	80024cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b65      	ldr	r3, [pc, #404]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b8      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a58      	ldr	r2, [pc, #352]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a52      	ldr	r2, [pc, #328]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	494d      	ldr	r1, [pc, #308]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d044      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d119      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d003      	beq.n	800254e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254a:	2b03      	cmp	r3, #3
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b3f      	ldr	r3, [pc, #252]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d109      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e067      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4934      	ldr	r1, [pc, #208]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002580:	f7ff f834 	bl	80015ec <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7ff f830 	bl	80015ec <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e04f      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 020c 	and.w	r2, r3, #12
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1eb      	bne.n	8002588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025b0:	4b25      	ldr	r3, [pc, #148]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d20c      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e032      	b.n	800263e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4916      	ldr	r1, [pc, #88]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002616:	f000 f821 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490a      	ldr	r1, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe ff94 	bl	8001564 <HAL_InitTick>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023c00 	.word	0x40023c00
 800264c:	40023800 	.word	0x40023800
 8002650:	08008508 	.word	0x08008508
 8002654:	20000000 	.word	0x20000000
 8002658:	20000004 	.word	0x20000004

0800265c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b5b0      	push	{r4, r5, r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002662:	2100      	movs	r1, #0
 8002664:	6079      	str	r1, [r7, #4]
 8002666:	2100      	movs	r1, #0
 8002668:	60f9      	str	r1, [r7, #12]
 800266a:	2100      	movs	r1, #0
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800266e:	2100      	movs	r1, #0
 8002670:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002672:	4952      	ldr	r1, [pc, #328]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 8002674:	6889      	ldr	r1, [r1, #8]
 8002676:	f001 010c 	and.w	r1, r1, #12
 800267a:	2908      	cmp	r1, #8
 800267c:	d00d      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x3e>
 800267e:	2908      	cmp	r1, #8
 8002680:	f200 8094 	bhi.w	80027ac <HAL_RCC_GetSysClockFreq+0x150>
 8002684:	2900      	cmp	r1, #0
 8002686:	d002      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x32>
 8002688:	2904      	cmp	r1, #4
 800268a:	d003      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x38>
 800268c:	e08e      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800268e:	4b4c      	ldr	r3, [pc, #304]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002690:	60bb      	str	r3, [r7, #8]
       break;
 8002692:	e08e      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002696:	60bb      	str	r3, [r7, #8]
      break;
 8002698:	e08b      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800269a:	4948      	ldr	r1, [pc, #288]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 800269c:	6849      	ldr	r1, [r1, #4]
 800269e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80026a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a4:	4945      	ldr	r1, [pc, #276]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 80026a6:	6849      	ldr	r1, [r1, #4]
 80026a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80026ac:	2900      	cmp	r1, #0
 80026ae:	d024      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b0:	4942      	ldr	r1, [pc, #264]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 80026b2:	6849      	ldr	r1, [r1, #4]
 80026b4:	0989      	lsrs	r1, r1, #6
 80026b6:	4608      	mov	r0, r1
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80026c0:	f04f 0500 	mov.w	r5, #0
 80026c4:	ea00 0204 	and.w	r2, r0, r4
 80026c8:	ea01 0305 	and.w	r3, r1, r5
 80026cc:	493d      	ldr	r1, [pc, #244]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80026ce:	fb01 f003 	mul.w	r0, r1, r3
 80026d2:	2100      	movs	r1, #0
 80026d4:	fb01 f102 	mul.w	r1, r1, r2
 80026d8:	1844      	adds	r4, r0, r1
 80026da:	493a      	ldr	r1, [pc, #232]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80026dc:	fba2 0101 	umull	r0, r1, r2, r1
 80026e0:	1863      	adds	r3, r4, r1
 80026e2:	4619      	mov	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	f7fe fb48 	bl	8000d80 <__aeabi_uldivmod>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4613      	mov	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e04a      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fa:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	461a      	mov	r2, r3
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	f240 10ff 	movw	r0, #511	; 0x1ff
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	ea02 0400 	and.w	r4, r2, r0
 8002712:	ea03 0501 	and.w	r5, r3, r1
 8002716:	4620      	mov	r0, r4
 8002718:	4629      	mov	r1, r5
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	014b      	lsls	r3, r1, #5
 8002724:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002728:	0142      	lsls	r2, r0, #5
 800272a:	4610      	mov	r0, r2
 800272c:	4619      	mov	r1, r3
 800272e:	1b00      	subs	r0, r0, r4
 8002730:	eb61 0105 	sbc.w	r1, r1, r5
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	018b      	lsls	r3, r1, #6
 800273e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002742:	0182      	lsls	r2, r0, #6
 8002744:	1a12      	subs	r2, r2, r0
 8002746:	eb63 0301 	sbc.w	r3, r3, r1
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	00d9      	lsls	r1, r3, #3
 8002754:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002758:	00d0      	lsls	r0, r2, #3
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	1912      	adds	r2, r2, r4
 8002760:	eb45 0303 	adc.w	r3, r5, r3
 8002764:	f04f 0000 	mov.w	r0, #0
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	0299      	lsls	r1, r3, #10
 800276e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002772:	0290      	lsls	r0, r2, #10
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	f7fe fafc 	bl	8000d80 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_GetSysClockFreq+0x160>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	3301      	adds	r3, #1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a8:	60bb      	str	r3, [r7, #8]
      break;
 80027aa:	e002      	b.n	80027b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80027ae:	60bb      	str	r3, [r7, #8]
      break;
 80027b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b2:	68bb      	ldr	r3, [r7, #8]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bdb0      	pop	{r4, r5, r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	00f42400 	.word	0x00f42400
 80027c4:	017d7840 	.word	0x017d7840

080027c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000000 	.word	0x20000000

080027e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027e4:	f7ff fff0 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0a9b      	lsrs	r3, r3, #10
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4903      	ldr	r1, [pc, #12]	; (8002804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	08008518 	.word	0x08008518

08002808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800280c:	f7ff ffdc 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	0b5b      	lsrs	r3, r3, #13
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4903      	ldr	r1, [pc, #12]	; (800282c <HAL_RCC_GetPCLK2Freq+0x24>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	08008518 	.word	0x08008518

08002830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e041      	b.n	80028c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fe fcd2 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fe8e 	bl	8003590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d001      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e04e      	b.n	8002986 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_TIM_Base_Start_IT+0xc4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d022      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002912:	d01d      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1f      	ldr	r2, [pc, #124]	; (8002998 <HAL_TIM_Base_Start_IT+0xc8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_TIM_Base_Start_IT+0xcc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_TIM_Base_Start_IT+0xdc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d010      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	e007      	b.n	8002984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40010000 	.word	0x40010000
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00
 80029a4:	40010400 	.word	0x40010400
 80029a8:	40014000 	.word	0x40014000
 80029ac:	40001800 	.word	0x40001800

080029b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e041      	b.n	8002a46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f839 	bl	8002a4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f000 fdce 	bl	8003590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
	...

08002a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <HAL_TIM_PWM_Start+0x24>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	e022      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d109      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x3e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e015      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d109      	bne.n	8002abc <HAL_TIM_PWM_Start+0x58>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e008      	b.n	8002ace <HAL_TIM_PWM_Start+0x6a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07c      	b.n	8002bd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <HAL_TIM_PWM_Start+0x82>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ae4:	e013      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d104      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x92>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	e00b      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d104      	bne.n	8002b06 <HAL_TIM_PWM_Start+0xa2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b04:	e003      	b.n	8002b0e <HAL_TIM_PWM_Start+0xaa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 f94e 	bl	8003db8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2d      	ldr	r2, [pc, #180]	; (8002bd8 <HAL_TIM_PWM_Start+0x174>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <HAL_TIM_PWM_Start+0xcc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2c      	ldr	r2, [pc, #176]	; (8002bdc <HAL_TIM_PWM_Start+0x178>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <HAL_TIM_PWM_Start+0xd0>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <HAL_TIM_PWM_Start+0xd2>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a22      	ldr	r2, [pc, #136]	; (8002bd8 <HAL_TIM_PWM_Start+0x174>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d022      	beq.n	8002b9a <HAL_TIM_PWM_Start+0x136>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d01d      	beq.n	8002b9a <HAL_TIM_PWM_Start+0x136>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_TIM_PWM_Start+0x17c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d018      	beq.n	8002b9a <HAL_TIM_PWM_Start+0x136>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <HAL_TIM_PWM_Start+0x180>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_TIM_PWM_Start+0x136>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <HAL_TIM_PWM_Start+0x184>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00e      	beq.n	8002b9a <HAL_TIM_PWM_Start+0x136>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a16      	ldr	r2, [pc, #88]	; (8002bdc <HAL_TIM_PWM_Start+0x178>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d009      	beq.n	8002b9a <HAL_TIM_PWM_Start+0x136>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_TIM_PWM_Start+0x188>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d004      	beq.n	8002b9a <HAL_TIM_PWM_Start+0x136>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a16      	ldr	r2, [pc, #88]	; (8002bf0 <HAL_TIM_PWM_Start+0x18c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d111      	bne.n	8002bbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b06      	cmp	r3, #6
 8002baa:	d010      	beq.n	8002bce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bbc:	e007      	b.n	8002bce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40010000 	.word	0x40010000
 8002bdc:	40010400 	.word	0x40010400
 8002be0:	40000400 	.word	0x40000400
 8002be4:	40000800 	.word	0x40000800
 8002be8:	40000c00 	.word	0x40000c00
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	40001800 	.word	0x40001800

08002bf4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f839 	bl	8002c92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fcac 	bl	8003590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d104      	bne.n	8002cc6 <HAL_TIM_IC_Start_IT+0x1e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e013      	b.n	8002cee <HAL_TIM_IC_Start_IT+0x46>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d104      	bne.n	8002cd6 <HAL_TIM_IC_Start_IT+0x2e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e00b      	b.n	8002cee <HAL_TIM_IC_Start_IT+0x46>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d104      	bne.n	8002ce6 <HAL_TIM_IC_Start_IT+0x3e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	e003      	b.n	8002cee <HAL_TIM_IC_Start_IT+0x46>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_TIM_IC_Start_IT+0x58>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e013      	b.n	8002d28 <HAL_TIM_IC_Start_IT+0x80>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_IC_Start_IT+0x68>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e00b      	b.n	8002d28 <HAL_TIM_IC_Start_IT+0x80>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d104      	bne.n	8002d20 <HAL_TIM_IC_Start_IT+0x78>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e003      	b.n	8002d28 <HAL_TIM_IC_Start_IT+0x80>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d2a:	7bbb      	ldrb	r3, [r7, #14]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d30:	7b7b      	ldrb	r3, [r7, #13]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0cc      	b.n	8002ed4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_IC_Start_IT+0xa2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	e013      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0xca>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_IC_Start_IT+0xb2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	e00b      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0xca>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_IC_Start_IT+0xc2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	e003      	b.n	8002d72 <HAL_TIM_IC_Start_IT+0xca>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_TIM_IC_Start_IT+0xda>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d80:	e013      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x102>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d104      	bne.n	8002d92 <HAL_TIM_IC_Start_IT+0xea>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d90:	e00b      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x102>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_IC_Start_IT+0xfa>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da0:	e003      	b.n	8002daa <HAL_TIM_IC_Start_IT+0x102>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d841      	bhi.n	8002e34 <HAL_TIM_IC_Start_IT+0x18c>
 8002db0:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_TIM_IC_Start_IT+0x110>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002ded 	.word	0x08002ded
 8002dbc:	08002e35 	.word	0x08002e35
 8002dc0:	08002e35 	.word	0x08002e35
 8002dc4:	08002e35 	.word	0x08002e35
 8002dc8:	08002dff 	.word	0x08002dff
 8002dcc:	08002e35 	.word	0x08002e35
 8002dd0:	08002e35 	.word	0x08002e35
 8002dd4:	08002e35 	.word	0x08002e35
 8002dd8:	08002e11 	.word	0x08002e11
 8002ddc:	08002e35 	.word	0x08002e35
 8002de0:	08002e35 	.word	0x08002e35
 8002de4:	08002e35 	.word	0x08002e35
 8002de8:	08002e23 	.word	0x08002e23
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0202 	orr.w	r2, r2, #2
 8002dfa:	60da      	str	r2, [r3, #12]
      break;
 8002dfc:	e01d      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 0204 	orr.w	r2, r2, #4
 8002e0c:	60da      	str	r2, [r3, #12]
      break;
 8002e0e:	e014      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0208 	orr.w	r2, r2, #8
 8002e1e:	60da      	str	r2, [r3, #12]
      break;
 8002e20:	e00b      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0210 	orr.w	r2, r2, #16
 8002e30:	60da      	str	r2, [r3, #12]
      break;
 8002e32:	e002      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
      break;
 8002e38:	bf00      	nop
  }

  if (status == HAL_OK)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d148      	bne.n	8002ed2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 ffb5 	bl	8003db8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a22      	ldr	r2, [pc, #136]	; (8002edc <HAL_TIM_IC_Start_IT+0x234>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d022      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e60:	d01d      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <HAL_TIM_IC_Start_IT+0x238>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_TIM_IC_Start_IT+0x23c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d013      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ee8 <HAL_TIM_IC_Start_IT+0x240>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_TIM_IC_Start_IT+0x244>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_TIM_IC_Start_IT+0x248>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0x1f6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIM_IC_Start_IT+0x24c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d111      	bne.n	8002ec2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d010      	beq.n	8002ed2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec0:	e007      	b.n	8002ed2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40010400 	.word	0x40010400
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40001800 	.word	0x40001800

08002ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d122      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d11b      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0202 	mvn.w	r2, #2
 8002f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f002 fd1a 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8002f40:	e005      	b.n	8002f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fb05 	bl	8003552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fb0c 	bl	8003566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d122      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d11b      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0204 	mvn.w	r2, #4
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f002 fcf0 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fadb 	bl	8003552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fae2 	bl	8003566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d122      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d11b      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0208 	mvn.w	r2, #8
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f002 fcc6 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fab1 	bl	8003552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fab8 	bl	8003566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b10      	cmp	r3, #16
 8003008:	d122      	bne.n	8003050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b10      	cmp	r3, #16
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0210 	mvn.w	r2, #16
 8003020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2208      	movs	r2, #8
 8003026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f002 fc9c 	bl	8005974 <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 fa87 	bl	8003552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 fa8e 	bl	8003566 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d10e      	bne.n	800307c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0201 	mvn.w	r2, #1
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f002 fd28 	bl	8005acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003086:	2b80      	cmp	r3, #128	; 0x80
 8003088:	d10e      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d107      	bne.n	80030a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 ff86 	bl	8003fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d10e      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d107      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa53 	bl	800357a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d107      	bne.n	8003100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0220 	mvn.w	r2, #32
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 ff50 	bl	8003fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003122:	2302      	movs	r3, #2
 8003124:	e088      	b.n	8003238 <HAL_TIM_IC_ConfigChannel+0x130>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6819      	ldr	r1, [r3, #0]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f000 fc74 	bl	8003a30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 020c 	bic.w	r2, r2, #12
 8003156:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6999      	ldr	r1, [r3, #24]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	619a      	str	r2, [r3, #24]
 800316a:	e060      	b.n	800322e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d11c      	bne.n	80031ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f000 fcf8 	bl	8003b76 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003194:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6999      	ldr	r1, [r3, #24]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	021a      	lsls	r2, r3, #8
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	619a      	str	r2, [r3, #24]
 80031aa:	e040      	b.n	800322e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d11b      	bne.n	80031ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f000 fd45 	bl	8003c50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 020c 	bic.w	r2, r2, #12
 80031d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69d9      	ldr	r1, [r3, #28]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	61da      	str	r2, [r3, #28]
 80031e8:	e021      	b.n	800322e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d11c      	bne.n	800322a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f000 fd62 	bl	8003cc8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003212:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69d9      	ldr	r1, [r3, #28]
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	021a      	lsls	r2, r3, #8
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	61da      	str	r2, [r3, #28]
 8003228:	e001      	b.n	800322e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003236:	7dfb      	ldrb	r3, [r7, #23]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800325a:	2302      	movs	r3, #2
 800325c:	e0ae      	b.n	80033bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b0c      	cmp	r3, #12
 800326a:	f200 809f 	bhi.w	80033ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080032a9 	.word	0x080032a9
 8003278:	080033ad 	.word	0x080033ad
 800327c:	080033ad 	.word	0x080033ad
 8003280:	080033ad 	.word	0x080033ad
 8003284:	080032e9 	.word	0x080032e9
 8003288:	080033ad 	.word	0x080033ad
 800328c:	080033ad 	.word	0x080033ad
 8003290:	080033ad 	.word	0x080033ad
 8003294:	0800332b 	.word	0x0800332b
 8003298:	080033ad 	.word	0x080033ad
 800329c:	080033ad 	.word	0x080033ad
 80032a0:	080033ad 	.word	0x080033ad
 80032a4:	0800336b 	.word	0x0800336b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fa0e 	bl	80036d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6999      	ldr	r1, [r3, #24]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	619a      	str	r2, [r3, #24]
      break;
 80032e6:	e064      	b.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa5e 	bl	80037b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	619a      	str	r2, [r3, #24]
      break;
 8003328:	e043      	b.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fab3 	bl	800389c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0208 	orr.w	r2, r2, #8
 8003344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69da      	ldr	r2, [r3, #28]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0204 	bic.w	r2, r2, #4
 8003354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69d9      	ldr	r1, [r3, #28]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
      break;
 8003368:	e023      	b.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fb07 	bl	8003984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69d9      	ldr	r1, [r3, #28]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	021a      	lsls	r2, r3, #8
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	61da      	str	r2, [r3, #28]
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	75fb      	strb	r3, [r7, #23]
      break;
 80033b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_TIM_ConfigClockSource+0x1c>
 80033dc:	2302      	movs	r3, #2
 80033de:	e0b4      	b.n	800354a <HAL_TIM_ConfigClockSource+0x186>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003418:	d03e      	beq.n	8003498 <HAL_TIM_ConfigClockSource+0xd4>
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	f200 8087 	bhi.w	8003530 <HAL_TIM_ConfigClockSource+0x16c>
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	f000 8086 	beq.w	8003536 <HAL_TIM_ConfigClockSource+0x172>
 800342a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342e:	d87f      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b70      	cmp	r3, #112	; 0x70
 8003432:	d01a      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xa6>
 8003434:	2b70      	cmp	r3, #112	; 0x70
 8003436:	d87b      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b60      	cmp	r3, #96	; 0x60
 800343a:	d050      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x11a>
 800343c:	2b60      	cmp	r3, #96	; 0x60
 800343e:	d877      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b50      	cmp	r3, #80	; 0x50
 8003442:	d03c      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xfa>
 8003444:	2b50      	cmp	r3, #80	; 0x50
 8003446:	d873      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d058      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x13a>
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d86f      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b30      	cmp	r3, #48	; 0x30
 8003452:	d064      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x15a>
 8003454:	2b30      	cmp	r3, #48	; 0x30
 8003456:	d86b      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d060      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x15a>
 800345c:	2b20      	cmp	r3, #32
 800345e:	d867      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05c      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x15a>
 8003464:	2b10      	cmp	r3, #16
 8003466:	d05a      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	e062      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f000 fc7d 	bl	8003d78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800348c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	609a      	str	r2, [r3, #8]
      break;
 8003496:	e04f      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6899      	ldr	r1, [r3, #8]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f000 fc66 	bl	8003d78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ba:	609a      	str	r2, [r3, #8]
      break;
 80034bc:	e03c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f000 fb24 	bl	8003b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2150      	movs	r1, #80	; 0x50
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fc33 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 80034dc:	e02c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f000 fb80 	bl	8003bf0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2160      	movs	r1, #96	; 0x60
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fc23 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 80034fc:	e01c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	461a      	mov	r2, r3
 800350c:	f000 fb04 	bl	8003b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2140      	movs	r1, #64	; 0x40
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fc13 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 800351c:	e00c      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f000 fc0a 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 800352e:	e003      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e000      	b.n	8003538 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a40      	ldr	r2, [pc, #256]	; (80036a4 <TIM_Base_SetConfig+0x114>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d013      	beq.n	80035d0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ae:	d00f      	beq.n	80035d0 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <TIM_Base_SetConfig+0x118>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00b      	beq.n	80035d0 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3c      	ldr	r2, [pc, #240]	; (80036ac <TIM_Base_SetConfig+0x11c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d007      	beq.n	80035d0 <TIM_Base_SetConfig+0x40>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a3b      	ldr	r2, [pc, #236]	; (80036b0 <TIM_Base_SetConfig+0x120>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_Base_SetConfig+0x40>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a3a      	ldr	r2, [pc, #232]	; (80036b4 <TIM_Base_SetConfig+0x124>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d108      	bne.n	80035e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2f      	ldr	r2, [pc, #188]	; (80036a4 <TIM_Base_SetConfig+0x114>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02b      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f0:	d027      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <TIM_Base_SetConfig+0x118>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d023      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2b      	ldr	r2, [pc, #172]	; (80036ac <TIM_Base_SetConfig+0x11c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01f      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <TIM_Base_SetConfig+0x120>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01b      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <TIM_Base_SetConfig+0x124>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d017      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a28      	ldr	r2, [pc, #160]	; (80036b8 <TIM_Base_SetConfig+0x128>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a27      	ldr	r2, [pc, #156]	; (80036bc <TIM_Base_SetConfig+0x12c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00f      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <TIM_Base_SetConfig+0x130>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00b      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a25      	ldr	r2, [pc, #148]	; (80036c4 <TIM_Base_SetConfig+0x134>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <TIM_Base_SetConfig+0x138>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a23      	ldr	r2, [pc, #140]	; (80036cc <TIM_Base_SetConfig+0x13c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <TIM_Base_SetConfig+0x114>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_Base_SetConfig+0xf8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <TIM_Base_SetConfig+0x124>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d103      	bne.n	8003690 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	615a      	str	r2, [r3, #20]
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40010400 	.word	0x40010400
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800
 80036c4:	40001800 	.word	0x40001800
 80036c8:	40001c00 	.word	0x40001c00
 80036cc:	40002000 	.word	0x40002000

080036d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f023 0302 	bic.w	r3, r3, #2
 8003718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a20      	ldr	r2, [pc, #128]	; (80037a8 <TIM_OC1_SetConfig+0xd8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_OC1_SetConfig+0x64>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a1f      	ldr	r2, [pc, #124]	; (80037ac <TIM_OC1_SetConfig+0xdc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d10c      	bne.n	800374e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f023 0308 	bic.w	r3, r3, #8
 800373a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0304 	bic.w	r3, r3, #4
 800374c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a15      	ldr	r2, [pc, #84]	; (80037a8 <TIM_OC1_SetConfig+0xd8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_OC1_SetConfig+0x8e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a14      	ldr	r2, [pc, #80]	; (80037ac <TIM_OC1_SetConfig+0xdc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d111      	bne.n	8003782 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800376c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40010400 	.word	0x40010400

080037b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0210 	bic.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f023 0320 	bic.w	r3, r3, #32
 80037fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a22      	ldr	r2, [pc, #136]	; (8003894 <TIM_OC2_SetConfig+0xe4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC2_SetConfig+0x68>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a21      	ldr	r2, [pc, #132]	; (8003898 <TIM_OC2_SetConfig+0xe8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10d      	bne.n	8003834 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003832:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a17      	ldr	r2, [pc, #92]	; (8003894 <TIM_OC2_SetConfig+0xe4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d003      	beq.n	8003844 <TIM_OC2_SetConfig+0x94>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a16      	ldr	r2, [pc, #88]	; (8003898 <TIM_OC2_SetConfig+0xe8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d113      	bne.n	800386c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800384a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40010000 	.word	0x40010000
 8003898:	40010400 	.word	0x40010400

0800389c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a21      	ldr	r2, [pc, #132]	; (800397c <TIM_OC3_SetConfig+0xe0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_OC3_SetConfig+0x66>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a20      	ldr	r2, [pc, #128]	; (8003980 <TIM_OC3_SetConfig+0xe4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d10d      	bne.n	800391e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800391c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a16      	ldr	r2, [pc, #88]	; (800397c <TIM_OC3_SetConfig+0xe0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_OC3_SetConfig+0x92>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a15      	ldr	r2, [pc, #84]	; (8003980 <TIM_OC3_SetConfig+0xe4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d113      	bne.n	8003956 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800393c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40010000 	.word	0x40010000
 8003980:	40010400 	.word	0x40010400

08003984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	031b      	lsls	r3, r3, #12
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <TIM_OC4_SetConfig+0xa4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC4_SetConfig+0x68>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a11      	ldr	r2, [pc, #68]	; (8003a2c <TIM_OC4_SetConfig+0xa8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d109      	bne.n	8003a00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	019b      	lsls	r3, r3, #6
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40010400 	.word	0x40010400

08003a30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4a28      	ldr	r2, [pc, #160]	; (8003afc <TIM_TI1_SetConfig+0xcc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01b      	beq.n	8003a96 <TIM_TI1_SetConfig+0x66>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d017      	beq.n	8003a96 <TIM_TI1_SetConfig+0x66>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a25      	ldr	r2, [pc, #148]	; (8003b00 <TIM_TI1_SetConfig+0xd0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <TIM_TI1_SetConfig+0x66>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a24      	ldr	r2, [pc, #144]	; (8003b04 <TIM_TI1_SetConfig+0xd4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00f      	beq.n	8003a96 <TIM_TI1_SetConfig+0x66>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a23      	ldr	r2, [pc, #140]	; (8003b08 <TIM_TI1_SetConfig+0xd8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_TI1_SetConfig+0x66>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <TIM_TI1_SetConfig+0xdc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_TI1_SetConfig+0x66>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a21      	ldr	r2, [pc, #132]	; (8003b10 <TIM_TI1_SetConfig+0xe0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_TI1_SetConfig+0x66>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a20      	ldr	r2, [pc, #128]	; (8003b14 <TIM_TI1_SetConfig+0xe4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <TIM_TI1_SetConfig+0x6a>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <TIM_TI1_SetConfig+0x6c>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e003      	b.n	8003aba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f023 030a 	bic.w	r3, r3, #10
 8003ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f003 030a 	and.w	r3, r3, #10
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40010400 	.word	0x40010400
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40001800 	.word	0x40001800

08003b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0201 	bic.w	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f023 030a 	bic.w	r3, r3, #10
 8003b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b087      	sub	sp, #28
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f023 0210 	bic.w	r2, r3, #16
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	031b      	lsls	r3, r3, #12
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	621a      	str	r2, [r3, #32]
}
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 0210 	bic.w	r2, r3, #16
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	031b      	lsls	r3, r3, #12
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	621a      	str	r2, [r3, #32]
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 0303 	bic.w	r3, r3, #3
 8003c7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003ca0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	031b      	lsls	r3, r3, #12
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	031b      	lsls	r3, r3, #12
 8003d20:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	621a      	str	r2, [r3, #32]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f043 0307 	orr.w	r3, r3, #7
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	609a      	str	r2, [r3, #8]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	021a      	lsls	r2, r3, #8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	609a      	str	r2, [r3, #8]
}
 8003dac:	bf00      	nop
 8003dae:	371c      	adds	r7, #28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2201      	movs	r2, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1a      	ldr	r2, [r3, #32]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	401a      	ands	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	431a      	orrs	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e05a      	b.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d01d      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40010400 	.word	0x40010400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40001800 	.word	0x40001800

08003efc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e03d      	b.n	8003f94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e03f      	b.n	800405a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd f9e0 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800400a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fcdb 	bl	80049c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695a      	ldr	r2, [r3, #20]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	4613      	mov	r3, r2
 800406e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b20      	cmp	r3, #32
 800407a:	d11d      	bne.n	80040b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <HAL_UART_Receive_IT+0x26>
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e016      	b.n	80040ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_UART_Receive_IT+0x38>
 8004096:	2302      	movs	r3, #2
 8004098:	e00f      	b.n	80040ba <HAL_UART_Receive_IT+0x58>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fab6 	bl	8004620 <UART_Start_Receive_IT>
 80040b4:	4603      	mov	r3, r0
 80040b6:	e000      	b.n	80040ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80040b8:	2302      	movs	r3, #2
  }
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0ba      	sub	sp, #232	; 0xe8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_UART_IRQHandler+0x66>
 8004116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 fb95 	bl	8004852 <UART_Receive_IT>
      return;
 8004128:	e256      	b.n	80045d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800412a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80de 	beq.w	80042f0 <HAL_UART_IRQHandler+0x22c>
 8004134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004144:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80d1 	beq.w	80042f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800414e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_UART_IRQHandler+0xae>
 800415a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f043 0201 	orr.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_UART_IRQHandler+0xd2>
 800417e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f043 0202 	orr.w	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_UART_IRQHandler+0xf6>
 80041a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0204 	orr.w	r2, r3, #4
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <HAL_UART_IRQHandler+0x126>
 80041c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0208 	orr.w	r2, r3, #8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 81ed 	beq.w	80045ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_UART_IRQHandler+0x14e>
 8004200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb20 	bl	8004852 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <HAL_UART_IRQHandler+0x17a>
 8004236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800423a:	2b00      	cmp	r3, #0
 800423c:	d04f      	beq.n	80042de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fa28 	bl	8004694 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d141      	bne.n	80042d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3314      	adds	r3, #20
 8004258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800426c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3314      	adds	r3, #20
 800427a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800427e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800428a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1d9      	bne.n	8004252 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	4a7d      	ldr	r2, [pc, #500]	; (80044a0 <HAL_UART_IRQHandler+0x3dc>)
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fb27 	bl	8001906 <HAL_DMA_Abort_IT>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c8:	4610      	mov	r0, r2
 80042ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042cc:	e00e      	b.n	80042ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f990 	bl	80045f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	e00a      	b.n	80042ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f98c 	bl	80045f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042dc:	e006      	b.n	80042ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f988 	bl	80045f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80042ea:	e170      	b.n	80045ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ec:	bf00      	nop
    return;
 80042ee:	e16e      	b.n	80045ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 814a 	bne.w	800458e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8143 	beq.w	800458e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 813c 	beq.w	800458e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	f040 80b4 	bne.w	80044a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004348:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8140 	beq.w	80045d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800435a:	429a      	cmp	r2, r3
 800435c:	f080 8139 	bcs.w	80045d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004366:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004372:	f000 8088 	beq.w	8004486 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800438c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1d9      	bne.n	8004376 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3314      	adds	r3, #20
 80043c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3314      	adds	r3, #20
 80043e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e1      	bne.n	80043c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800440e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004414:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004422:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004424:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004428:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e3      	bne.n	80043fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004468:	65ba      	str	r2, [r7, #88]	; 0x58
 800446a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800446e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e3      	bne.n	8004444 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd f9d0 	bl	8001826 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800448e:	b29b      	uxth	r3, r3
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8b6 	bl	8004608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800449c:	e099      	b.n	80045d2 <HAL_UART_IRQHandler+0x50e>
 800449e:	bf00      	nop
 80044a0:	0800475b 	.word	0x0800475b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 808b 	beq.w	80045d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80044c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8086 	beq.w	80045d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044ee:	647a      	str	r2, [r7, #68]	; 0x44
 80044f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e3      	bne.n	80044ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3314      	adds	r3, #20
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	623b      	str	r3, [r7, #32]
   return(result);
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3314      	adds	r3, #20
 8004522:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004526:	633a      	str	r2, [r7, #48]	; 0x30
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e3      	bne.n	8004502 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60fb      	str	r3, [r7, #12]
   return(result);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0310 	bic.w	r3, r3, #16
 800455e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800456c:	61fa      	str	r2, [r7, #28]
 800456e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	69b9      	ldr	r1, [r7, #24]
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	617b      	str	r3, [r7, #20]
   return(result);
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e3      	bne.n	8004548 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004584:	4619      	mov	r1, r3
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f83e 	bl	8004608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800458c:	e023      	b.n	80045d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d009      	beq.n	80045ae <HAL_UART_IRQHandler+0x4ea>
 800459a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8eb 	bl	8004782 <UART_Transmit_IT>
    return;
 80045ac:	e014      	b.n	80045d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00e      	beq.n	80045d8 <HAL_UART_IRQHandler+0x514>
 80045ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f92b 	bl	8004822 <UART_EndTransmit_IT>
    return;
 80045cc:	e004      	b.n	80045d8 <HAL_UART_IRQHandler+0x514>
    return;
 80045ce:	bf00      	nop
 80045d0:	e002      	b.n	80045d8 <HAL_UART_IRQHandler+0x514>
      return;
 80045d2:	bf00      	nop
 80045d4:	e000      	b.n	80045d8 <HAL_UART_IRQHandler+0x514>
      return;
 80045d6:	bf00      	nop
  }
}
 80045d8:	37e8      	adds	r7, #232	; 0xe8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop

080045e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	88fa      	ldrh	r2, [r7, #6]
 8004638:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2222      	movs	r2, #34	; 0x22
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004664:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0220 	orr.w	r2, r2, #32
 8004684:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004694:	b480      	push	{r7}
 8004696:	b095      	sub	sp, #84	; 0x54
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046bc:	643a      	str	r2, [r7, #64]	; 0x40
 80046be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e5      	bne.n	80046d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	2b01      	cmp	r3, #1
 800470a:	d119      	bne.n	8004740 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	60bb      	str	r3, [r7, #8]
   return(result);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f023 0310 	bic.w	r3, r3, #16
 8004722:	647b      	str	r3, [r7, #68]	; 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800472c:	61ba      	str	r2, [r7, #24]
 800472e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004730:	6979      	ldr	r1, [r7, #20]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	e841 2300 	strex	r3, r2, [r1]
 8004738:	613b      	str	r3, [r7, #16]
   return(result);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1e5      	bne.n	800470c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800474e:	bf00      	nop
 8004750:	3754      	adds	r7, #84	; 0x54
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff ff3d 	bl	80045f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b21      	cmp	r3, #33	; 0x21
 8004794:	d13e      	bne.n	8004814 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479e:	d114      	bne.n	80047ca <UART_Transmit_IT+0x48>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d110      	bne.n	80047ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	1c9a      	adds	r2, r3, #2
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	621a      	str	r2, [r3, #32]
 80047c8:	e008      	b.n	80047dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	1c59      	adds	r1, r3, #1
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6211      	str	r1, [r2, #32]
 80047d4:	781a      	ldrb	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	4619      	mov	r1, r3
 80047ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10f      	bne.n	8004810 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004814:	2302      	movs	r3, #2
  }
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004838:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fecc 	bl	80045e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b08c      	sub	sp, #48	; 0x30
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b22      	cmp	r3, #34	; 0x22
 8004864:	f040 80ab 	bne.w	80049be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004870:	d117      	bne.n	80048a2 <UART_Receive_IT+0x50>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d113      	bne.n	80048a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	b29b      	uxth	r3, r3
 800488c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004890:	b29a      	uxth	r2, r3
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	1c9a      	adds	r2, r3, #2
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
 80048a0:	e026      	b.n	80048f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b4:	d007      	beq.n	80048c6 <UART_Receive_IT+0x74>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <UART_Receive_IT+0x82>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e008      	b.n	80048e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4619      	mov	r1, r3
 80048fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004900:	2b00      	cmp	r3, #0
 8004902:	d15a      	bne.n	80049ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0220 	bic.w	r2, r2, #32
 8004912:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004922:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	2b01      	cmp	r3, #1
 8004942:	d135      	bne.n	80049b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	613b      	str	r3, [r7, #16]
   return(result);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f023 0310 	bic.w	r3, r3, #16
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496a:	623a      	str	r2, [r7, #32]
 800496c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	69f9      	ldr	r1, [r7, #28]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	61bb      	str	r3, [r7, #24]
   return(result);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e5      	bne.n	800494a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0310 	and.w	r3, r3, #16
 8004988:	2b10      	cmp	r3, #16
 800498a:	d10a      	bne.n	80049a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7ff fe2d 	bl	8004608 <HAL_UARTEx_RxEventCallback>
 80049ae:	e002      	b.n	80049b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f9f9 	bl	8004da8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	e002      	b.n	80049c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3730      	adds	r7, #48	; 0x30
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049cc:	b09f      	sub	sp, #124	; 0x7c
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049de:	68d9      	ldr	r1, [r3, #12]
 80049e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	ea40 0301 	orr.w	r3, r0, r1
 80049e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a0c:	f021 010c 	bic.w	r1, r1, #12
 8004a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a16:	430b      	orrs	r3, r1
 8004a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a26:	6999      	ldr	r1, [r3, #24]
 8004a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	ea40 0301 	orr.w	r3, r0, r1
 8004a30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4bc5      	ldr	r3, [pc, #788]	; (8004d4c <UART_SetConfig+0x384>)
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d004      	beq.n	8004a46 <UART_SetConfig+0x7e>
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4bc3      	ldr	r3, [pc, #780]	; (8004d50 <UART_SetConfig+0x388>)
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d103      	bne.n	8004a4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a46:	f7fd fedf 	bl	8002808 <HAL_RCC_GetPCLK2Freq>
 8004a4a:	6778      	str	r0, [r7, #116]	; 0x74
 8004a4c:	e002      	b.n	8004a54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a4e:	f7fd fec7 	bl	80027e0 <HAL_RCC_GetPCLK1Freq>
 8004a52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	f040 80b6 	bne.w	8004bcc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a62:	461c      	mov	r4, r3
 8004a64:	f04f 0500 	mov.w	r5, #0
 8004a68:	4622      	mov	r2, r4
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	6439      	str	r1, [r7, #64]	; 0x40
 8004a70:	415b      	adcs	r3, r3
 8004a72:	647b      	str	r3, [r7, #68]	; 0x44
 8004a74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a78:	1912      	adds	r2, r2, r4
 8004a7a:	eb45 0303 	adc.w	r3, r5, r3
 8004a7e:	f04f 0000 	mov.w	r0, #0
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	00d9      	lsls	r1, r3, #3
 8004a88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a8c:	00d0      	lsls	r0, r2, #3
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	1911      	adds	r1, r2, r4
 8004a94:	6639      	str	r1, [r7, #96]	; 0x60
 8004a96:	416b      	adcs	r3, r5
 8004a98:	667b      	str	r3, [r7, #100]	; 0x64
 8004a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	1891      	adds	r1, r2, r2
 8004aa6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004aa8:	415b      	adcs	r3, r3
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ab0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004ab4:	f7fc f964 	bl	8000d80 <__aeabi_uldivmod>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4ba5      	ldr	r3, [pc, #660]	; (8004d54 <UART_SetConfig+0x38c>)
 8004abe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	011e      	lsls	r6, r3, #4
 8004ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac8:	461c      	mov	r4, r3
 8004aca:	f04f 0500 	mov.w	r5, #0
 8004ace:	4622      	mov	r2, r4
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	1891      	adds	r1, r2, r2
 8004ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8004ad6:	415b      	adcs	r3, r3
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ada:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004ade:	1912      	adds	r2, r2, r4
 8004ae0:	eb45 0303 	adc.w	r3, r5, r3
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	00d9      	lsls	r1, r3, #3
 8004aee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004af2:	00d0      	lsls	r0, r2, #3
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	1911      	adds	r1, r2, r4
 8004afa:	65b9      	str	r1, [r7, #88]	; 0x58
 8004afc:	416b      	adcs	r3, r5
 8004afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	461a      	mov	r2, r3
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	1891      	adds	r1, r2, r2
 8004b0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004b1a:	f7fc f931 	bl	8000d80 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4b8c      	ldr	r3, [pc, #560]	; (8004d54 <UART_SetConfig+0x38c>)
 8004b24:	fba3 1302 	umull	r1, r3, r3, r2
 8004b28:	095b      	lsrs	r3, r3, #5
 8004b2a:	2164      	movs	r1, #100	; 0x64
 8004b2c:	fb01 f303 	mul.w	r3, r1, r3
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	3332      	adds	r3, #50	; 0x32
 8004b36:	4a87      	ldr	r2, [pc, #540]	; (8004d54 <UART_SetConfig+0x38c>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b44:	441e      	add	r6, r3
 8004b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f04f 0100 	mov.w	r1, #0
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	1894      	adds	r4, r2, r2
 8004b54:	623c      	str	r4, [r7, #32]
 8004b56:	415b      	adcs	r3, r3
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b5e:	1812      	adds	r2, r2, r0
 8004b60:	eb41 0303 	adc.w	r3, r1, r3
 8004b64:	f04f 0400 	mov.w	r4, #0
 8004b68:	f04f 0500 	mov.w	r5, #0
 8004b6c:	00dd      	lsls	r5, r3, #3
 8004b6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b72:	00d4      	lsls	r4, r2, #3
 8004b74:	4622      	mov	r2, r4
 8004b76:	462b      	mov	r3, r5
 8004b78:	1814      	adds	r4, r2, r0
 8004b7a:	653c      	str	r4, [r7, #80]	; 0x50
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	461a      	mov	r2, r3
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	1891      	adds	r1, r2, r2
 8004b8c:	61b9      	str	r1, [r7, #24]
 8004b8e:	415b      	adcs	r3, r3
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b9a:	f7fc f8f1 	bl	8000d80 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <UART_SetConfig+0x38c>)
 8004ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	2164      	movs	r1, #100	; 0x64
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	3332      	adds	r3, #50	; 0x32
 8004bb6:	4a67      	ldr	r2, [pc, #412]	; (8004d54 <UART_SetConfig+0x38c>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	095b      	lsrs	r3, r3, #5
 8004bbe:	f003 0207 	and.w	r2, r3, #7
 8004bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4432      	add	r2, r6
 8004bc8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bca:	e0b9      	b.n	8004d40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bce:	461c      	mov	r4, r3
 8004bd0:	f04f 0500 	mov.w	r5, #0
 8004bd4:	4622      	mov	r2, r4
 8004bd6:	462b      	mov	r3, r5
 8004bd8:	1891      	adds	r1, r2, r2
 8004bda:	6139      	str	r1, [r7, #16]
 8004bdc:	415b      	adcs	r3, r3
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004be4:	1912      	adds	r2, r2, r4
 8004be6:	eb45 0303 	adc.w	r3, r5, r3
 8004bea:	f04f 0000 	mov.w	r0, #0
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	00d9      	lsls	r1, r3, #3
 8004bf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bf8:	00d0      	lsls	r0, r2, #3
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	eb12 0804 	adds.w	r8, r2, r4
 8004c02:	eb43 0905 	adc.w	r9, r3, r5
 8004c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	008b      	lsls	r3, r1, #2
 8004c1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c1e:	0082      	lsls	r2, r0, #2
 8004c20:	4640      	mov	r0, r8
 8004c22:	4649      	mov	r1, r9
 8004c24:	f7fc f8ac 	bl	8000d80 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b49      	ldr	r3, [pc, #292]	; (8004d54 <UART_SetConfig+0x38c>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	011e      	lsls	r6, r3, #4
 8004c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f04f 0100 	mov.w	r1, #0
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	1894      	adds	r4, r2, r2
 8004c44:	60bc      	str	r4, [r7, #8]
 8004c46:	415b      	adcs	r3, r3
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c4e:	1812      	adds	r2, r2, r0
 8004c50:	eb41 0303 	adc.w	r3, r1, r3
 8004c54:	f04f 0400 	mov.w	r4, #0
 8004c58:	f04f 0500 	mov.w	r5, #0
 8004c5c:	00dd      	lsls	r5, r3, #3
 8004c5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c62:	00d4      	lsls	r4, r2, #3
 8004c64:	4622      	mov	r2, r4
 8004c66:	462b      	mov	r3, r5
 8004c68:	1814      	adds	r4, r2, r0
 8004c6a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	008b      	lsls	r3, r1, #2
 8004c84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c88:	0082      	lsls	r2, r0, #2
 8004c8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c8e:	f7fc f877 	bl	8000d80 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <UART_SetConfig+0x38c>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	; 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	3332      	adds	r3, #50	; 0x32
 8004caa:	4a2a      	ldr	r2, [pc, #168]	; (8004d54 <UART_SetConfig+0x38c>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb6:	441e      	add	r6, r3
 8004cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	1894      	adds	r4, r2, r2
 8004cc6:	603c      	str	r4, [r7, #0]
 8004cc8:	415b      	adcs	r3, r3
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd0:	1812      	adds	r2, r2, r0
 8004cd2:	eb41 0303 	adc.w	r3, r1, r3
 8004cd6:	f04f 0400 	mov.w	r4, #0
 8004cda:	f04f 0500 	mov.w	r5, #0
 8004cde:	00dd      	lsls	r5, r3, #3
 8004ce0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ce4:	00d4      	lsls	r4, r2, #3
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	462b      	mov	r3, r5
 8004cea:	eb12 0a00 	adds.w	sl, r2, r0
 8004cee:	eb43 0b01 	adc.w	fp, r3, r1
 8004cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f04f 0100 	mov.w	r1, #0
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	008b      	lsls	r3, r1, #2
 8004d06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d0a:	0082      	lsls	r2, r0, #2
 8004d0c:	4650      	mov	r0, sl
 8004d0e:	4659      	mov	r1, fp
 8004d10:	f7fc f836 	bl	8000d80 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <UART_SetConfig+0x38c>)
 8004d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	2164      	movs	r1, #100	; 0x64
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	3332      	adds	r3, #50	; 0x32
 8004d2c:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <UART_SetConfig+0x38c>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	f003 020f 	and.w	r2, r3, #15
 8004d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4432      	add	r2, r6
 8004d3e:	609a      	str	r2, [r3, #8]
}
 8004d40:	bf00      	nop
 8004d42:	377c      	adds	r7, #124	; 0x7c
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40011000 	.word	0x40011000
 8004d50:	40011400 	.word	0x40011400
 8004d54:	51eb851f 	.word	0x51eb851f

08004d58 <main>:
extern u8_t g_by_run_to_des;


float di;
int main(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
	Robot_pose_t pose;

	pose.coordinate.x = 100;
 8004d5e:	4b0e      	ldr	r3, [pc, #56]	; (8004d98 <main+0x40>)
 8004d60:	607b      	str	r3, [r7, #4]
	pose.coordinate.y = -100;
 8004d62:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <main+0x44>)
 8004d64:	60bb      	str	r3, [r7, #8]

	DcControlSetup();
 8004d66:	f000 fc71 	bl	800564c <DcControlSetup>
//	bufInit(&serialQueueRx);
//	if(!MPU6050_Init())
//	{
//		return 0;
//	}
	HAL_UART_Receive_IT(&huart1, pbyDataReceived, 1);
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	490c      	ldr	r1, [pc, #48]	; (8004da0 <main+0x48>)
 8004d6e:	480d      	ldr	r0, [pc, #52]	; (8004da4 <main+0x4c>)
 8004d70:	f7ff f977 	bl	8004062 <HAL_UART_Receive_IT>

	robot_forward_to_position(pose);
 8004d74:	edd7 6a01 	vldr	s13, [r7, #4]
 8004d78:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d80:	eeb0 0a66 	vmov.f32	s0, s13
 8004d84:	eef0 0a47 	vmov.f32	s1, s14
 8004d88:	eeb0 1a67 	vmov.f32	s2, s15
 8004d8c:	f001 fb52 	bl	8006434 <robot_forward_to_position>

	while (1)
	{
		checkRobotStopCondition();
 8004d90:	f000 f834 	bl	8004dfc <checkRobotStopCondition>
 8004d94:	e7fc      	b.n	8004d90 <main+0x38>
 8004d96:	bf00      	nop
 8004d98:	42c80000 	.word	0x42c80000
 8004d9c:	c2c80000 	.word	0xc2c80000
 8004da0:	200002dc 	.word	0x200002dc
 8004da4:	20000230 	.word	0x20000230

08004da8 <HAL_UART_RxCpltCallback>:
	}

}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, pbyDataReceived, 1);
 8004db0:	2201      	movs	r2, #1
 8004db2:	4906      	ldr	r1, [pc, #24]	; (8004dcc <HAL_UART_RxCpltCallback+0x24>)
 8004db4:	4806      	ldr	r0, [pc, #24]	; (8004dd0 <HAL_UART_RxCpltCallback+0x28>)
 8004db6:	f7ff f954 	bl	8004062 <HAL_UART_Receive_IT>

	//push data into FIFO buffer
	bufEnDat(&serialQueueRx, (u8_p) pbyDataReceived, 1);
 8004dba:	2201      	movs	r2, #1
 8004dbc:	4903      	ldr	r1, [pc, #12]	; (8004dcc <HAL_UART_RxCpltCallback+0x24>)
 8004dbe:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <HAL_UART_RxCpltCallback+0x2c>)
 8004dc0:	f001 fcda 	bl	8006778 <bufEnDat>
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	200002dc 	.word	0x200002dc
 8004dd0:	20000230 	.word	0x20000230
 8004dd4:	20000094 	.word	0x20000094

08004dd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004ddc:	2020      	movs	r0, #32
 8004dde:	f7fc ff83 	bl	8001ce8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	4603      	mov	r3, r0
 8004dee:	80fb      	strh	r3, [r7, #6]
	MPU6050_dmpDataReady();
 8004df0:	f000 f926 	bl	8005040 <MPU6050_dmpDataReady>
}
 8004df4:	bf00      	nop
 8004df6:	3708      	adds	r7, #8
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <checkRobotStopCondition>:

void_t checkRobotStopCondition(void_t)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	ed2d 8b02 	vpush	{d8}
 8004e02:	b092      	sub	sp, #72	; 0x48
 8004e04:	af00      	add	r7, sp, #0
//				robot_rotateright();
//			}
//		}
//	}

	robot_stop();
 8004e06:	f001 f867 	bl	8005ed8 <robot_stop>

//	pfnc start = get_robot_pose;
//	pfnc des = get_robot_despose;

	Point_t start_pos = get_robot_pose().coordinate;
 8004e0a:	f001 faf3 	bl	80063f4 <get_robot_pose>
 8004e0e:	eef0 6a40 	vmov.f32	s13, s0
 8004e12:	eeb0 7a60 	vmov.f32	s14, s1
 8004e16:	eef0 7a41 	vmov.f32	s15, s2
 8004e1a:	edc7 6a05 	vstr	s13, [r7, #20]
 8004e1e:	ed87 7a06 	vstr	s14, [r7, #24]
 8004e22:	edc7 7a07 	vstr	s15, [r7, #28]
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	f107 0214 	add.w	r2, r7, #20
 8004e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e32:	e883 0003 	stmia.w	r3, {r0, r1}
	Point_t des_pos = get_robot_despose().coordinate;
 8004e36:	f001 fbed 	bl	8006614 <get_robot_despose>
 8004e3a:	eef0 6a40 	vmov.f32	s13, s0
 8004e3e:	eeb0 7a60 	vmov.f32	s14, s1
 8004e42:	eef0 7a41 	vmov.f32	s15, s2
 8004e46:	edc7 6a08 	vstr	s13, [r7, #32]
 8004e4a:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 8004e4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8004e52:	1d3b      	adds	r3, r7, #4
 8004e54:	f107 0220 	add.w	r2, r7, #32
 8004e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e5c:	e883 0003 	stmia.w	r3, {r0, r1}

	if(get_robot_pose().theta > cal_direction(start_pos, des_pos) + 2)
 8004e60:	f001 fac8 	bl	80063f4 <get_robot_pose>
 8004e64:	eef0 6a40 	vmov.f32	s13, s0
 8004e68:	eeb0 7a60 	vmov.f32	s14, s1
 8004e6c:	eef0 7a41 	vmov.f32	s15, s2
 8004e70:	edc7 6a0b 	vstr	s13, [r7, #44]	; 0x2c
 8004e74:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
 8004e78:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8004e7c:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
 8004e80:	ed97 6a01 	vldr	s12, [r7, #4]
 8004e84:	edd7 6a02 	vldr	s13, [r7, #8]
 8004e88:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e90:	eeb0 1a46 	vmov.f32	s2, s12
 8004e94:	eef0 1a66 	vmov.f32	s3, s13
 8004e98:	eeb0 0a47 	vmov.f32	s0, s14
 8004e9c:	eef0 0a67 	vmov.f32	s1, s15
 8004ea0:	f001 fb36 	bl	8006510 <cal_direction>
 8004ea4:	eef0 7a40 	vmov.f32	s15, s0
 8004ea8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004eb0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb8:	dd02      	ble.n	8004ec0 <checkRobotStopCondition+0xc4>
	{
		robot_rotateright();
 8004eba:	f001 f82f 	bl	8005f1c <robot_rotateright>
 8004ebe:	e02e      	b.n	8004f1e <checkRobotStopCondition+0x122>
	}
	else if (get_robot_pose().theta > cal_direction(start_pos, des_pos) - 2)
 8004ec0:	f001 fa98 	bl	80063f4 <get_robot_pose>
 8004ec4:	eef0 6a40 	vmov.f32	s13, s0
 8004ec8:	eeb0 7a60 	vmov.f32	s14, s1
 8004ecc:	eef0 7a41 	vmov.f32	s15, s2
 8004ed0:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
 8004ed4:	ed87 7a0f 	vstr	s14, [r7, #60]	; 0x3c
 8004ed8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8004edc:	ed97 8a10 	vldr	s16, [r7, #64]	; 0x40
 8004ee0:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ee4:	edd7 6a02 	vldr	s13, [r7, #8]
 8004ee8:	ed97 7a03 	vldr	s14, [r7, #12]
 8004eec:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ef0:	eeb0 1a46 	vmov.f32	s2, s12
 8004ef4:	eef0 1a66 	vmov.f32	s3, s13
 8004ef8:	eeb0 0a47 	vmov.f32	s0, s14
 8004efc:	eef0 0a67 	vmov.f32	s1, s15
 8004f00:	f001 fb06 	bl	8006510 <cal_direction>
 8004f04:	eef0 7a40 	vmov.f32	s15, s0
 8004f08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004f0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f10:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f18:	dd01      	ble.n	8004f1e <checkRobotStopCondition+0x122>
	{
		robot_rotateleft();
 8004f1a:	f000 ffed 	bl	8005ef8 <robot_rotateleft>
	}

	float dis = cal_distance(start_pos, des_pos);
 8004f1e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004f22:	edd7 6a02 	vldr	s13, [r7, #8]
 8004f26:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f2e:	eeb0 1a46 	vmov.f32	s2, s12
 8004f32:	eef0 1a66 	vmov.f32	s3, s13
 8004f36:	eeb0 0a47 	vmov.f32	s0, s14
 8004f3a:	eef0 0a67 	vmov.f32	s1, s15
 8004f3e:	f001 fa9f 	bl	8006480 <cal_distance>
 8004f42:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
	if(dis > 5)
 8004f46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004f4a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f56:	dc00      	bgt.n	8004f5a <checkRobotStopCondition+0x15e>
	{
		robot_forward(30);
	}

}
 8004f58:	e002      	b.n	8004f60 <checkRobotStopCondition+0x164>
		robot_forward(30);
 8004f5a:	201e      	movs	r0, #30
 8004f5c:	f000 ff6c 	bl	8005e38 <robot_forward>
}
 8004f60:	bf00      	nop
 8004f62:	3748      	adds	r7, #72	; 0x48
 8004f64:	46bd      	mov	sp, r7
 8004f66:	ecbd 8b02 	vpop	{d8}
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <updateDeltaphi>:

void_t updateDeltaphi(void_t)
{
 8004f6c:	b598      	push	{r3, r4, r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
	g_delta_phi_left = cal_delta_phi_angle(g_left_pulse_count, g_left_pulse_count_prev);
 8004f70:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <updateDeltaphi+0x90>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f7fb fec3 	bl	8000d04 <__aeabi_l2f>
 8004f7e:	4604      	mov	r4, r0
 8004f80:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <updateDeltaphi+0x94>)
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7fb febb 	bl	8000d04 <__aeabi_l2f>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	ee00 3a90 	vmov	s1, r3
 8004f94:	ee00 4a10 	vmov	s0, r4
 8004f98:	f001 f846 	bl	8006028 <cal_delta_phi_angle>
 8004f9c:	eef0 7a40 	vmov.f32	s15, s0
 8004fa0:	4b18      	ldr	r3, [pc, #96]	; (8005004 <updateDeltaphi+0x98>)
 8004fa2:	edc3 7a00 	vstr	s15, [r3]
	g_delta_phi_right = cal_delta_phi_angle(g_right_pulse_count, g_right_pulse_count_prev);
 8004fa6:	4b18      	ldr	r3, [pc, #96]	; (8005008 <updateDeltaphi+0x9c>)
 8004fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fac:	4610      	mov	r0, r2
 8004fae:	4619      	mov	r1, r3
 8004fb0:	f7fb fea8 	bl	8000d04 <__aeabi_l2f>
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <updateDeltaphi+0xa0>)
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f7fb fea0 	bl	8000d04 <__aeabi_l2f>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	ee00 3a90 	vmov	s1, r3
 8004fca:	ee00 4a10 	vmov	s0, r4
 8004fce:	f001 f82b 	bl	8006028 <cal_delta_phi_angle>
 8004fd2:	eef0 7a40 	vmov.f32	s15, s0
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <updateDeltaphi+0xa4>)
 8004fd8:	edc3 7a00 	vstr	s15, [r3]
	g_left_pulse_count_prev = g_left_pulse_count;
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <updateDeltaphi+0x90>)
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	4907      	ldr	r1, [pc, #28]	; (8005000 <updateDeltaphi+0x94>)
 8004fe4:	e9c1 2300 	strd	r2, r3, [r1]
	g_right_pulse_count_prev = g_right_pulse_count;
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <updateDeltaphi+0x9c>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	4907      	ldr	r1, [pc, #28]	; (800500c <updateDeltaphi+0xa0>)
 8004ff0:	e9c1 2300 	strd	r2, r3, [r1]
	cal_robot_pose();
 8004ff4:	f001 f8ec 	bl	80061d0 <cal_robot_pose>
}
 8004ff8:	bf00      	nop
 8004ffa:	bd98      	pop	{r3, r4, r7, pc}
 8004ffc:	20000348 	.word	0x20000348
 8005000:	20000318 	.word	0x20000318
 8005004:	2000039c 	.word	0x2000039c
 8005008:	20000360 	.word	0x20000360
 800500c:	20000370 	.word	0x20000370
 8005010:	200003a4 	.word	0x200003a4

08005014 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005018:	4803      	ldr	r0, [pc, #12]	; (8005028 <TIM4_IRQHandler+0x14>)
 800501a:	f7fd ff6d 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  updateDeltaphi();
 800501e:	f7ff ffa5 	bl	8004f6c <updateDeltaphi>
//
//  checkRobotStopCondition();
  /* USER CODE END TIM4_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000194 	.word	0x20000194

0800502c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005030:	4802      	ldr	r0, [pc, #8]	; (800503c <USART1_IRQHandler+0x10>)
 8005032:	f7ff f847 	bl	80040c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000230 	.word	0x20000230

08005040 <MPU6050_dmpDataReady>:
YPRAngle_t y;
DMP_data_t d;
extern float g_current_angle;
MPUData_t g_data;
void_t MPU6050_dmpDataReady(void_t)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	MPU_dmpDataReady();
 8005044:	f001 fb4c 	bl	80066e0 <_Z16MPU_dmpDataReadyv>
}
 8005048:	bf00      	nop
 800504a:	bd80      	pop	{r7, pc}

0800504c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b094      	sub	sp, #80	; 0x50
 8005050:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005052:	f107 0320 	add.w	r3, r7, #32
 8005056:	2230      	movs	r2, #48	; 0x30
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f003 fa3e 	bl	80084dc <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005060:	f107 030c 	add.w	r3, r7, #12
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]
 8005074:	4b27      	ldr	r3, [pc, #156]	; (8005114 <SystemClock_Config+0xc8>)
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	4a26      	ldr	r2, [pc, #152]	; (8005114 <SystemClock_Config+0xc8>)
 800507a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507e:	6413      	str	r3, [r2, #64]	; 0x40
 8005080:	4b24      	ldr	r3, [pc, #144]	; (8005114 <SystemClock_Config+0xc8>)
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	68bb      	ldr	r3, [r7, #8]
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800508c:	2300      	movs	r3, #0
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	4b21      	ldr	r3, [pc, #132]	; (8005118 <SystemClock_Config+0xcc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a20      	ldr	r2, [pc, #128]	; (8005118 <SystemClock_Config+0xcc>)
 8005096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b1e      	ldr	r3, [pc, #120]	; (8005118 <SystemClock_Config+0xcc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80050a8:	2302      	movs	r3, #2
 80050aa:	623b      	str	r3, [r7, #32]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80050ac:	2301      	movs	r3, #1
 80050ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80050b0:	2310      	movs	r3, #16
 80050b2:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050b4:	2302      	movs	r3, #2
 80050b6:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80050b8:	2300      	movs	r3, #0
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	  RCC_OscInitStruct.PLL.PLLM = 8;
 80050bc:	2308      	movs	r3, #8
 80050be:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_OscInitStruct.PLL.PLLN = 84;
 80050c0:	2354      	movs	r3, #84	; 0x54
 80050c2:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050c4:	2302      	movs	r3, #2
 80050c6:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_OscInitStruct.PLL.PLLQ = 4;
 80050c8:	2304      	movs	r3, #4
 80050ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050cc:	f107 0320 	add.w	r3, r7, #32
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fc ff65 	bl	8001fa0 <HAL_RCC_OscConfig>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <SystemClock_Config+0x94>
	  {
	    Error_Handler();
 80050dc:	f000 fab0 	bl	8005640 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050e0:	230f      	movs	r3, #15
 80050e2:	60fb      	str	r3, [r7, #12]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050e4:	2302      	movs	r3, #2
 80050e6:	613b      	str	r3, [r7, #16]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80050ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050f0:	61bb      	str	r3, [r7, #24]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80050f6:	f107 030c 	add.w	r3, r7, #12
 80050fa:	2102      	movs	r1, #2
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fd f9c7 	bl	8002490 <HAL_RCC_ClockConfig>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <SystemClock_Config+0xc0>
	  {
	    Error_Handler();
 8005108:	f000 fa9a 	bl	8005640 <Error_Handler>
	  }
}
 800510c:	bf00      	nop
 800510e:	3750      	adds	r7, #80	; 0x50
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40023800 	.word	0x40023800
 8005118:	40007000 	.word	0x40007000

0800511c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b096      	sub	sp, #88	; 0x58
 8005120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005122:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800512c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	609a      	str	r2, [r3, #8]
 8005138:	60da      	str	r2, [r3, #12]
 800513a:	611a      	str	r2, [r3, #16]
 800513c:	615a      	str	r2, [r3, #20]
 800513e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005140:	f107 0314 	add.w	r3, r7, #20
 8005144:	2220      	movs	r2, #32
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f003 f9c7 	bl	80084dc <memset>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800514e:	1d3b      	adds	r3, r7, #4
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800515a:	4b43      	ldr	r3, [pc, #268]	; (8005268 <MX_TIM1_Init+0x14c>)
 800515c:	4a43      	ldr	r2, [pc, #268]	; (800526c <MX_TIM1_Init+0x150>)
 800515e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005160:	4b41      	ldr	r3, [pc, #260]	; (8005268 <MX_TIM1_Init+0x14c>)
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <MX_TIM1_Init+0x14c>)
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8399;
 800516c:	4b3e      	ldr	r3, [pc, #248]	; (8005268 <MX_TIM1_Init+0x14c>)
 800516e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005172:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005174:	4b3c      	ldr	r3, [pc, #240]	; (8005268 <MX_TIM1_Init+0x14c>)
 8005176:	2200      	movs	r2, #0
 8005178:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <MX_TIM1_Init+0x14c>)
 800517c:	2200      	movs	r2, #0
 800517e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005180:	4b39      	ldr	r3, [pc, #228]	; (8005268 <MX_TIM1_Init+0x14c>)
 8005182:	2200      	movs	r2, #0
 8005184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005186:	4838      	ldr	r0, [pc, #224]	; (8005268 <MX_TIM1_Init+0x14c>)
 8005188:	f7fd fb52 	bl	8002830 <HAL_TIM_Base_Init>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <MX_TIM1_Init+0x7a>
	{
	  Error_Handler();
 8005192:	f000 fa55 	bl	8005640 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800519a:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800519c:	1d3b      	adds	r3, r7, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4831      	ldr	r0, [pc, #196]	; (8005268 <MX_TIM1_Init+0x14c>)
 80051a2:	f7fe f90f 	bl	80033c4 <HAL_TIM_ConfigClockSource>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <MX_TIM1_Init+0x94>
	{
	  Error_Handler();
 80051ac:	f000 fa48 	bl	8005640 <Error_Handler>
	}
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80051b0:	482d      	ldr	r0, [pc, #180]	; (8005268 <MX_TIM1_Init+0x14c>)
 80051b2:	f7fd fbfd 	bl	80029b0 <HAL_TIM_PWM_Init>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80051bc:	f000 fa40 	bl	8005640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051c0:	2300      	movs	r3, #0
 80051c2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051c4:	2300      	movs	r3, #0
 80051c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80051c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80051cc:	4619      	mov	r1, r3
 80051ce:	4826      	ldr	r0, [pc, #152]	; (8005268 <MX_TIM1_Init+0x14c>)
 80051d0:	f7fe fe18 	bl	8003e04 <HAL_TIMEx_MasterConfigSynchronization>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80051da:	f000 fa31 	bl	8005640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051de:	2360      	movs	r3, #96	; 0x60
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80051e6:	2300      	movs	r3, #0
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80051ee:	2300      	movs	r3, #0
 80051f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80051f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051fa:	220c      	movs	r2, #12
 80051fc:	4619      	mov	r1, r3
 80051fe:	481a      	ldr	r0, [pc, #104]	; (8005268 <MX_TIM1_Init+0x14c>)
 8005200:	f7fe f81e 	bl	8003240 <HAL_TIM_PWM_ConfigChannel>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800520a:	f000 fa19 	bl	8005640 <Error_Handler>
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800520e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005212:	2200      	movs	r2, #0
 8005214:	4619      	mov	r1, r3
 8005216:	4814      	ldr	r0, [pc, #80]	; (8005268 <MX_TIM1_Init+0x14c>)
 8005218:	f7fe f812 	bl	8003240 <HAL_TIM_PWM_ConfigChannel>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <MX_TIM1_Init+0x10a>
{
  Error_Handler();
 8005222:	f000 fa0d 	bl	8005640 <Error_Handler>
}

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005236:	2300      	movs	r3, #0
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800523a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005240:	2300      	movs	r3, #0
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005244:	f107 0314 	add.w	r3, r7, #20
 8005248:	4619      	mov	r1, r3
 800524a:	4807      	ldr	r0, [pc, #28]	; (8005268 <MX_TIM1_Init+0x14c>)
 800524c:	f7fe fe56 	bl	8003efc <HAL_TIMEx_ConfigBreakDeadTime>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8005256:	f000 f9f3 	bl	8005640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800525a:	4803      	ldr	r0, [pc, #12]	; (8005268 <MX_TIM1_Init+0x14c>)
 800525c:	f7fc f870 	bl	8001340 <HAL_TIM_MspPostInit>

}
 8005260:	bf00      	nop
 8005262:	3758      	adds	r7, #88	; 0x58
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	200000bc 	.word	0x200000bc
 800526c:	40010000 	.word	0x40010000

08005270 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	609a      	str	r2, [r3, #8]
 8005282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005284:	463b      	mov	r3, r7
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800528c:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <MX_TIM3_Init+0x94>)
 800528e:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <MX_TIM3_Init+0x98>)
 8005290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <MX_TIM3_Init+0x94>)
 8005294:	2229      	movs	r2, #41	; 0x29
 8005296:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005298:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <MX_TIM3_Init+0x94>)
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800529e:	4b19      	ldr	r3, [pc, #100]	; (8005304 <MX_TIM3_Init+0x94>)
 80052a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80052a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052a6:	4b17      	ldr	r3, [pc, #92]	; (8005304 <MX_TIM3_Init+0x94>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <MX_TIM3_Init+0x94>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80052b2:	4814      	ldr	r0, [pc, #80]	; (8005304 <MX_TIM3_Init+0x94>)
 80052b4:	f7fd fabc 	bl	8002830 <HAL_TIM_Base_Init>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80052be:	f000 f9bf 	bl	8005640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	4619      	mov	r1, r3
 80052ce:	480d      	ldr	r0, [pc, #52]	; (8005304 <MX_TIM3_Init+0x94>)
 80052d0:	f7fe f878 	bl	80033c4 <HAL_TIM_ConfigClockSource>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80052da:	f000 f9b1 	bl	8005640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052de:	2300      	movs	r3, #0
 80052e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80052e6:	463b      	mov	r3, r7
 80052e8:	4619      	mov	r1, r3
 80052ea:	4806      	ldr	r0, [pc, #24]	; (8005304 <MX_TIM3_Init+0x94>)
 80052ec:	f7fe fd8a 	bl	8003e04 <HAL_TIMEx_MasterConfigSynchronization>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80052f6:	f000 f9a3 	bl	8005640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80052fa:	bf00      	nop
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	2000014c 	.word	0x2000014c
 8005308:	40000400 	.word	0x40000400

0800530c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005312:	f107 0320 	add.w	r3, r7, #32
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800531c:	f107 0310 	add.w	r3, r7, #16
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	60da      	str	r2, [r3, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800532a:	463b      	mov	r3, r7
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	609a      	str	r2, [r3, #8]
 8005334:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <MX_TIM2_Init+0xf4>)
 8005338:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800533c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800533e:	4b30      	ldr	r3, [pc, #192]	; (8005400 <MX_TIM2_Init+0xf4>)
 8005340:	2253      	movs	r2, #83	; 0x53
 8005342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005344:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <MX_TIM2_Init+0xf4>)
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800534a:	4b2d      	ldr	r3, [pc, #180]	; (8005400 <MX_TIM2_Init+0xf4>)
 800534c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005350:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005352:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <MX_TIM2_Init+0xf4>)
 8005354:	2200      	movs	r2, #0
 8005356:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005358:	4b29      	ldr	r3, [pc, #164]	; (8005400 <MX_TIM2_Init+0xf4>)
 800535a:	2200      	movs	r2, #0
 800535c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800535e:	4828      	ldr	r0, [pc, #160]	; (8005400 <MX_TIM2_Init+0xf4>)
 8005360:	f7fd fa66 	bl	8002830 <HAL_TIM_Base_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_TIM2_Init+0x62>
    {
      Error_Handler();
 800536a:	f000 f969 	bl	8005640 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800536e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005372:	603b      	str	r3, [r7, #0]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005374:	463b      	mov	r3, r7
 8005376:	4619      	mov	r1, r3
 8005378:	4821      	ldr	r0, [pc, #132]	; (8005400 <MX_TIM2_Init+0xf4>)
 800537a:	f7fe f823 	bl	80033c4 <HAL_TIM_ConfigClockSource>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <MX_TIM2_Init+0x7c>
    {
      Error_Handler();
 8005384:	f000 f95c 	bl	8005640 <Error_Handler>
    }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005388:	481d      	ldr	r0, [pc, #116]	; (8005400 <MX_TIM2_Init+0xf4>)
 800538a:	f7fd fc33 	bl	8002bf4 <HAL_TIM_IC_Init>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005394:	f000 f954 	bl	8005640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005398:	2300      	movs	r3, #0
 800539a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800539c:	2300      	movs	r3, #0
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80053a0:	f107 0320 	add.w	r3, r7, #32
 80053a4:	4619      	mov	r1, r3
 80053a6:	4816      	ldr	r0, [pc, #88]	; (8005400 <MX_TIM2_Init+0xf4>)
 80053a8:	f7fe fd2c 	bl	8003e04 <HAL_TIMEx_MasterConfigSynchronization>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80053b2:	f000 f945 	bl	8005640 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80053ba:	2301      	movs	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80053be:	2300      	movs	r3, #0
 80053c0:	61bb      	str	r3, [r7, #24]
  sConfigIC.ICFilter = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80053c6:	f107 0310 	add.w	r3, r7, #16
 80053ca:	2204      	movs	r2, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	480c      	ldr	r0, [pc, #48]	; (8005400 <MX_TIM2_Init+0xf4>)
 80053d0:	f7fd fe9a 	bl	8003108 <HAL_TIM_IC_ConfigChannel>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80053da:	f000 f931 	bl	8005640 <Error_Handler>
  }

  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80053de:	f107 0310 	add.w	r3, r7, #16
 80053e2:	2208      	movs	r2, #8
 80053e4:	4619      	mov	r1, r3
 80053e6:	4806      	ldr	r0, [pc, #24]	; (8005400 <MX_TIM2_Init+0xf4>)
 80053e8:	f7fd fe8e 	bl	8003108 <HAL_TIM_IC_ConfigChannel>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <MX_TIM2_Init+0xea>
	{
	  Error_Handler();
 80053f2:	f000 f925 	bl	8005640 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80053f6:	bf00      	nop
 80053f8:	3728      	adds	r7, #40	; 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000104 	.word	0x20000104

08005404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540a:	f107 030c 	add.w	r3, r7, #12
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	611a      	str	r2, [r3, #16]

	    /* GPIO Ports Clock Enable */
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	4b32      	ldr	r3, [pc, #200]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	4a31      	ldr	r2, [pc, #196]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	6313      	str	r3, [r2, #48]	; 0x30
 800542a:	4b2f      	ldr	r3, [pc, #188]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	4a2a      	ldr	r2, [pc, #168]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005440:	f043 0310 	orr.w	r3, r3, #16
 8005444:	6313      	str	r3, [r2, #48]	; 0x30
 8005446:	4b28      	ldr	r3, [pc, #160]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	4a23      	ldr	r2, [pc, #140]	; (80054e8 <MX_GPIO_Init+0xe4>)
 800545c:	f043 0302 	orr.w	r3, r3, #2
 8005460:	6313      	str	r3, [r2, #48]	; 0x30
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <MX_GPIO_Init+0xe4>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	683b      	ldr	r3, [r7, #0]

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(GPIOA, INT1_Pin|INT2_Pin, GPIO_PIN_SET);
 800546e:	2201      	movs	r2, #1
 8005470:	2103      	movs	r1, #3
 8005472:	481e      	ldr	r0, [pc, #120]	; (80054ec <MX_GPIO_Init+0xe8>)
 8005474:	f7fc fc1e 	bl	8001cb4 <HAL_GPIO_WritePin>

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(GPIOA, INT3_Pin|INT4_Pin, GPIO_PIN_RESET);
 8005478:	2200      	movs	r2, #0
 800547a:	2130      	movs	r1, #48	; 0x30
 800547c:	481b      	ldr	r0, [pc, #108]	; (80054ec <MX_GPIO_Init+0xe8>)
 800547e:	f7fc fc19 	bl	8001cb4 <HAL_GPIO_WritePin>

	    /*Configure GPIO pins : INT1_Pin INT2_Pin INT3_Pin INT4_Pin */
	    GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|INT3_Pin|INT4_Pin;
 8005482:	2333      	movs	r3, #51	; 0x33
 8005484:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005486:	2301      	movs	r3, #1
 8005488:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800548e:	2302      	movs	r3, #2
 8005490:	61bb      	str	r3, [r7, #24]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	4619      	mov	r1, r3
 8005498:	4814      	ldr	r0, [pc, #80]	; (80054ec <MX_GPIO_Init+0xe8>)
 800549a:	f7fc fa57 	bl	800194c <HAL_GPIO_Init>

	    /*Configure GPIO pins : DC1_C2_Pin DC2_C2_Pin */
	    GPIO_InitStruct.Pin = DC1_C2_Pin|DC2_C2_Pin;
 800549e:	230c      	movs	r3, #12
 80054a0:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054aa:	f107 030c 	add.w	r3, r7, #12
 80054ae:	4619      	mov	r1, r3
 80054b0:	480e      	ldr	r0, [pc, #56]	; (80054ec <MX_GPIO_Init+0xe8>)
 80054b2:	f7fc fa4b 	bl	800194c <HAL_GPIO_Init>

	    /*Configure GPIO pin : MPU_INT_Pin */
	    GPIO_InitStruct.Pin = MPU_INT_Pin;
 80054b6:	2320      	movs	r3, #32
 80054b8:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80054ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80054be:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 80054c4:	f107 030c 	add.w	r3, r7, #12
 80054c8:	4619      	mov	r1, r3
 80054ca:	4809      	ldr	r0, [pc, #36]	; (80054f0 <MX_GPIO_Init+0xec>)
 80054cc:	f7fc fa3e 	bl	800194c <HAL_GPIO_Init>

	    /* EXTI interrupt init*/
	    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80054d0:	2200      	movs	r2, #0
 80054d2:	2100      	movs	r1, #0
 80054d4:	2017      	movs	r0, #23
 80054d6:	f7fc f970 	bl	80017ba <HAL_NVIC_SetPriority>
	    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80054da:	2017      	movs	r0, #23
 80054dc:	f7fc f989 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 80054e0:	bf00      	nop
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40023800 	.word	0x40023800
 80054ec:	40020000 	.word	0x40020000
 80054f0:	40020400 	.word	0x40020400

080054f4 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054fa:	f107 0308 	add.w	r3, r7, #8
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	605a      	str	r2, [r3, #4]
 8005504:	609a      	str	r2, [r3, #8]
 8005506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005508:	463b      	mov	r3, r7
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005510:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <MX_TIM4_Init+0x94>)
 8005512:	4a1e      	ldr	r2, [pc, #120]	; (800558c <MX_TIM4_Init+0x98>)
 8005514:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8005516:	4b1c      	ldr	r3, [pc, #112]	; (8005588 <MX_TIM4_Init+0x94>)
 8005518:	f242 720f 	movw	r2, #9999	; 0x270f
 800551c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <MX_TIM4_Init+0x94>)
 8005520:	2200      	movs	r2, #0
 8005522:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 419;
 8005524:	4b18      	ldr	r3, [pc, #96]	; (8005588 <MX_TIM4_Init+0x94>)
 8005526:	f240 12a3 	movw	r2, #419	; 0x1a3
 800552a:	60da      	str	r2, [r3, #12]
//  htim4.Init.Period = 8399;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800552c:	4b16      	ldr	r3, [pc, #88]	; (8005588 <MX_TIM4_Init+0x94>)
 800552e:	2200      	movs	r2, #0
 8005530:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <MX_TIM4_Init+0x94>)
 8005534:	2200      	movs	r2, #0
 8005536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005538:	4813      	ldr	r0, [pc, #76]	; (8005588 <MX_TIM4_Init+0x94>)
 800553a:	f7fd f979 	bl	8002830 <HAL_TIM_Base_Init>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8005544:	f000 f87c 	bl	8005640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800554c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800554e:	f107 0308 	add.w	r3, r7, #8
 8005552:	4619      	mov	r1, r3
 8005554:	480c      	ldr	r0, [pc, #48]	; (8005588 <MX_TIM4_Init+0x94>)
 8005556:	f7fd ff35 	bl	80033c4 <HAL_TIM_ConfigClockSource>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005560:	f000 f86e 	bl	8005640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005564:	2300      	movs	r3, #0
 8005566:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005568:	2300      	movs	r3, #0
 800556a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800556c:	463b      	mov	r3, r7
 800556e:	4619      	mov	r1, r3
 8005570:	4805      	ldr	r0, [pc, #20]	; (8005588 <MX_TIM4_Init+0x94>)
 8005572:	f7fe fc47 	bl	8003e04 <HAL_TIMEx_MasterConfigSynchronization>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800557c:	f000 f860 	bl	8005640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005580:	bf00      	nop
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000194 	.word	0x20000194
 800558c:	40000800 	.word	0x40000800

08005590 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_I2C1_Init(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <MX_I2C1_Init+0x50>)
 8005596:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <MX_I2C1_Init+0x54>)
 8005598:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800559a:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <MX_I2C1_Init+0x50>)
 800559c:	4a12      	ldr	r2, [pc, #72]	; (80055e8 <MX_I2C1_Init+0x58>)
 800559e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <MX_I2C1_Init+0x50>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80055a6:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <MX_I2C1_Init+0x50>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <MX_I2C1_Init+0x50>)
 80055ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <MX_I2C1_Init+0x50>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80055ba:	4b09      	ldr	r3, [pc, #36]	; (80055e0 <MX_I2C1_Init+0x50>)
 80055bc:	2200      	movs	r2, #0
 80055be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <MX_I2C1_Init+0x50>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055c6:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <MX_I2C1_Init+0x50>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80055cc:	4804      	ldr	r0, [pc, #16]	; (80055e0 <MX_I2C1_Init+0x50>)
 80055ce:	f7fc fba3 	bl	8001d18 <HAL_I2C_Init>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_I2C1_Init+0x4c>
	{
	 Error_Handler();
 80055d8:	f000 f832 	bl	8005640 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 80055dc:	bf00      	nop
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200001dc 	.word	0x200001dc
 80055e4:	40005400 	.word	0x40005400
 80055e8:	00061a80 	.word	0x00061a80

080055ec <MX_USART1_UART_Init>:
   * @brief USART1 Initialization Function
   * @param None
   * @retval None
   */
 static void MX_USART1_UART_Init(void)
 {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */

   /* USER CODE END USART1_Init 1 */
   huart1.Instance = USART1;
 80055f0:	4b11      	ldr	r3, [pc, #68]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 80055f2:	4a12      	ldr	r2, [pc, #72]	; (800563c <MX_USART1_UART_Init+0x50>)
 80055f4:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate = 115200;
 80055f6:	4b10      	ldr	r3, [pc, #64]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 80055f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055fc:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055fe:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 8005600:	2200      	movs	r2, #0
 8005602:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits = UART_STOPBITS_1;
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 8005606:	2200      	movs	r2, #0
 8005608:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity = UART_PARITY_NONE;
 800560a:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 800560c:	2200      	movs	r2, #0
 800560e:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode = UART_MODE_TX_RX;
 8005610:	4b09      	ldr	r3, [pc, #36]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 8005612:	220c      	movs	r2, #12
 8005614:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005616:	4b08      	ldr	r3, [pc, #32]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 8005618:	2200      	movs	r2, #0
 800561a:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800561c:	4b06      	ldr	r3, [pc, #24]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 800561e:	2200      	movs	r2, #0
 8005620:	61da      	str	r2, [r3, #28]
   if (HAL_UART_Init(&huart1) != HAL_OK)
 8005622:	4805      	ldr	r0, [pc, #20]	; (8005638 <MX_USART1_UART_Init+0x4c>)
 8005624:	f7fe fcd0 	bl	8003fc8 <HAL_UART_Init>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <MX_USART1_UART_Init+0x46>
   {
     Error_Handler();
 800562e:	f000 f807 	bl	8005640 <Error_Handler>
   }
   /* USER CODE BEGIN USART1_Init 2 */

   /* USER CODE END USART1_Init 2 */

 }
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	20000230 	.word	0x20000230
 800563c:	40011000 	.word	0x40011000

08005640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005644:	b672      	cpsid	i
}
 8005646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005648:	e7fe      	b.n	8005648 <Error_Handler+0x8>
	...

0800564c <DcControlSetup>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
void DcControlSetup(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
	HAL_Init();
 8005650:	f7fb ff66 	bl	8001520 <HAL_Init>
	SystemClock_Config();
 8005654:	f7ff fcfa 	bl	800504c <SystemClock_Config>

	MX_GPIO_Init();
 8005658:	f7ff fed4 	bl	8005404 <MX_GPIO_Init>
	MX_TIM1_Init();
 800565c:	f7ff fd5e 	bl	800511c <MX_TIM1_Init>
	MX_TIM2_Init();
 8005660:	f7ff fe54 	bl	800530c <MX_TIM2_Init>
	MX_TIM3_Init();
 8005664:	f7ff fe04 	bl	8005270 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005668:	f7ff ff44 	bl	80054f4 <MX_TIM4_Init>
	MX_I2C1_Init();
 800566c:	f7ff ff90 	bl	8005590 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8005670:	f7ff ffbc 	bl	80055ec <MX_USART1_UART_Init>

	HAL_TIM_Base_Start_IT(&DC1_TIM_UPDATE);
 8005674:	480e      	ldr	r0, [pc, #56]	; (80056b0 <DcControlSetup+0x64>)
 8005676:	f7fd f92b 	bl	80028d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&DC1_TIM_PULSE_COUNT);
 800567a:	480e      	ldr	r0, [pc, #56]	; (80056b4 <DcControlSetup+0x68>)
 800567c:	f7fd f928 	bl	80028d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&DC2_TIM_PULSE_COUNT);
 8005680:	480c      	ldr	r0, [pc, #48]	; (80056b4 <DcControlSetup+0x68>)
 8005682:	f7fd f925 	bl	80028d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&TIM_CHECK_ROBOT_STOP_UPDATE);
 8005686:	480c      	ldr	r0, [pc, #48]	; (80056b8 <DcControlSetup+0x6c>)
 8005688:	f7fd f922 	bl	80028d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&DC1_TIM_PULSE_COUNT, DC1_TIM_PULSE_COUNT_CHANNEL);
 800568c:	2104      	movs	r1, #4
 800568e:	4809      	ldr	r0, [pc, #36]	; (80056b4 <DcControlSetup+0x68>)
 8005690:	f7fd fb0a 	bl	8002ca8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&DC2_TIM_PULSE_COUNT, DC2_TIM_PULSE_COUNT_CHANNEL);
 8005694:	2108      	movs	r1, #8
 8005696:	4807      	ldr	r0, [pc, #28]	; (80056b4 <DcControlSetup+0x68>)
 8005698:	f7fd fb06 	bl	8002ca8 <HAL_TIM_IC_Start_IT>

	HAL_TIM_PWM_Start(&DC1_TIM_PWM, DC1_TIM_PWM_CHANNEL);
 800569c:	210c      	movs	r1, #12
 800569e:	4807      	ldr	r0, [pc, #28]	; (80056bc <DcControlSetup+0x70>)
 80056a0:	f7fd f9e0 	bl	8002a64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&DC2_TIM_PWM, DC2_TIM_PWM_CHANNEL);
 80056a4:	2100      	movs	r1, #0
 80056a6:	4805      	ldr	r0, [pc, #20]	; (80056bc <DcControlSetup+0x70>)
 80056a8:	f7fd f9dc 	bl	8002a64 <HAL_TIM_PWM_Start>
}
 80056ac:	bf00      	nop
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	2000014c 	.word	0x2000014c
 80056b4:	20000104 	.word	0x20000104
 80056b8:	20000194 	.word	0x20000194
 80056bc:	200000bc 	.word	0x200000bc

080056c0 <dcControl>:

void_t dcControl(i32_t wPulse, TIM_HandleTypeDef htim, u8_t tim_Channel)
{
 80056c0:	b084      	sub	sp, #16
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	f107 0014 	add.w	r0, r7, #20
 80056ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	static uint16_t iwPulse_length = 0;
//
//	iwPulse_length = (TIM_PERIOD * iwDuty_cycle)/100;

	__HAL_TIM_SET_COMPARE(&htim, tim_Channel, wPulse);
 80056d2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <dcControl+0x22>
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80056e0:	e012      	b.n	8005708 <dcControl+0x48>
	__HAL_TIM_SET_COMPARE(&htim, tim_Channel, wPulse);
 80056e2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d103      	bne.n	80056f2 <dcControl+0x32>
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6393      	str	r3, [r2, #56]	; 0x38
}
 80056f0:	e00a      	b.n	8005708 <dcControl+0x48>
	__HAL_TIM_SET_COMPARE(&htim, tim_Channel, wPulse);
 80056f2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d103      	bne.n	8005702 <dcControl+0x42>
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8005700:	e002      	b.n	8005708 <dcControl+0x48>
	__HAL_TIM_SET_COMPARE(&htim, tim_Channel, wPulse);
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6413      	str	r3, [r2, #64]	; 0x40
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	b004      	add	sp, #16
 8005714:	4770      	bx	lr
	...

08005718 <dc1_speed_PID>:
  * @param 	[wDespulse]		:		pulse want to obtain
  *
  * @return		-	NonewDespulse
  */
void_t dc1_speed_PID(u32_t wDespulse)
{
 8005718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800571a:	b093      	sub	sp, #76	; 0x4c
 800571c:	af10      	add	r7, sp, #64	; 0x40
 800571e:	6078      	str	r0, [r7, #4]
	g_iwErrDc1 = wDespulse - abs(g_iwPulseDc1);
 8005720:	4b3a      	ldr	r3, [pc, #232]	; (800580c <dc1_speed_PID+0xf4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	bfb8      	it	lt
 8005728:	425b      	neglt	r3, r3
 800572a:	461a      	mov	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	461a      	mov	r2, r3
 8005732:	4b37      	ldr	r3, [pc, #220]	; (8005810 <dc1_speed_PID+0xf8>)
 8005734:	601a      	str	r2, [r3, #0]

	g_iwpPartDc1 = g_byKp*g_iwErrDc1;
 8005736:	4b37      	ldr	r3, [pc, #220]	; (8005814 <dc1_speed_PID+0xfc>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	4b34      	ldr	r3, [pc, #208]	; (8005810 <dc1_speed_PID+0xf8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	fb03 f302 	mul.w	r3, r3, r2
 8005744:	4a34      	ldr	r2, [pc, #208]	; (8005818 <dc1_speed_PID+0x100>)
 8005746:	6013      	str	r3, [r2, #0]
	g_iwdPartDc1 = g_byKd*(g_iwErrDc1 - g_iwPreErrDc1)*INV_SAMPLING_TIME;
 8005748:	4b34      	ldr	r3, [pc, #208]	; (800581c <dc1_speed_PID+0x104>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	4619      	mov	r1, r3
 800574e:	4b30      	ldr	r3, [pc, #192]	; (8005810 <dc1_speed_PID+0xf8>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b33      	ldr	r3, [pc, #204]	; (8005820 <dc1_speed_PID+0x108>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	fb03 f301 	mul.w	r3, r3, r1
 800575c:	22c8      	movs	r2, #200	; 0xc8
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	4a30      	ldr	r2, [pc, #192]	; (8005824 <dc1_speed_PID+0x10c>)
 8005764:	6013      	str	r3, [r2, #0]
	g_iwiPartDc1 += g_byKi*SAMPLING_TIME*g_iwErrDc1/1000;
 8005766:	4b30      	ldr	r3, [pc, #192]	; (8005828 <dc1_speed_PID+0x110>)
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	4a27      	ldr	r2, [pc, #156]	; (8005810 <dc1_speed_PID+0xf8>)
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	4a2c      	ldr	r2, [pc, #176]	; (800582c <dc1_speed_PID+0x114>)
 800577c:	fb82 1203 	smull	r1, r2, r2, r3
 8005780:	1192      	asrs	r2, r2, #6
 8005782:	17db      	asrs	r3, r3, #31
 8005784:	1ad2      	subs	r2, r2, r3
 8005786:	4b2a      	ldr	r3, [pc, #168]	; (8005830 <dc1_speed_PID+0x118>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4413      	add	r3, r2
 800578c:	4a28      	ldr	r2, [pc, #160]	; (8005830 <dc1_speed_PID+0x118>)
 800578e:	6013      	str	r3, [r2, #0]
	g_iwOutputDc1 += g_iwpPartDc1 + g_iwdPartDc1 + g_iwiPartDc1;
 8005790:	4b21      	ldr	r3, [pc, #132]	; (8005818 <dc1_speed_PID+0x100>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b23      	ldr	r3, [pc, #140]	; (8005824 <dc1_speed_PID+0x10c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	441a      	add	r2, r3
 800579a:	4b25      	ldr	r3, [pc, #148]	; (8005830 <dc1_speed_PID+0x118>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	441a      	add	r2, r3
 80057a0:	4b24      	ldr	r3, [pc, #144]	; (8005834 <dc1_speed_PID+0x11c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4413      	add	r3, r2
 80057a6:	4a23      	ldr	r2, [pc, #140]	; (8005834 <dc1_speed_PID+0x11c>)
 80057a8:	6013      	str	r3, [r2, #0]

	if(g_iwOutputDc1 >= TIM_PERIOD) g_iwOutputDc1 = TIM_PERIOD - 1;
 80057aa:	4b22      	ldr	r3, [pc, #136]	; (8005834 <dc1_speed_PID+0x11c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80057b2:	4293      	cmp	r3, r2
 80057b4:	dd03      	ble.n	80057be <dc1_speed_PID+0xa6>
 80057b6:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <dc1_speed_PID+0x11c>)
 80057b8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80057bc:	601a      	str	r2, [r3, #0]
	if(g_iwOutputDc1 <= 0) g_iwOutputDc1 = 1;
 80057be:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <dc1_speed_PID+0x11c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	dc02      	bgt.n	80057cc <dc1_speed_PID+0xb4>
 80057c6:	4b1b      	ldr	r3, [pc, #108]	; (8005834 <dc1_speed_PID+0x11c>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

	dcControl(g_iwOutputDc1, DC1_TIM_PWM, DC1_TIM_PWM_CHANNEL);
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <dc1_speed_PID+0x11c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4e19      	ldr	r6, [pc, #100]	; (8005838 <dc1_speed_PID+0x120>)
 80057d4:	230c      	movs	r3, #12
 80057d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057d8:	466d      	mov	r5, sp
 80057da:	f106 040c 	add.w	r4, r6, #12
 80057de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80057ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80057f2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80057f6:	6838      	ldr	r0, [r7, #0]
 80057f8:	f7ff ff62 	bl	80056c0 <dcControl>

	g_iwPreErrDc1 = g_iwErrDc1;
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <dc1_speed_PID+0xf8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a07      	ldr	r2, [pc, #28]	; (8005820 <dc1_speed_PID+0x108>)
 8005802:	6013      	str	r3, [r2, #0]


}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800580c:	20000328 	.word	0x20000328
 8005810:	20000310 	.word	0x20000310
 8005814:	20000009 	.word	0x20000009
 8005818:	20000274 	.word	0x20000274
 800581c:	2000000a 	.word	0x2000000a
 8005820:	20000344 	.word	0x20000344
 8005824:	20000278 	.word	0x20000278
 8005828:	2000000b 	.word	0x2000000b
 800582c:	10624dd3 	.word	0x10624dd3
 8005830:	2000027c 	.word	0x2000027c
 8005834:	20000354 	.word	0x20000354
 8005838:	200000bc 	.word	0x200000bc

0800583c <dc2_speed_PID>:
  * @param 	[wDespulse]		:		pulse want to obtain
  *
  * @return		-	NonewDespulse
  */
void_t dc2_speed_PID(u32_t wDespulse)
{
 800583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583e:	b093      	sub	sp, #76	; 0x4c
 8005840:	af10      	add	r7, sp, #64	; 0x40
 8005842:	6078      	str	r0, [r7, #4]
	g_iwErrDc2 = wDespulse - abs(g_iwPulseDc2);
 8005844:	4b3a      	ldr	r3, [pc, #232]	; (8005930 <dc2_speed_PID+0xf4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	bfb8      	it	lt
 800584c:	425b      	neglt	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	461a      	mov	r2, r3
 8005856:	4b37      	ldr	r3, [pc, #220]	; (8005934 <dc2_speed_PID+0xf8>)
 8005858:	601a      	str	r2, [r3, #0]

	g_iwpPartDc2 = g_byKp*g_iwErrDc2;
 800585a:	4b37      	ldr	r3, [pc, #220]	; (8005938 <dc2_speed_PID+0xfc>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	4b34      	ldr	r3, [pc, #208]	; (8005934 <dc2_speed_PID+0xf8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	fb03 f302 	mul.w	r3, r3, r2
 8005868:	4a34      	ldr	r2, [pc, #208]	; (800593c <dc2_speed_PID+0x100>)
 800586a:	6013      	str	r3, [r2, #0]
	g_iwdPartDc2 = g_byKd*(g_iwErrDc2 - g_iwPreErrDc2)*INV_SAMPLING_TIME;
 800586c:	4b34      	ldr	r3, [pc, #208]	; (8005940 <dc2_speed_PID+0x104>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	4619      	mov	r1, r3
 8005872:	4b30      	ldr	r3, [pc, #192]	; (8005934 <dc2_speed_PID+0xf8>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <dc2_speed_PID+0x108>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	fb03 f301 	mul.w	r3, r3, r1
 8005880:	22c8      	movs	r2, #200	; 0xc8
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	4a30      	ldr	r2, [pc, #192]	; (8005948 <dc2_speed_PID+0x10c>)
 8005888:	6013      	str	r3, [r2, #0]
	g_iwiPartDc2 += g_byKi*SAMPLING_TIME*g_iwErrDc2/1000;
 800588a:	4b30      	ldr	r3, [pc, #192]	; (800594c <dc2_speed_PID+0x110>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	4a27      	ldr	r2, [pc, #156]	; (8005934 <dc2_speed_PID+0xf8>)
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	fb02 f303 	mul.w	r3, r2, r3
 800589e:	4a2c      	ldr	r2, [pc, #176]	; (8005950 <dc2_speed_PID+0x114>)
 80058a0:	fb82 1203 	smull	r1, r2, r2, r3
 80058a4:	1192      	asrs	r2, r2, #6
 80058a6:	17db      	asrs	r3, r3, #31
 80058a8:	1ad2      	subs	r2, r2, r3
 80058aa:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <dc2_speed_PID+0x118>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4413      	add	r3, r2
 80058b0:	4a28      	ldr	r2, [pc, #160]	; (8005954 <dc2_speed_PID+0x118>)
 80058b2:	6013      	str	r3, [r2, #0]
	g_iwOutputDc2 += g_iwpPartDc2 + g_iwdPartDc2 + g_iwiPartDc2;
 80058b4:	4b21      	ldr	r3, [pc, #132]	; (800593c <dc2_speed_PID+0x100>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b23      	ldr	r3, [pc, #140]	; (8005948 <dc2_speed_PID+0x10c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	441a      	add	r2, r3
 80058be:	4b25      	ldr	r3, [pc, #148]	; (8005954 <dc2_speed_PID+0x118>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	441a      	add	r2, r3
 80058c4:	4b24      	ldr	r3, [pc, #144]	; (8005958 <dc2_speed_PID+0x11c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4413      	add	r3, r2
 80058ca:	4a23      	ldr	r2, [pc, #140]	; (8005958 <dc2_speed_PID+0x11c>)
 80058cc:	6013      	str	r3, [r2, #0]

	if(g_iwOutputDc2 >= TIM_PERIOD) g_iwOutputDc2 = TIM_PERIOD - 1;
 80058ce:	4b22      	ldr	r3, [pc, #136]	; (8005958 <dc2_speed_PID+0x11c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80058d6:	4293      	cmp	r3, r2
 80058d8:	dd03      	ble.n	80058e2 <dc2_speed_PID+0xa6>
 80058da:	4b1f      	ldr	r3, [pc, #124]	; (8005958 <dc2_speed_PID+0x11c>)
 80058dc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80058e0:	601a      	str	r2, [r3, #0]
	if(g_iwOutputDc2 <= 0) g_iwOutputDc2 = 1;
 80058e2:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <dc2_speed_PID+0x11c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	dc02      	bgt.n	80058f0 <dc2_speed_PID+0xb4>
 80058ea:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <dc2_speed_PID+0x11c>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

	dcControl(g_iwOutputDc2, DC2_TIM_PWM, DC2_TIM_PWM_CHANNEL);
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <dc2_speed_PID+0x11c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	603b      	str	r3, [r7, #0]
 80058f6:	4e19      	ldr	r6, [pc, #100]	; (800595c <dc2_speed_PID+0x120>)
 80058f8:	2300      	movs	r3, #0
 80058fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80058fc:	466d      	mov	r5, sp
 80058fe:	f106 040c 	add.w	r4, r6, #12
 8005902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800590a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800590c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800590e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005912:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8005916:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800591a:	6838      	ldr	r0, [r7, #0]
 800591c:	f7ff fed0 	bl	80056c0 <dcControl>

	g_iwPreErrDc2 = g_iwErrDc2;
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <dc2_speed_PID+0xf8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a07      	ldr	r2, [pc, #28]	; (8005944 <dc2_speed_PID+0x108>)
 8005926:	6013      	str	r3, [r2, #0]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005930:	20000350 	.word	0x20000350
 8005934:	20000334 	.word	0x20000334
 8005938:	20000009 	.word	0x20000009
 800593c:	20000280 	.word	0x20000280
 8005940:	2000000a 	.word	0x2000000a
 8005944:	20000358 	.word	0x20000358
 8005948:	20000284 	.word	0x20000284
 800594c:	2000000b 	.word	0x2000000b
 8005950:	10624dd3 	.word	0x10624dd3
 8005954:	20000288 	.word	0x20000288
 8005958:	2000036c 	.word	0x2000036c
 800595c:	200000bc 	.word	0x200000bc

08005960 <TIM2_IRQHandler>:
/* USER CODE BEGIN 4 */
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&DC1_TIM_PULSE_COUNT);
 8005964:	4802      	ldr	r0, [pc, #8]	; (8005970 <TIM2_IRQHandler+0x10>)
 8005966:	f7fd fac7 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800596a:	bf00      	nop
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000104 	.word	0x20000104

08005974 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
	UNUSED(htim);
	if(htim->Instance == DC1_TIM_PULSE_COUNT.Instance && htim->Channel == DC1_TIM_PULSE_COUNT_CHANNEL_ACTIVE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b43      	ldr	r3, [pc, #268]	; (8005a90 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d13c      	bne.n	8005a04 <HAL_TIM_IC_CaptureCallback+0x90>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	7f1b      	ldrb	r3, [r3, #28]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d138      	bne.n	8005a04 <HAL_TIM_IC_CaptureCallback+0x90>
	{
		u8_t byDirection = HAL_GPIO_ReadPin(DC1_C2_PORT, DC1_C2_PIN);
 8005992:	2104      	movs	r1, #4
 8005994:	483f      	ldr	r0, [pc, #252]	; (8005a94 <HAL_TIM_IC_CaptureCallback+0x120>)
 8005996:	f7fc f975 	bl	8001c84 <HAL_GPIO_ReadPin>
 800599a:	4603      	mov	r3, r0
 800599c:	75fb      	strb	r3, [r7, #23]

		if(byDirection == 1)
 800599e:	7dfb      	ldrb	r3, [r7, #23]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d112      	bne.n	80059ca <HAL_TIM_IC_CaptureCallback+0x56>
		{
//			g_DirectionDc1 = DC_CLOCWISE;
			g_iwPulseDc1++;
 80059a4:	4b3c      	ldr	r3, [pc, #240]	; (8005a98 <HAL_TIM_IC_CaptureCallback+0x124>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	4a3b      	ldr	r2, [pc, #236]	; (8005a98 <HAL_TIM_IC_CaptureCallback+0x124>)
 80059ac:	6013      	str	r3, [r2, #0]
			g_left_pulse_count++;
 80059ae:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <HAL_TIM_IC_CaptureCallback+0x128>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	1c51      	adds	r1, r2, #1
 80059b6:	6039      	str	r1, [r7, #0]
 80059b8:	f143 0300 	adc.w	r3, r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_TIM_IC_CaptureCallback+0x128>)
 80059c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059c4:	e9c3 1200 	strd	r1, r2, [r3]
 80059c8:	e00e      	b.n	80059e8 <HAL_TIM_IC_CaptureCallback+0x74>
		}
		else
		{
//			g_DirectionDc1 = DC_ANTICLOCKWISE;
			g_iwPulseDc1--;
 80059ca:	4b33      	ldr	r3, [pc, #204]	; (8005a98 <HAL_TIM_IC_CaptureCallback+0x124>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	4a31      	ldr	r2, [pc, #196]	; (8005a98 <HAL_TIM_IC_CaptureCallback+0x124>)
 80059d2:	6013      	str	r3, [r2, #0]
			g_left_pulse_count--;
 80059d4:	4b31      	ldr	r3, [pc, #196]	; (8005a9c <HAL_TIM_IC_CaptureCallback+0x128>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f112 3aff 	adds.w	sl, r2, #4294967295
 80059de:	f143 3bff 	adc.w	fp, r3, #4294967295
 80059e2:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <HAL_TIM_IC_CaptureCallback+0x128>)
 80059e4:	e9c3 ab00 	strd	sl, fp, [r3]
		}

		if(g_run_distance == 1 || g_rotate)
 80059e8:	4b2d      	ldr	r3, [pc, #180]	; (8005aa0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d003      	beq.n	80059f8 <HAL_TIM_IC_CaptureCallback+0x84>
 80059f0:	4b2c      	ldr	r3, [pc, #176]	; (8005aa4 <HAL_TIM_IC_CaptureCallback+0x130>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d044      	beq.n	8005a82 <HAL_TIM_IC_CaptureCallback+0x10e>
		{
			g_dc1_pulse_count++;
 80059f8:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x134>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	4a2a      	ldr	r2, [pc, #168]	; (8005aa8 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005a00:	6013      	str	r3, [r2, #0]
	{
 8005a02:	e03e      	b.n	8005a82 <HAL_TIM_IC_CaptureCallback+0x10e>
//			}
		}
	}
	else
	{
		if(htim->Instance == DC2_TIM_PULSE_COUNT.Instance && htim->Channel == DC2_TIM_PULSE_COUNT_CHANNEL_ACTIVE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d139      	bne.n	8005a84 <HAL_TIM_IC_CaptureCallback+0x110>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	7f1b      	ldrb	r3, [r3, #28]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d135      	bne.n	8005a84 <HAL_TIM_IC_CaptureCallback+0x110>
		{
			u8_t byDirection = HAL_GPIO_ReadPin(DC2_C2_PORT, DC2_C2_PIN);
 8005a18:	2108      	movs	r1, #8
 8005a1a:	481e      	ldr	r0, [pc, #120]	; (8005a94 <HAL_TIM_IC_CaptureCallback+0x120>)
 8005a1c:	f7fc f932 	bl	8001c84 <HAL_GPIO_ReadPin>
 8005a20:	4603      	mov	r3, r0
 8005a22:	75bb      	strb	r3, [r7, #22]

			if(byDirection == 1)
 8005a24:	7dbb      	ldrb	r3, [r7, #22]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d10f      	bne.n	8005a4a <HAL_TIM_IC_CaptureCallback+0xd6>
			{
//					g_DirectionDc2 = DC_CLOCWISE;
				g_iwPulseDc2++;
 8005a2a:	4b20      	ldr	r3, [pc, #128]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x138>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x138>)
 8005a32:	6013      	str	r3, [r2, #0]
				g_right_pulse_count--;
 8005a34:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f112 38ff 	adds.w	r8, r2, #4294967295
 8005a3e:	f143 39ff 	adc.w	r9, r3, #4294967295
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005a44:	e9c3 8900 	strd	r8, r9, [r3]
 8005a48:	e00d      	b.n	8005a66 <HAL_TIM_IC_CaptureCallback+0xf2>
			}
			else
			{
//					g_DirectionDc2 = DC_ANTICLOCKWISE;
				g_iwPulseDc2--;
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x138>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <HAL_TIM_IC_CaptureCallback+0x138>)
 8005a52:	6013      	str	r3, [r2, #0]
				g_right_pulse_count++;
 8005a54:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	1c54      	adds	r4, r2, #1
 8005a5c:	f143 0500 	adc.w	r5, r3, #0
 8005a60:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005a62:	e9c3 4500 	strd	r4, r5, [r3]
			}

			if(g_run_distance == 1 || g_rotate)
 8005a66:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IC_CaptureCallback+0x102>
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d006      	beq.n	8005a84 <HAL_TIM_IC_CaptureCallback+0x110>
			{
				g_dc2_pulse_count++;
 8005a76:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	4a0d      	ldr	r2, [pc, #52]	; (8005ab4 <HAL_TIM_IC_CaptureCallback+0x140>)
 8005a7e:	6013      	str	r3, [r2, #0]
//					g_dc2_pulse_count = 0;
//				}
			}
		}
	}
}
 8005a80:	e000      	b.n	8005a84 <HAL_TIM_IC_CaptureCallback+0x110>
	{
 8005a82:	bf00      	nop
}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000104 	.word	0x20000104
 8005a94:	40020000 	.word	0x40020000
 8005a98:	20000328 	.word	0x20000328
 8005a9c:	20000348 	.word	0x20000348
 8005aa0:	20000330 	.word	0x20000330
 8005aa4:	2000033c 	.word	0x2000033c
 8005aa8:	20000368 	.word	0x20000368
 8005aac:	20000350 	.word	0x20000350
 8005ab0:	20000360 	.word	0x20000360
 8005ab4:	20000320 	.word	0x20000320

08005ab8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&DC1_TIM_UPDATE);
 8005abc:	4802      	ldr	r0, [pc, #8]	; (8005ac8 <TIM3_IRQHandler+0x10>)
 8005abe:	f7fd fa1b 	bl	8002ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005ac2:	bf00      	nop
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	2000014c 	.word	0x2000014c

08005acc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
	if(htim->Instance == DC1_TIM_UPDATE.Instance)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d10b      	bne.n	8005af8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		dc1_speed_PID(g_wDespulse);
 8005ae0:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7ff fe17 	bl	8005718 <dc1_speed_PID>
		dc2_speed_PID(g_wDespulse);
 8005aea:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fea4 	bl	800583c <dc2_speed_PID>
		checkDcStatus();
 8005af4:	f000 f808 	bl	8005b08 <checkDcStatus>
	}
}
 8005af8:	bf00      	nop
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	2000014c 	.word	0x2000014c
 8005b04:	2000030c 	.word	0x2000030c

08005b08 <checkDcStatus>:
  * @param 	-	None
  *
  * @return		-	None
  */
static void_t checkDcStatus(void_t)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
	g_iwRpmDc1 = g_iwPulseDc1*INV_SAMPLING_TIME*60/(11*30);
 8005b0c:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <checkDcStatus+0x54>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	4a11      	ldr	r2, [pc, #68]	; (8005b60 <checkDcStatus+0x58>)
 8005b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8005b1e:	11d2      	asrs	r2, r2, #7
 8005b20:	17db      	asrs	r3, r3, #31
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	4a0f      	ldr	r2, [pc, #60]	; (8005b64 <checkDcStatus+0x5c>)
 8005b26:	6013      	str	r3, [r2, #0]
	g_iwRpmDc2 = g_iwPulseDc2*INV_SAMPLING_TIME*60/(11*30);
 8005b28:	4b0f      	ldr	r3, [pc, #60]	; (8005b68 <checkDcStatus+0x60>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8005b30:	fb02 f303 	mul.w	r3, r2, r3
 8005b34:	4a0a      	ldr	r2, [pc, #40]	; (8005b60 <checkDcStatus+0x58>)
 8005b36:	fb82 1203 	smull	r1, r2, r2, r3
 8005b3a:	11d2      	asrs	r2, r2, #7
 8005b3c:	17db      	asrs	r3, r3, #31
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	4a0a      	ldr	r2, [pc, #40]	; (8005b6c <checkDcStatus+0x64>)
 8005b42:	6013      	str	r3, [r2, #0]
	g_iwPulseDc1 = 0;
 8005b44:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <checkDcStatus+0x54>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
	g_iwPulseDc2 = 0;
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <checkDcStatus+0x60>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	20000328 	.word	0x20000328
 8005b60:	634c0635 	.word	0x634c0635
 8005b64:	20000314 	.word	0x20000314
 8005b68:	20000350 	.word	0x20000350
 8005b6c:	20000338 	.word	0x20000338

08005b70 <dc1_RotateClockWise>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc1_RotateClockWise(u16_t wRpm)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(INT1_PORT, INT1_PIN, SET);
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	481e      	ldr	r0, [pc, #120]	; (8005bf8 <dc1_RotateClockWise+0x88>)
 8005b80:	f7fc f898 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT2_PORT, INT2_PIN, RESET);
 8005b84:	2200      	movs	r2, #0
 8005b86:	2102      	movs	r1, #2
 8005b88:	481b      	ldr	r0, [pc, #108]	; (8005bf8 <dc1_RotateClockWise+0x88>)
 8005b8a:	f7fc f893 	bl	8001cb4 <HAL_GPIO_WritePin>

	float temp = (float)(wRpm);
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b98:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = (float)(temp/INV_SAMPLING_TIME/60)*11*30;
 8005b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ba0:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005bfc <dc1_RotateClockWise+0x8c>
 8005ba4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ba8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8005c00 <dc1_RotateClockWise+0x90>
 8005bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bb0:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8005bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bb8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bc0:	edc7 7a03 	vstr	s15, [r7, #12]

	g_wDespulse = roundf(temp);
 8005bc4:	ed97 0a03 	vldr	s0, [r7, #12]
 8005bc8:	f000 fec6 	bl	8006958 <roundf>
 8005bcc:	eef0 7a40 	vmov.f32	s15, s0
 8005bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd4:	ee17 3a90 	vmov	r3, s15
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <dc1_RotateClockWise+0x94>)
 8005bdc:	801a      	strh	r2, [r3, #0]

	dc1_speed_PID(g_wDespulse);
 8005bde:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <dc1_RotateClockWise+0x94>)
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff fd98 	bl	8005718 <dc1_speed_PID>
	g_DirectionDc1 = DC_CLOCKWISE;
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <dc1_RotateClockWise+0x98>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40020000 	.word	0x40020000
 8005bfc:	43480000 	.word	0x43480000
 8005c00:	42700000 	.word	0x42700000
 8005c04:	2000030c 	.word	0x2000030c
 8005c08:	2000028c 	.word	0x2000028c

08005c0c <dc1_RotateAntiClockWise>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc1_RotateAntiClockWise(u16_t wRpm)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(INT1_PORT, INT1_PIN, RESET);
 8005c16:	2200      	movs	r2, #0
 8005c18:	2101      	movs	r1, #1
 8005c1a:	481e      	ldr	r0, [pc, #120]	; (8005c94 <dc1_RotateAntiClockWise+0x88>)
 8005c1c:	f7fc f84a 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT2_PORT, INT2_PIN, SET);
 8005c20:	2201      	movs	r2, #1
 8005c22:	2102      	movs	r1, #2
 8005c24:	481b      	ldr	r0, [pc, #108]	; (8005c94 <dc1_RotateAntiClockWise+0x88>)
 8005c26:	f7fc f845 	bl	8001cb4 <HAL_GPIO_WritePin>

	float temp = (float)(wRpm);
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c34:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = (float)(temp/INV_SAMPLING_TIME/60)*11*30;
 8005c38:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c3c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005c98 <dc1_RotateAntiClockWise+0x8c>
 8005c40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005c44:	eddf 6a15 	vldr	s13, [pc, #84]	; 8005c9c <dc1_RotateAntiClockWise+0x90>
 8005c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c4c:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8005c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c54:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c5c:	edc7 7a03 	vstr	s15, [r7, #12]

	g_wDespulse = roundf(temp);
 8005c60:	ed97 0a03 	vldr	s0, [r7, #12]
 8005c64:	f000 fe78 	bl	8006958 <roundf>
 8005c68:	eef0 7a40 	vmov.f32	s15, s0
 8005c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c70:	ee17 3a90 	vmov	r3, s15
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <dc1_RotateAntiClockWise+0x94>)
 8005c78:	801a      	strh	r2, [r3, #0]

	dc1_speed_PID(g_wDespulse);
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <dc1_RotateAntiClockWise+0x94>)
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fd4a 	bl	8005718 <dc1_speed_PID>


	g_DirectionDc1 = DC_ANTICLOCKWISE;
 8005c84:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <dc1_RotateAntiClockWise+0x98>)
 8005c86:	2202      	movs	r2, #2
 8005c88:	701a      	strb	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40020000 	.word	0x40020000
 8005c98:	43480000 	.word	0x43480000
 8005c9c:	42700000 	.word	0x42700000
 8005ca0:	2000030c 	.word	0x2000030c
 8005ca4:	2000028c 	.word	0x2000028c

08005ca8 <dc1_Stop>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc1_Stop(void_t)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INT1_PORT, INT1_PIN, RESET);
 8005cac:	2200      	movs	r2, #0
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4806      	ldr	r0, [pc, #24]	; (8005ccc <dc1_Stop+0x24>)
 8005cb2:	f7fb ffff 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT2_PORT, INT2_PIN, RESET);
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2102      	movs	r1, #2
 8005cba:	4804      	ldr	r0, [pc, #16]	; (8005ccc <dc1_Stop+0x24>)
 8005cbc:	f7fb fffa 	bl	8001cb4 <HAL_GPIO_WritePin>

	g_DirectionDc1 = DC_STOP;
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <dc1_Stop+0x28>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40020000 	.word	0x40020000
 8005cd0:	2000028c 	.word	0x2000028c

08005cd4 <dc2_RotateClockWise>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc2_RotateClockWise(u16_t wRpm)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(INT3_PORT, INT3_PIN, RESET);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2110      	movs	r1, #16
 8005ce2:	481e      	ldr	r0, [pc, #120]	; (8005d5c <dc2_RotateClockWise+0x88>)
 8005ce4:	f7fb ffe6 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT4_PORT, INT4_PIN, SET);
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2120      	movs	r1, #32
 8005cec:	481b      	ldr	r0, [pc, #108]	; (8005d5c <dc2_RotateClockWise+0x88>)
 8005cee:	f7fb ffe1 	bl	8001cb4 <HAL_GPIO_WritePin>

	float temp = (float)(wRpm);
 8005cf2:	88fb      	ldrh	r3, [r7, #6]
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfc:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = (float)(temp/INV_SAMPLING_TIME/60)*11*30;
 8005d00:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d04:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005d60 <dc2_RotateClockWise+0x8c>
 8005d08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d0c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8005d64 <dc2_RotateClockWise+0x90>
 8005d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d14:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8005d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d1c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d24:	edc7 7a03 	vstr	s15, [r7, #12]

	g_wDespulse = roundf(temp);
 8005d28:	ed97 0a03 	vldr	s0, [r7, #12]
 8005d2c:	f000 fe14 	bl	8006958 <roundf>
 8005d30:	eef0 7a40 	vmov.f32	s15, s0
 8005d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d38:	ee17 3a90 	vmov	r3, s15
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <dc2_RotateClockWise+0x94>)
 8005d40:	801a      	strh	r2, [r3, #0]

	dc2_speed_PID(g_wDespulse);
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <dc2_RotateClockWise+0x94>)
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fd78 	bl	800583c <dc2_speed_PID>
	g_DirectionDc2 = DC_CLOCKWISE;
 8005d4c:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <dc2_RotateClockWise+0x98>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40020000 	.word	0x40020000
 8005d60:	43480000 	.word	0x43480000
 8005d64:	42700000 	.word	0x42700000
 8005d68:	2000030c 	.word	0x2000030c
 8005d6c:	2000028d 	.word	0x2000028d

08005d70 <dc2_RotateAntiClockWise>:
  * @param 	[rpm]:	round per minute
  *
  * @return		-	None
  */
void_t dc2_RotateAntiClockWise(u16_t wRpm)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(INT3_PORT, INT3_PIN, SET);
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	2110      	movs	r1, #16
 8005d7e:	481e      	ldr	r0, [pc, #120]	; (8005df8 <dc2_RotateAntiClockWise+0x88>)
 8005d80:	f7fb ff98 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT4_PORT, INT4_PIN, RESET);
 8005d84:	2200      	movs	r2, #0
 8005d86:	2120      	movs	r1, #32
 8005d88:	481b      	ldr	r0, [pc, #108]	; (8005df8 <dc2_RotateAntiClockWise+0x88>)
 8005d8a:	f7fb ff93 	bl	8001cb4 <HAL_GPIO_WritePin>

	float temp = (float)(wRpm);
 8005d8e:	88fb      	ldrh	r3, [r7, #6]
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d98:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = (float)(temp/INV_SAMPLING_TIME/60)*11*30;
 8005d9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005da0:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005dfc <dc2_RotateAntiClockWise+0x8c>
 8005da4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005da8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8005e00 <dc2_RotateAntiClockWise+0x90>
 8005dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005db0:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8005db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005db8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8005dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dc0:	edc7 7a03 	vstr	s15, [r7, #12]

	g_wDespulse = roundf(temp);
 8005dc4:	ed97 0a03 	vldr	s0, [r7, #12]
 8005dc8:	f000 fdc6 	bl	8006958 <roundf>
 8005dcc:	eef0 7a40 	vmov.f32	s15, s0
 8005dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd4:	ee17 3a90 	vmov	r3, s15
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <dc2_RotateAntiClockWise+0x94>)
 8005ddc:	801a      	strh	r2, [r3, #0]

	dc2_speed_PID(g_wDespulse);
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <dc2_RotateAntiClockWise+0x94>)
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fd2a 	bl	800583c <dc2_speed_PID>


	g_DirectionDc2 = DC_ANTICLOCKWISE;
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <dc2_RotateAntiClockWise+0x98>)
 8005dea:	2202      	movs	r2, #2
 8005dec:	701a      	strb	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40020000 	.word	0x40020000
 8005dfc:	43480000 	.word	0x43480000
 8005e00:	42700000 	.word	0x42700000
 8005e04:	2000030c 	.word	0x2000030c
 8005e08:	2000028d 	.word	0x2000028d

08005e0c <dc2_Stop>:
  * @param 		-	None
  *
  * @return		-	None
  */
void_t dc2_Stop(void_t)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INT3_PORT, INT3_PIN, RESET);
 8005e10:	2200      	movs	r2, #0
 8005e12:	2110      	movs	r1, #16
 8005e14:	4806      	ldr	r0, [pc, #24]	; (8005e30 <dc2_Stop+0x24>)
 8005e16:	f7fb ff4d 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INT4_PORT, INT4_PIN, RESET);
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2120      	movs	r1, #32
 8005e1e:	4804      	ldr	r0, [pc, #16]	; (8005e30 <dc2_Stop+0x24>)
 8005e20:	f7fb ff48 	bl	8001cb4 <HAL_GPIO_WritePin>

	g_DirectionDc2 = DC_STOP;
 8005e24:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <dc2_Stop+0x28>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40020000 	.word	0x40020000
 8005e34:	2000028d 	.word	0x2000028d

08005e38 <robot_forward>:
  * @param 	[wSpeed]:	speed(cm/s)
  *
  * @return		-	None
  */
void_t robot_forward(u16_t wSpeed)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	80fb      	strh	r3, [r7, #6]
	float temp = (float)wSpeed;
 8005e42:	88fb      	ldrh	r3, [r7, #6]
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4c:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = temp*10/(M_PI*WHEEL_DIAMETER)*60;
 8005e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e5c:	ee17 0a90 	vmov	r0, s15
 8005e60:	f7fa fb16 	bl	8000490 <__aeabi_f2d>
 8005e64:	a31a      	add	r3, pc, #104	; (adr r3, 8005ed0 <robot_forward+0x98>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f7fa fc93 	bl	8000794 <__aeabi_ddiv>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4610      	mov	r0, r2
 8005e74:	4619      	mov	r1, r3
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	4b13      	ldr	r3, [pc, #76]	; (8005ec8 <robot_forward+0x90>)
 8005e7c:	f7fa fb60 	bl	8000540 <__aeabi_dmul>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4610      	mov	r0, r2
 8005e86:	4619      	mov	r1, r3
 8005e88:	f7fa fe1c 	bl	8000ac4 <__aeabi_d2f>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	60fb      	str	r3, [r7, #12]

	u16_t wRpm = (u16_t)temp;
 8005e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e98:	ee17 3a90 	vmov	r3, s15
 8005e9c:	817b      	strh	r3, [r7, #10]

	dc1_RotateClockWise(wRpm);
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fe65 	bl	8005b70 <dc1_RotateClockWise>
	dc2_RotateAntiClockWise(wRpm);
 8005ea6:	897b      	ldrh	r3, [r7, #10]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff ff61 	bl	8005d70 <dc2_RotateAntiClockWise>

	g_robotState = getRobotState();
 8005eae:	f000 f847 	bl	8005f40 <getRobotState>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <robot_forward+0x94>)
 8005eb8:	701a      	strb	r2, [r3, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	f3af 8000 	nop.w
 8005ec8:	404e0000 	.word	0x404e0000
 8005ecc:	2000030e 	.word	0x2000030e
 8005ed0:	54442d18 	.word	0x54442d18
 8005ed4:	406921fb 	.word	0x406921fb

08005ed8 <robot_stop>:
  * @param 	[wSpeed]:	speed(cm/s)
  *
  * @return		-	None
  */
void robot_stop(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
	dc1_Stop();
 8005edc:	f7ff fee4 	bl	8005ca8 <dc1_Stop>
	dc2_Stop();
 8005ee0:	f7ff ff94 	bl	8005e0c <dc2_Stop>

	g_robotState = getRobotState();
 8005ee4:	f000 f82c 	bl	8005f40 <getRobotState>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <robot_stop+0x1c>)
 8005eee:	701a      	strb	r2, [r3, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	2000030e 	.word	0x2000030e

08005ef8 <robot_rotateleft>:
  * @param 		-	None
  *
  * @return		-	None
  */
void_t robot_rotateleft(void_t)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
	dc1_RotateAntiClockWise(100);
 8005efc:	2064      	movs	r0, #100	; 0x64
 8005efe:	f7ff fe85 	bl	8005c0c <dc1_RotateAntiClockWise>
	dc2_RotateAntiClockWise(100);
 8005f02:	2064      	movs	r0, #100	; 0x64
 8005f04:	f7ff ff34 	bl	8005d70 <dc2_RotateAntiClockWise>

	g_robotState = getRobotState();
 8005f08:	f000 f81a 	bl	8005f40 <getRobotState>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4b01      	ldr	r3, [pc, #4]	; (8005f18 <robot_rotateleft+0x20>)
 8005f12:	701a      	strb	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	2000030e 	.word	0x2000030e

08005f1c <robot_rotateright>:
  * @param 		-	None
  *
  * @return		-	None
  */
void_t robot_rotateright(void_t)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
	dc1_RotateClockWise(100);
 8005f20:	2064      	movs	r0, #100	; 0x64
 8005f22:	f7ff fe25 	bl	8005b70 <dc1_RotateClockWise>
	dc2_RotateClockWise(100);
 8005f26:	2064      	movs	r0, #100	; 0x64
 8005f28:	f7ff fed4 	bl	8005cd4 <dc2_RotateClockWise>

	g_robotState = getRobotState();
 8005f2c:	f000 f808 	bl	8005f40 <getRobotState>
 8005f30:	4603      	mov	r3, r0
 8005f32:	461a      	mov	r2, r3
 8005f34:	4b01      	ldr	r3, [pc, #4]	; (8005f3c <robot_rotateright+0x20>)
 8005f36:	701a      	strb	r2, [r3, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	2000030e 	.word	0x2000030e

08005f40 <getRobotState>:
  * @param 		-	None
  *
  * @return		-	RobotState
  */
RobotState getRobotState(void_t)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
	if(g_DirectionDc1 == DC_STOP && g_DirectionDc2 == DC_STOP)
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <getRobotState+0x74>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <getRobotState+0x18>
 8005f4c:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <getRobotState+0x78>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <getRobotState+0x18>
	{
		return ROBOT_STOP;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e027      	b.n	8005fa8 <getRobotState+0x68>
	}
	else {
		if(g_DirectionDc1 == DC_CLOCKWISE && g_DirectionDc2 == DC_ANTICLOCKWISE)
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <getRobotState+0x74>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d105      	bne.n	8005f6c <getRobotState+0x2c>
 8005f60:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <getRobotState+0x78>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d101      	bne.n	8005f6c <getRobotState+0x2c>
		{
			return ROBOT_FORWARD;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e01d      	b.n	8005fa8 <getRobotState+0x68>
		}
		else
		{
			if (g_DirectionDc1 == DC_ANTICLOCKWISE && g_DirectionDc2 == DC_CLOCKWISE)
 8005f6c:	4b11      	ldr	r3, [pc, #68]	; (8005fb4 <getRobotState+0x74>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d105      	bne.n	8005f80 <getRobotState+0x40>
 8005f74:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <getRobotState+0x78>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d101      	bne.n	8005f80 <getRobotState+0x40>
			{
				return ROBOT_BACKWARD;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e013      	b.n	8005fa8 <getRobotState+0x68>
			}
			else
			{
				if(g_DirectionDc1 == DC_ANTICLOCKWISE && g_DirectionDc2 == DC_ANTICLOCKWISE)
 8005f80:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <getRobotState+0x74>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d105      	bne.n	8005f94 <getRobotState+0x54>
 8005f88:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <getRobotState+0x78>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d101      	bne.n	8005f94 <getRobotState+0x54>
				{
					return ROBOT_ROTATE_LEFT;
 8005f90:	2304      	movs	r3, #4
 8005f92:	e009      	b.n	8005fa8 <getRobotState+0x68>
				}
				else
				{
					if(g_DirectionDc1 == DC_CLOCKWISE && g_DirectionDc2 == DC_CLOCKWISE)
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <getRobotState+0x74>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d105      	bne.n	8005fa8 <getRobotState+0x68>
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <getRobotState+0x78>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <getRobotState+0x68>
					{
						return ROBOT_ROTATE_RIGHT;
 8005fa4:	2305      	movs	r3, #5
 8005fa6:	e7ff      	b.n	8005fa8 <getRobotState+0x68>
					}
				}
			}
		}
	}
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	2000028c 	.word	0x2000028c
 8005fb8:	2000028d 	.word	0x2000028d

08005fbc <cal_phi_angle>:
  * @param 	[w_pulse]		:		how many pulse count
  *
  * @return	[result]		:		angle obtained
  */
float cal_phi_angle(i64_t w_pulse)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	e9c7 0100 	strd	r0, r1, [r7]
	float result = 360.0*w_pulse/ENCODER_NUM/DC_RATIO;
 8005fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005fca:	f7fa fa8b 	bl	80004e4 <__aeabi_l2d>
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	4b12      	ldr	r3, [pc, #72]	; (800601c <cal_phi_angle+0x60>)
 8005fd4:	f7fa fab4 	bl	8000540 <__aeabi_dmul>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	4610      	mov	r0, r2
 8005fde:	4619      	mov	r1, r3
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <cal_phi_angle+0x64>)
 8005fe6:	f7fa fbd5 	bl	8000794 <__aeabi_ddiv>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <cal_phi_angle+0x68>)
 8005ff8:	f7fa fbcc 	bl	8000794 <__aeabi_ddiv>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4610      	mov	r0, r2
 8006002:	4619      	mov	r1, r3
 8006004:	f7fa fd5e 	bl	8000ac4 <__aeabi_d2f>
 8006008:	4603      	mov	r3, r0
 800600a:	60fb      	str	r3, [r7, #12]
	return result;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	ee07 3a90 	vmov	s15, r3
}
 8006012:	eeb0 0a67 	vmov.f32	s0, s15
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40768000 	.word	0x40768000
 8006020:	40260000 	.word	0x40260000
 8006024:	403e0000 	.word	0x403e0000

08006028 <cal_delta_phi_angle>:
  * @param 	[w_pulse_prev]		:		how many pulse count previous
  *
  * @return	[result]		:		angle obtained
  */
float cal_delta_phi_angle(float w_pulse, float w_pulse_prev)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	ed2d 8b02 	vpush	{d8}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	ed87 0a01 	vstr	s0, [r7, #4]
 8006036:	edc7 0a00 	vstr	s1, [r7]
	return (cal_phi_angle(w_pulse) - cal_phi_angle(w_pulse_prev));
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fa feb8 	bl	8000db0 <__aeabi_f2lz>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4610      	mov	r0, r2
 8006046:	4619      	mov	r1, r3
 8006048:	f7ff ffb8 	bl	8005fbc <cal_phi_angle>
 800604c:	eeb0 8a40 	vmov.f32	s16, s0
 8006050:	6838      	ldr	r0, [r7, #0]
 8006052:	f7fa fead 	bl	8000db0 <__aeabi_f2lz>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4610      	mov	r0, r2
 800605c:	4619      	mov	r1, r3
 800605e:	f7ff ffad 	bl	8005fbc <cal_phi_angle>
 8006062:	eef0 7a40 	vmov.f32	s15, s0
 8006066:	ee78 7a67 	vsub.f32	s15, s16, s15
}
 800606a:	eeb0 0a67 	vmov.f32	s0, s15
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	ecbd 8b02 	vpop	{d8}
 8006076:	bd80      	pop	{r7, pc}

08006078 <cal_theta_angle>:
  * @param 		-		None
  *
  * @return	[theta]		:		theta angle
  */
float cal_theta_angle(void_t)
{
 8006078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
	float angle;
	g_phi_right = cal_phi_angle(g_right_pulse_count);
 8006080:	4b4a      	ldr	r3, [pc, #296]	; (80061ac <cal_theta_angle+0x134>)
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	4610      	mov	r0, r2
 8006088:	4619      	mov	r1, r3
 800608a:	f7ff ff97 	bl	8005fbc <cal_phi_angle>
 800608e:	eef0 7a40 	vmov.f32	s15, s0
 8006092:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <cal_theta_angle+0x138>)
 8006094:	edc3 7a00 	vstr	s15, [r3]
	g_phi_left  = cal_phi_angle(g_left_pulse_count);
 8006098:	4b46      	ldr	r3, [pc, #280]	; (80061b4 <cal_theta_angle+0x13c>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	4610      	mov	r0, r2
 80060a0:	4619      	mov	r1, r3
 80060a2:	f7ff ff8b 	bl	8005fbc <cal_phi_angle>
 80060a6:	eef0 7a40 	vmov.f32	s15, s0
 80060aa:	4b43      	ldr	r3, [pc, #268]	; (80061b8 <cal_theta_angle+0x140>)
 80060ac:	edc3 7a00 	vstr	s15, [r3]
	angle = (WHEEL_DIAMETER/2)*(g_phi_right-g_phi_left)/(WHEEL_BASE);
 80060b0:	4b3f      	ldr	r3, [pc, #252]	; (80061b0 <cal_theta_angle+0x138>)
 80060b2:	ed93 7a00 	vldr	s14, [r3]
 80060b6:	4b40      	ldr	r3, [pc, #256]	; (80061b8 <cal_theta_angle+0x140>)
 80060b8:	edd3 7a00 	vldr	s15, [r3]
 80060bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060c0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80061bc <cal_theta_angle+0x144>
 80060c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80060c8:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80061c0 <cal_theta_angle+0x148>
 80060cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060d0:	edc7 7a03 	vstr	s15, [r7, #12]
	int k =  (int)angle / 180;
 80060d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80060d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060dc:	ee17 3a90 	vmov	r3, s15
 80060e0:	4a38      	ldr	r2, [pc, #224]	; (80061c4 <cal_theta_angle+0x14c>)
 80060e2:	fb82 1203 	smull	r1, r2, r2, r3
 80060e6:	441a      	add	r2, r3
 80060e8:	11d2      	asrs	r2, r2, #7
 80060ea:	17db      	asrs	r3, r3, #31
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	60bb      	str	r3, [r7, #8]
	float du = fabs(angle) - 180*fabs(k) ;
 80060f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80060f4:	eef0 7ae7 	vabs.f32	s15, s15
 80060f8:	ee17 0a90 	vmov	r0, s15
 80060fc:	f7fa f9c8 	bl	8000490 <__aeabi_f2d>
 8006100:	4680      	mov	r8, r0
 8006102:	4689      	mov	r9, r1
 8006104:	68b8      	ldr	r0, [r7, #8]
 8006106:	f7fa f9b1 	bl	800046c <__aeabi_i2d>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4614      	mov	r4, r2
 8006110:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	4b2b      	ldr	r3, [pc, #172]	; (80061c8 <cal_theta_angle+0x150>)
 800611a:	4620      	mov	r0, r4
 800611c:	4629      	mov	r1, r5
 800611e:	f7fa fa0f 	bl	8000540 <__aeabi_dmul>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4640      	mov	r0, r8
 8006128:	4649      	mov	r1, r9
 800612a:	f7fa f851 	bl	80001d0 <__aeabi_dsub>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4610      	mov	r0, r2
 8006134:	4619      	mov	r1, r3
 8006136:	f7fa fcc5 	bl	8000ac4 <__aeabi_d2f>
 800613a:	4603      	mov	r3, r0
 800613c:	607b      	str	r3, [r7, #4]
	if(k % 2 != 0)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d018      	beq.n	800617a <cal_theta_angle+0x102>
	{
		if(angle > 0)
 8006148:	edd7 7a03 	vldr	s15, [r7, #12]
 800614c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006154:	dd08      	ble.n	8006168 <cal_theta_angle+0xf0>
		{
			angle = -180 + du;
 8006156:	edd7 7a01 	vldr	s15, [r7, #4]
 800615a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80061cc <cal_theta_angle+0x154>
 800615e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006162:	edc7 7a03 	vstr	s15, [r7, #12]
 8006166:	e018      	b.n	800619a <cal_theta_angle+0x122>
		}
		else
		{
			angle = 180 - du;
 8006168:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80061cc <cal_theta_angle+0x154>
 800616c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006174:	edc7 7a03 	vstr	s15, [r7, #12]
 8006178:	e00f      	b.n	800619a <cal_theta_angle+0x122>
		}
	}
	else
	{
		if(angle > 0)
 800617a:	edd7 7a03 	vldr	s15, [r7, #12]
 800617e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006186:	dd02      	ble.n	800618e <cal_theta_angle+0x116>
		{
			angle = du;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e005      	b.n	800619a <cal_theta_angle+0x122>
		}
		else
		{
			angle = -du;
 800618e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006192:	eef1 7a67 	vneg.f32	s15, s15
 8006196:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	return angle;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	ee07 3a90 	vmov	s15, r3
}
 80061a0:	eeb0 0a67 	vmov.f32	s0, s15
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80061ac:	20000360 	.word	0x20000360
 80061b0:	2000037c 	.word	0x2000037c
 80061b4:	20000348 	.word	0x20000348
 80061b8:	200003a0 	.word	0x200003a0
 80061bc:	42000000 	.word	0x42000000
 80061c0:	438b8000 	.word	0x438b8000
 80061c4:	b60b60b7 	.word	0xb60b60b7
 80061c8:	40668000 	.word	0x40668000
 80061cc:	43340000 	.word	0x43340000

080061d0 <cal_robot_pose>:
  * @param 		-		None
  *
  * @return		-		None
  */
void_t cal_robot_pose(void_t)
{
 80061d0:	b5b0      	push	{r4, r5, r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
	float temp_x, temp_y;

	temp_x = (WHEEL_DIAMETER/40.0)*(g_delta_phi_left*M_PI/180 + g_delta_phi_right*M_PI/180)*cos(g_robotPose_previous.theta*M_PI/180);
 80061d6:	4b82      	ldr	r3, [pc, #520]	; (80063e0 <cal_robot_pose+0x210>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fa f958 	bl	8000490 <__aeabi_f2d>
 80061e0:	a37b      	add	r3, pc, #492	; (adr r3, 80063d0 <cal_robot_pose+0x200>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7fa f9ab 	bl	8000540 <__aeabi_dmul>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	4b7b      	ldr	r3, [pc, #492]	; (80063e4 <cal_robot_pose+0x214>)
 80061f8:	f7fa facc 	bl	8000794 <__aeabi_ddiv>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4614      	mov	r4, r2
 8006202:	461d      	mov	r5, r3
 8006204:	4b78      	ldr	r3, [pc, #480]	; (80063e8 <cal_robot_pose+0x218>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fa f941 	bl	8000490 <__aeabi_f2d>
 800620e:	a370      	add	r3, pc, #448	; (adr r3, 80063d0 <cal_robot_pose+0x200>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa f994 	bl	8000540 <__aeabi_dmul>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4610      	mov	r0, r2
 800621e:	4619      	mov	r1, r3
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	4b6f      	ldr	r3, [pc, #444]	; (80063e4 <cal_robot_pose+0x214>)
 8006226:	f7fa fab5 	bl	8000794 <__aeabi_ddiv>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	4620      	mov	r0, r4
 8006230:	4629      	mov	r1, r5
 8006232:	f7f9 ffcf 	bl	80001d4 <__adddf3>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4610      	mov	r0, r2
 800623c:	4619      	mov	r1, r3
 800623e:	a366      	add	r3, pc, #408	; (adr r3, 80063d8 <cal_robot_pose+0x208>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7fa f97c 	bl	8000540 <__aeabi_dmul>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4614      	mov	r4, r2
 800624e:	461d      	mov	r5, r3
 8006250:	4b66      	ldr	r3, [pc, #408]	; (80063ec <cal_robot_pose+0x21c>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fa f91b 	bl	8000490 <__aeabi_f2d>
 800625a:	a35d      	add	r3, pc, #372	; (adr r3, 80063d0 <cal_robot_pose+0x200>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f7fa f96e 	bl	8000540 <__aeabi_dmul>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4610      	mov	r0, r2
 800626a:	4619      	mov	r1, r3
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	4b5c      	ldr	r3, [pc, #368]	; (80063e4 <cal_robot_pose+0x214>)
 8006272:	f7fa fa8f 	bl	8000794 <__aeabi_ddiv>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	ec43 2b17 	vmov	d7, r2, r3
 800627e:	eeb0 0a47 	vmov.f32	s0, s14
 8006282:	eef0 0a67 	vmov.f32	s1, s15
 8006286:	f000 fabb 	bl	8006800 <cos>
 800628a:	ec53 2b10 	vmov	r2, r3, d0
 800628e:	4620      	mov	r0, r4
 8006290:	4629      	mov	r1, r5
 8006292:	f7fa f955 	bl	8000540 <__aeabi_dmul>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4610      	mov	r0, r2
 800629c:	4619      	mov	r1, r3
 800629e:	f7fa fc11 	bl	8000ac4 <__aeabi_d2f>
 80062a2:	4603      	mov	r3, r0
 80062a4:	607b      	str	r3, [r7, #4]
	temp_y = (WHEEL_DIAMETER/40.0)*(g_delta_phi_left*M_PI/180 + g_delta_phi_right*M_PI/180)*sin(g_robotPose_previous.theta*M_PI/180);
 80062a6:	4b4e      	ldr	r3, [pc, #312]	; (80063e0 <cal_robot_pose+0x210>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa f8f0 	bl	8000490 <__aeabi_f2d>
 80062b0:	a347      	add	r3, pc, #284	; (adr r3, 80063d0 <cal_robot_pose+0x200>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f7fa f943 	bl	8000540 <__aeabi_dmul>
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4610      	mov	r0, r2
 80062c0:	4619      	mov	r1, r3
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	4b47      	ldr	r3, [pc, #284]	; (80063e4 <cal_robot_pose+0x214>)
 80062c8:	f7fa fa64 	bl	8000794 <__aeabi_ddiv>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4614      	mov	r4, r2
 80062d2:	461d      	mov	r5, r3
 80062d4:	4b44      	ldr	r3, [pc, #272]	; (80063e8 <cal_robot_pose+0x218>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fa f8d9 	bl	8000490 <__aeabi_f2d>
 80062de:	a33c      	add	r3, pc, #240	; (adr r3, 80063d0 <cal_robot_pose+0x200>)
 80062e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e4:	f7fa f92c 	bl	8000540 <__aeabi_dmul>
 80062e8:	4602      	mov	r2, r0
 80062ea:	460b      	mov	r3, r1
 80062ec:	4610      	mov	r0, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	4b3b      	ldr	r3, [pc, #236]	; (80063e4 <cal_robot_pose+0x214>)
 80062f6:	f7fa fa4d 	bl	8000794 <__aeabi_ddiv>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7f9 ff67 	bl	80001d4 <__adddf3>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4610      	mov	r0, r2
 800630c:	4619      	mov	r1, r3
 800630e:	a332      	add	r3, pc, #200	; (adr r3, 80063d8 <cal_robot_pose+0x208>)
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f7fa f914 	bl	8000540 <__aeabi_dmul>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4614      	mov	r4, r2
 800631e:	461d      	mov	r5, r3
 8006320:	4b32      	ldr	r3, [pc, #200]	; (80063ec <cal_robot_pose+0x21c>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4618      	mov	r0, r3
 8006326:	f7fa f8b3 	bl	8000490 <__aeabi_f2d>
 800632a:	a329      	add	r3, pc, #164	; (adr r3, 80063d0 <cal_robot_pose+0x200>)
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f7fa f906 	bl	8000540 <__aeabi_dmul>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	4610      	mov	r0, r2
 800633a:	4619      	mov	r1, r3
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	4b28      	ldr	r3, [pc, #160]	; (80063e4 <cal_robot_pose+0x214>)
 8006342:	f7fa fa27 	bl	8000794 <__aeabi_ddiv>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	ec43 2b17 	vmov	d7, r2, r3
 800634e:	eeb0 0a47 	vmov.f32	s0, s14
 8006352:	eef0 0a67 	vmov.f32	s1, s15
 8006356:	f000 faa3 	bl	80068a0 <sin>
 800635a:	ec53 2b10 	vmov	r2, r3, d0
 800635e:	4620      	mov	r0, r4
 8006360:	4629      	mov	r1, r5
 8006362:	f7fa f8ed 	bl	8000540 <__aeabi_dmul>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4610      	mov	r0, r2
 800636c:	4619      	mov	r1, r3
 800636e:	f7fa fba9 	bl	8000ac4 <__aeabi_d2f>
 8006372:	4603      	mov	r3, r0
 8006374:	603b      	str	r3, [r7, #0]

	g_robotPose_estimate.coordinate.x 		= (g_robotPose_previous.coordinate.x + temp_x);//cm
 8006376:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <cal_robot_pose+0x21c>)
 8006378:	ed93 7a00 	vldr	s14, [r3]
 800637c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006384:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <cal_robot_pose+0x220>)
 8006386:	edc3 7a00 	vstr	s15, [r3]
	g_robotPose_estimate.coordinate.y 		= (g_robotPose_previous.coordinate.y + temp_y);
 800638a:	4b18      	ldr	r3, [pc, #96]	; (80063ec <cal_robot_pose+0x21c>)
 800638c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006390:	edd7 7a00 	vldr	s15, [r7]
 8006394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006398:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <cal_robot_pose+0x220>)
 800639a:	edc3 7a01 	vstr	s15, [r3, #4]
	g_robotPose_estimate.theta 				= cal_theta_angle();
 800639e:	f7ff fe6b 	bl	8006078 <cal_theta_angle>
 80063a2:	eef0 7a40 	vmov.f32	s15, s0
 80063a6:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <cal_robot_pose+0x220>)
 80063a8:	edc3 7a02 	vstr	s15, [r3, #8]

	g_robotPose_previous.coordinate.x 		= g_robotPose_estimate.coordinate.x;
 80063ac:	4b10      	ldr	r3, [pc, #64]	; (80063f0 <cal_robot_pose+0x220>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a0e      	ldr	r2, [pc, #56]	; (80063ec <cal_robot_pose+0x21c>)
 80063b2:	6013      	str	r3, [r2, #0]
	g_robotPose_previous.coordinate.y 		= g_robotPose_estimate.coordinate.y;
 80063b4:	4b0e      	ldr	r3, [pc, #56]	; (80063f0 <cal_robot_pose+0x220>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	4a0c      	ldr	r2, [pc, #48]	; (80063ec <cal_robot_pose+0x21c>)
 80063ba:	6053      	str	r3, [r2, #4]
	g_robotPose_previous.theta 				= g_robotPose_estimate.theta;
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <cal_robot_pose+0x220>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a0a      	ldr	r2, [pc, #40]	; (80063ec <cal_robot_pose+0x21c>)
 80063c2:	6093      	str	r3, [r2, #8]
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bdb0      	pop	{r4, r5, r7, pc}
 80063cc:	f3af 8000 	nop.w
 80063d0:	54442d18 	.word	0x54442d18
 80063d4:	400921fb 	.word	0x400921fb
 80063d8:	9999999a 	.word	0x9999999a
 80063dc:	3ff99999 	.word	0x3ff99999
 80063e0:	2000039c 	.word	0x2000039c
 80063e4:	40668000 	.word	0x40668000
 80063e8:	200003a4 	.word	0x200003a4
 80063ec:	20000380 	.word	0x20000380
 80063f0:	2000038c 	.word	0x2000038c

080063f4 <get_robot_pose>:
  * @param 		-		None
  *
  * @return		-		Robot pose
  */
Robot_pose_t get_robot_pose(void_t)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b089      	sub	sp, #36	; 0x24
 80063f8:	af00      	add	r7, sp, #0
	return g_robotPose_estimate;
 80063fa:	4a0d      	ldr	r2, [pc, #52]	; (8006430 <get_robot_pose+0x3c>)
 80063fc:	f107 0314 	add.w	r3, r7, #20
 8006400:	ca07      	ldmia	r2, {r0, r1, r2}
 8006402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006406:	6979      	ldr	r1, [r7, #20]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	ee06 1a90 	vmov	s13, r1
 8006410:	ee07 2a10 	vmov	s14, r2
 8006414:	ee07 3a90 	vmov	s15, r3
}
 8006418:	eeb0 0a66 	vmov.f32	s0, s13
 800641c:	eef0 0a47 	vmov.f32	s1, s14
 8006420:	eeb0 1a67 	vmov.f32	s2, s15
 8006424:	3724      	adds	r7, #36	; 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	2000038c 	.word	0x2000038c

08006434 <robot_forward_to_position>:
  * @param 	[des_pose]	: 	destination
  *
  * @return		-		None
  */
void_t robot_forward_to_position(Robot_pose_t des_pose)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	eef0 6a40 	vmov.f32	s13, s0
 800643e:	eeb0 7a60 	vmov.f32	s14, s1
 8006442:	eef0 7a41 	vmov.f32	s15, s2
 8006446:	edc7 6a01 	vstr	s13, [r7, #4]
 800644a:	ed87 7a02 	vstr	s14, [r7, #8]
 800644e:	edc7 7a03 	vstr	s15, [r7, #12]
	g_robotMove = FORWARD;
 8006452:	4b09      	ldr	r3, [pc, #36]	; (8006478 <robot_forward_to_position+0x44>)
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
	g_despose.coordinate.x = des_pose.coordinate.x;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a08      	ldr	r2, [pc, #32]	; (800647c <robot_forward_to_position+0x48>)
 800645c:	6013      	str	r3, [r2, #0]
	g_despose.coordinate.y = des_pose.coordinate.y;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4a06      	ldr	r2, [pc, #24]	; (800647c <robot_forward_to_position+0x48>)
 8006462:	6053      	str	r3, [r2, #4]
	g_despose.theta = des_pose.theta;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4a05      	ldr	r2, [pc, #20]	; (800647c <robot_forward_to_position+0x48>)
 8006468:	6093      	str	r3, [r2, #8]
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	20000379 	.word	0x20000379
 800647c:	200003a8 	.word	0x200003a8

08006480 <cal_distance>:
  * @param 	[des_pos]	: 	destination point
  *
  * @return		-		distance beetween 2 points
  */
float cal_distance(Point_t start_pos, Point_t des_pos)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	ed2d 8b02 	vpush	{d8}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	eeb0 6a40 	vmov.f32	s12, s0
 800648e:	eef0 6a60 	vmov.f32	s13, s1
 8006492:	eeb0 7a41 	vmov.f32	s14, s2
 8006496:	eef0 7a61 	vmov.f32	s15, s3
 800649a:	ed87 6a02 	vstr	s12, [r7, #8]
 800649e:	edc7 6a03 	vstr	s13, [r7, #12]
 80064a2:	ed87 7a00 	vstr	s14, [r7]
 80064a6:	edc7 7a01 	vstr	s15, [r7, #4]
	float x = des_pos.x - start_pos.x;
 80064aa:	ed97 7a00 	vldr	s14, [r7]
 80064ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80064b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b6:	edc7 7a07 	vstr	s15, [r7, #28]
	float y = des_pos.y - start_pos.y;
 80064ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80064be:	edd7 7a03 	vldr	s15, [r7, #12]
 80064c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064c6:	edc7 7a06 	vstr	s15, [r7, #24]
	float res = sqrtf(powf(x, 2) + powf(y, 2));
 80064ca:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80064ce:	ed97 0a07 	vldr	s0, [r7, #28]
 80064d2:	f000 fa99 	bl	8006a08 <powf>
 80064d6:	eeb0 8a40 	vmov.f32	s16, s0
 80064da:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80064de:	ed97 0a06 	vldr	s0, [r7, #24]
 80064e2:	f000 fa91 	bl	8006a08 <powf>
 80064e6:	eef0 7a40 	vmov.f32	s15, s0
 80064ea:	ee78 7a27 	vadd.f32	s15, s16, s15
 80064ee:	eeb0 0a67 	vmov.f32	s0, s15
 80064f2:	f000 fb21 	bl	8006b38 <sqrtf>
 80064f6:	ed87 0a05 	vstr	s0, [r7, #20]
	return res;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	ee07 3a90 	vmov	s15, r3
}
 8006500:	eeb0 0a67 	vmov.f32	s0, s15
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	ecbd 8b02 	vpop	{d8}
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <cal_direction>:

float cal_direction(Point_t start_pos, Point_t des_pos)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	ed2d 8b02 	vpush	{d8}
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	af00      	add	r7, sp, #0
 800651a:	eeb0 6a40 	vmov.f32	s12, s0
 800651e:	eef0 6a60 	vmov.f32	s13, s1
 8006522:	eeb0 7a41 	vmov.f32	s14, s2
 8006526:	eef0 7a61 	vmov.f32	s15, s3
 800652a:	ed87 6a02 	vstr	s12, [r7, #8]
 800652e:	edc7 6a03 	vstr	s13, [r7, #12]
 8006532:	ed87 7a00 	vstr	s14, [r7]
 8006536:	edc7 7a01 	vstr	s15, [r7, #4]
	float x = des_pos.x - start_pos.x;
 800653a:	ed97 7a00 	vldr	s14, [r7]
 800653e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006546:	edc7 7a08 	vstr	s15, [r7, #32]
	float y = des_pos.y - start_pos.y;
 800654a:	ed97 7a01 	vldr	s14, [r7, #4]
 800654e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006556:	edc7 7a07 	vstr	s15, [r7, #28]

	float denominator = sqrtf(powf(x, 2) + powf(y, 2));
 800655a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800655e:	ed97 0a08 	vldr	s0, [r7, #32]
 8006562:	f000 fa51 	bl	8006a08 <powf>
 8006566:	eeb0 8a40 	vmov.f32	s16, s0
 800656a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800656e:	ed97 0a07 	vldr	s0, [r7, #28]
 8006572:	f000 fa49 	bl	8006a08 <powf>
 8006576:	eef0 7a40 	vmov.f32	s15, s0
 800657a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800657e:	eeb0 0a67 	vmov.f32	s0, s15
 8006582:	f000 fad9 	bl	8006b38 <sqrtf>
 8006586:	ed87 0a06 	vstr	s0, [r7, #24]
	float cos_phi = x/denominator;
 800658a:	edd7 6a08 	vldr	s13, [r7, #32]
 800658e:	ed97 7a06 	vldr	s14, [r7, #24]
 8006592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006596:	edc7 7a05 	vstr	s15, [r7, #20]
	float phi = acosf(cos_phi)*180/M_PI;
 800659a:	ed97 0a05 	vldr	s0, [r7, #20]
 800659e:	f000 fa01 	bl	80069a4 <acosf>
 80065a2:	eef0 7a40 	vmov.f32	s15, s0
 80065a6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006610 <cal_direction+0x100>
 80065aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065ae:	ee17 0a90 	vmov	r0, s15
 80065b2:	f7f9 ff6d 	bl	8000490 <__aeabi_f2d>
 80065b6:	a314      	add	r3, pc, #80	; (adr r3, 8006608 <cal_direction+0xf8>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7fa f8ea 	bl	8000794 <__aeabi_ddiv>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4610      	mov	r0, r2
 80065c6:	4619      	mov	r1, r3
 80065c8:	f7fa fa7c 	bl	8000ac4 <__aeabi_d2f>
 80065cc:	4603      	mov	r3, r0
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24

	if(des_pos.y < start_pos.y)
 80065d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80065d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80065d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e0:	d505      	bpl.n	80065ee <cal_direction+0xde>
	{
		phi = -phi;
 80065e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80065e6:	eef1 7a67 	vneg.f32	s15, s15
 80065ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}
	return phi;
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	ee07 3a90 	vmov	s15, r3
}
 80065f4:	eeb0 0a67 	vmov.f32	s0, s15
 80065f8:	3728      	adds	r7, #40	; 0x28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	ecbd 8b02 	vpop	{d8}
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	f3af 8000 	nop.w
 8006608:	54442d18 	.word	0x54442d18
 800660c:	400921fb 	.word	0x400921fb
 8006610:	43340000 	.word	0x43340000

08006614 <get_robot_despose>:
  * @param 	-	None
  *
  * @return		-		destination position
  */
Robot_pose_t get_robot_despose(void_t)
{
 8006614:	b480      	push	{r7}
 8006616:	b089      	sub	sp, #36	; 0x24
 8006618:	af00      	add	r7, sp, #0
	return g_despose;
 800661a:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <get_robot_despose+0x3c>)
 800661c:	f107 0314 	add.w	r3, r7, #20
 8006620:	ca07      	ldmia	r2, {r0, r1, r2}
 8006622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006626:	6979      	ldr	r1, [r7, #20]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	ee06 1a90 	vmov	s13, r1
 8006630:	ee07 2a10 	vmov	s14, r2
 8006634:	ee07 3a90 	vmov	s15, r3
}
 8006638:	eeb0 0a66 	vmov.f32	s0, s13
 800663c:	eef0 0a47 	vmov.f32	s1, s14
 8006640:	eeb0 1a67 	vmov.f32	s2, s15
 8006644:	3724      	adds	r7, #36	; 0x24
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	200003a8 	.word	0x200003a8

08006654 <_ZN10QuaternionC1Ev>:
        float w;
        float x;
        float y;
        float z;
        
        Quaternion() {
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
            w = 1.0f;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006662:	601a      	str	r2, [r3, #0]
            x = 0.0f;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	605a      	str	r2, [r3, #4]
            y = 0.0f;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	609a      	str	r2, [r3, #8]
            z = 0.0f;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	60da      	str	r2, [r3, #12]
        }
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <_ZN11VectorInt16C1Ev>:
    public:
        int16_t x;
        int16_t y;
        int16_t z;

        VectorInt16() {
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
            x = 0;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	801a      	strh	r2, [r3, #0]
            y = 0;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	805a      	strh	r2, [r3, #2]
            z = 0;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	809a      	strh	r2, [r3, #4]
        }
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <_ZN11VectorFloatC1Ev>:
    public:
        float x;
        float y;
        float z;

        VectorFloat() {
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
            x = 0;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
            y = 0;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	605a      	str	r2, [r3, #4]
            z = 0;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	609a      	str	r2, [r3, #8]
        }
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <_Z16MPU_dmpDataReadyv>:
*
* @param 		-		None
*
* @return		-	 	None
*/
void_t MPU_dmpDataReady(void_t) {
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
	g_boMpuInterrupt = TRUE;
 80066e4:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <_Z16MPU_dmpDataReadyv+0x14>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	701a      	strb	r2, [r3, #0]
}
 80066ea:	bf00      	nop
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	200002d4 	.word	0x200002d4

080066f8 <_Z41__static_initialization_and_destruction_0ii>:
	}
	if(g_iwState == 2)
	{
		meansensors();
	}
}
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d113      	bne.n	8006730 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800670e:	4293      	cmp	r3, r2
 8006710:	d10e      	bne.n	8006730 <_Z41__static_initialization_and_destruction_0ii+0x38>
Quaternion g_q;           // [w, x, y, z]         quaternion container
 8006712:	4809      	ldr	r0, [pc, #36]	; (8006738 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006714:	f7ff ff9e 	bl	8006654 <_ZN10QuaternionC1Ev>
VectorInt16 g_Aa;         // [x, y, z]            accel sensor measurements
 8006718:	4808      	ldr	r0, [pc, #32]	; (800673c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800671a:	f7ff ffb6 	bl	800668a <_ZN11VectorInt16C1Ev>
VectorInt16 g_AaReal;     // [x, y, z]            gravity-free accel sensor measurements
 800671e:	4808      	ldr	r0, [pc, #32]	; (8006740 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8006720:	f7ff ffb3 	bl	800668a <_ZN11VectorInt16C1Ev>
VectorFloat g_gravity;    // [x, y, z]            gravity vector
 8006724:	4807      	ldr	r0, [pc, #28]	; (8006744 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8006726:	f7ff ffc4 	bl	80066b2 <_ZN11VectorFloatC1Ev>
MPU6050 g_mpu;
 800672a:	4807      	ldr	r0, [pc, #28]	; (8006748 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800672c:	f000 f816 	bl	800675c <_ZN7MPU6050C1Ev>
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000290 	.word	0x20000290
 800673c:	200002a0 	.word	0x200002a0
 8006740:	200002a8 	.word	0x200002a8
 8006744:	200002b0 	.word	0x200002b0
 8006748:	200002bc 	.word	0x200002bc

0800674c <_GLOBAL__sub_I__ZN7MPU605013dmpInitializeEv>:
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
 8006750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006754:	2001      	movs	r0, #1
 8006756:	f7ff ffcf 	bl	80066f8 <_Z41__static_initialization_and_destruction_0ii>
 800675a:	bd80      	pop	{r7, pc}

0800675c <_ZN7MPU6050C1Ev>:
#include "../MPU6050/MPU6050.h"

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
    devAddr = MPU6050_DEFAULT_ADDRESS;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2268      	movs	r2, #104	; 0x68
 8006768:	719a      	strb	r2, [r3, #6]
}
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <bufEnDat>:
uint8_t
bufEnDat(
    buffqueue_p pQueue,
    uint8_t* pReceiverData,
    uint8_t sizeofReceiverData
) {
 8006778:	b480      	push	{r7}
 800677a:	b087      	sub	sp, #28
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    /* Place data in buffer */
    for (i = 0; i < sizeofReceiverData; i++) {
 8006786:	2300      	movs	r3, #0
 8006788:	75fb      	strb	r3, [r7, #23]
 800678a:	e01b      	b.n	80067c4 <bufEnDat+0x4c>
        pQueue->buffer[pQueue->wHeadIndex] = pReceiverData[i];
 800678c:	7dfb      	ldrb	r3, [r7, #23]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	8852      	ldrh	r2, [r2, #2]
 8006796:	4611      	mov	r1, r2
 8006798:	781a      	ldrb	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	440b      	add	r3, r1
 800679e:	719a      	strb	r2, [r3, #6]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1) & (QUEUE_BUFFER_SIZE - 1));
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	885b      	ldrh	r3, [r3, #2]
 80067a4:	3301      	adds	r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	805a      	strh	r2, [r3, #2]
        pQueue->wCountElement++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	3301      	adds	r3, #1
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < sizeofReceiverData; i++) {
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	3301      	adds	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
 80067c4:	7dfa      	ldrb	r2, [r7, #23]
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d3df      	bcc.n	800678c <bufEnDat+0x14>
    }

    if (pQueue->wCountElement > (QUEUE_BUFFER_SIZE / sizeof(uint8_t))) {
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d90d      	bls.n	80067f0 <bufEnDat+0x78>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wCountElement = (QUEUE_BUFFER_SIZE / sizeof(uint8_t));
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	801a      	strh	r2, [r3, #0]
        pQueue->wTailIndex = (pQueue->wTailIndex + sizeofReceiverData) & (QUEUE_BUFFER_SIZE - 1);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	889a      	ldrh	r2, [r3, #4]
 80067de:	79fb      	ldrb	r3, [r7, #7]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	809a      	strh	r2, [r3, #4]
    }

    return ERR_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <cos>:
 8006800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006802:	ec53 2b10 	vmov	r2, r3, d0
 8006806:	4824      	ldr	r0, [pc, #144]	; (8006898 <cos+0x98>)
 8006808:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800680c:	4281      	cmp	r1, r0
 800680e:	dc06      	bgt.n	800681e <cos+0x1e>
 8006810:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8006890 <cos+0x90>
 8006814:	f000 ff80 	bl	8007718 <__kernel_cos>
 8006818:	ec51 0b10 	vmov	r0, r1, d0
 800681c:	e007      	b.n	800682e <cos+0x2e>
 800681e:	481f      	ldr	r0, [pc, #124]	; (800689c <cos+0x9c>)
 8006820:	4281      	cmp	r1, r0
 8006822:	dd09      	ble.n	8006838 <cos+0x38>
 8006824:	ee10 0a10 	vmov	r0, s0
 8006828:	4619      	mov	r1, r3
 800682a:	f7f9 fcd1 	bl	80001d0 <__aeabi_dsub>
 800682e:	ec41 0b10 	vmov	d0, r0, r1
 8006832:	b005      	add	sp, #20
 8006834:	f85d fb04 	ldr.w	pc, [sp], #4
 8006838:	4668      	mov	r0, sp
 800683a:	f000 f9a5 	bl	8006b88 <__ieee754_rem_pio2>
 800683e:	f000 0003 	and.w	r0, r0, #3
 8006842:	2801      	cmp	r0, #1
 8006844:	d007      	beq.n	8006856 <cos+0x56>
 8006846:	2802      	cmp	r0, #2
 8006848:	d012      	beq.n	8006870 <cos+0x70>
 800684a:	b9c0      	cbnz	r0, 800687e <cos+0x7e>
 800684c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006850:	ed9d 0b00 	vldr	d0, [sp]
 8006854:	e7de      	b.n	8006814 <cos+0x14>
 8006856:	ed9d 1b02 	vldr	d1, [sp, #8]
 800685a:	ed9d 0b00 	vldr	d0, [sp]
 800685e:	f001 fb63 	bl	8007f28 <__kernel_sin>
 8006862:	ec53 2b10 	vmov	r2, r3, d0
 8006866:	ee10 0a10 	vmov	r0, s0
 800686a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800686e:	e7de      	b.n	800682e <cos+0x2e>
 8006870:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006874:	ed9d 0b00 	vldr	d0, [sp]
 8006878:	f000 ff4e 	bl	8007718 <__kernel_cos>
 800687c:	e7f1      	b.n	8006862 <cos+0x62>
 800687e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006882:	ed9d 0b00 	vldr	d0, [sp]
 8006886:	2001      	movs	r0, #1
 8006888:	f001 fb4e 	bl	8007f28 <__kernel_sin>
 800688c:	e7c4      	b.n	8006818 <cos+0x18>
 800688e:	bf00      	nop
	...
 8006898:	3fe921fb 	.word	0x3fe921fb
 800689c:	7fefffff 	.word	0x7fefffff

080068a0 <sin>:
 80068a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068a2:	ec53 2b10 	vmov	r2, r3, d0
 80068a6:	4826      	ldr	r0, [pc, #152]	; (8006940 <sin+0xa0>)
 80068a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80068ac:	4281      	cmp	r1, r0
 80068ae:	dc07      	bgt.n	80068c0 <sin+0x20>
 80068b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006938 <sin+0x98>
 80068b4:	2000      	movs	r0, #0
 80068b6:	f001 fb37 	bl	8007f28 <__kernel_sin>
 80068ba:	ec51 0b10 	vmov	r0, r1, d0
 80068be:	e007      	b.n	80068d0 <sin+0x30>
 80068c0:	4820      	ldr	r0, [pc, #128]	; (8006944 <sin+0xa4>)
 80068c2:	4281      	cmp	r1, r0
 80068c4:	dd09      	ble.n	80068da <sin+0x3a>
 80068c6:	ee10 0a10 	vmov	r0, s0
 80068ca:	4619      	mov	r1, r3
 80068cc:	f7f9 fc80 	bl	80001d0 <__aeabi_dsub>
 80068d0:	ec41 0b10 	vmov	d0, r0, r1
 80068d4:	b005      	add	sp, #20
 80068d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80068da:	4668      	mov	r0, sp
 80068dc:	f000 f954 	bl	8006b88 <__ieee754_rem_pio2>
 80068e0:	f000 0003 	and.w	r0, r0, #3
 80068e4:	2801      	cmp	r0, #1
 80068e6:	d008      	beq.n	80068fa <sin+0x5a>
 80068e8:	2802      	cmp	r0, #2
 80068ea:	d00d      	beq.n	8006908 <sin+0x68>
 80068ec:	b9d0      	cbnz	r0, 8006924 <sin+0x84>
 80068ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068f2:	ed9d 0b00 	vldr	d0, [sp]
 80068f6:	2001      	movs	r0, #1
 80068f8:	e7dd      	b.n	80068b6 <sin+0x16>
 80068fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068fe:	ed9d 0b00 	vldr	d0, [sp]
 8006902:	f000 ff09 	bl	8007718 <__kernel_cos>
 8006906:	e7d8      	b.n	80068ba <sin+0x1a>
 8006908:	ed9d 1b02 	vldr	d1, [sp, #8]
 800690c:	ed9d 0b00 	vldr	d0, [sp]
 8006910:	2001      	movs	r0, #1
 8006912:	f001 fb09 	bl	8007f28 <__kernel_sin>
 8006916:	ec53 2b10 	vmov	r2, r3, d0
 800691a:	ee10 0a10 	vmov	r0, s0
 800691e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006922:	e7d5      	b.n	80068d0 <sin+0x30>
 8006924:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006928:	ed9d 0b00 	vldr	d0, [sp]
 800692c:	f000 fef4 	bl	8007718 <__kernel_cos>
 8006930:	e7f1      	b.n	8006916 <sin+0x76>
 8006932:	bf00      	nop
 8006934:	f3af 8000 	nop.w
	...
 8006940:	3fe921fb 	.word	0x3fe921fb
 8006944:	7fefffff 	.word	0x7fefffff

08006948 <fabsf>:
 8006948:	ee10 3a10 	vmov	r3, s0
 800694c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006950:	ee00 3a10 	vmov	s0, r3
 8006954:	4770      	bx	lr
	...

08006958 <roundf>:
 8006958:	ee10 0a10 	vmov	r0, s0
 800695c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006960:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8006964:	2a16      	cmp	r2, #22
 8006966:	dc15      	bgt.n	8006994 <roundf+0x3c>
 8006968:	2a00      	cmp	r2, #0
 800696a:	da08      	bge.n	800697e <roundf+0x26>
 800696c:	3201      	adds	r2, #1
 800696e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8006972:	d101      	bne.n	8006978 <roundf+0x20>
 8006974:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8006978:	ee00 3a10 	vmov	s0, r3
 800697c:	4770      	bx	lr
 800697e:	4908      	ldr	r1, [pc, #32]	; (80069a0 <roundf+0x48>)
 8006980:	4111      	asrs	r1, r2
 8006982:	4208      	tst	r0, r1
 8006984:	d0fa      	beq.n	800697c <roundf+0x24>
 8006986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800698a:	4113      	asrs	r3, r2
 800698c:	4403      	add	r3, r0
 800698e:	ea23 0301 	bic.w	r3, r3, r1
 8006992:	e7f1      	b.n	8006978 <roundf+0x20>
 8006994:	2a80      	cmp	r2, #128	; 0x80
 8006996:	d1f1      	bne.n	800697c <roundf+0x24>
 8006998:	ee30 0a00 	vadd.f32	s0, s0, s0
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	007fffff 	.word	0x007fffff

080069a4 <acosf>:
 80069a4:	b508      	push	{r3, lr}
 80069a6:	ed2d 8b02 	vpush	{d8}
 80069aa:	eeb0 8a40 	vmov.f32	s16, s0
 80069ae:	f000 faf5 	bl	8006f9c <__ieee754_acosf>
 80069b2:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <acosf+0x5c>)
 80069b4:	f993 3000 	ldrsb.w	r3, [r3]
 80069b8:	3301      	adds	r3, #1
 80069ba:	eef0 8a40 	vmov.f32	s17, s0
 80069be:	d01a      	beq.n	80069f6 <acosf+0x52>
 80069c0:	eeb4 8a48 	vcmp.f32	s16, s16
 80069c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c8:	d615      	bvs.n	80069f6 <acosf+0x52>
 80069ca:	eeb0 0a48 	vmov.f32	s0, s16
 80069ce:	f7ff ffbb 	bl	8006948 <fabsf>
 80069d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80069d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80069da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069de:	dd0a      	ble.n	80069f6 <acosf+0x52>
 80069e0:	f001 fd52 	bl	8008488 <__errno>
 80069e4:	ecbd 8b02 	vpop	{d8}
 80069e8:	2321      	movs	r3, #33	; 0x21
 80069ea:	6003      	str	r3, [r0, #0]
 80069ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80069f0:	4804      	ldr	r0, [pc, #16]	; (8006a04 <acosf+0x60>)
 80069f2:	f001 bc75 	b.w	80082e0 <nanf>
 80069f6:	eeb0 0a68 	vmov.f32	s0, s17
 80069fa:	ecbd 8b02 	vpop	{d8}
 80069fe:	bd08      	pop	{r3, pc}
 8006a00:	2000000c 	.word	0x2000000c
 8006a04:	08008520 	.word	0x08008520

08006a08 <powf>:
 8006a08:	b508      	push	{r3, lr}
 8006a0a:	ed2d 8b04 	vpush	{d8-d9}
 8006a0e:	eeb0 9a40 	vmov.f32	s18, s0
 8006a12:	eef0 8a60 	vmov.f32	s17, s1
 8006a16:	f000 fbbb 	bl	8007190 <__ieee754_powf>
 8006a1a:	4b43      	ldr	r3, [pc, #268]	; (8006b28 <powf+0x120>)
 8006a1c:	f993 3000 	ldrsb.w	r3, [r3]
 8006a20:	3301      	adds	r3, #1
 8006a22:	eeb0 8a40 	vmov.f32	s16, s0
 8006a26:	d012      	beq.n	8006a4e <powf+0x46>
 8006a28:	eef4 8a68 	vcmp.f32	s17, s17
 8006a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a30:	d60d      	bvs.n	8006a4e <powf+0x46>
 8006a32:	eeb4 9a49 	vcmp.f32	s18, s18
 8006a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3a:	d70d      	bvc.n	8006a58 <powf+0x50>
 8006a3c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006a48:	bf08      	it	eq
 8006a4a:	eeb0 8a67 	vmoveq.f32	s16, s15
 8006a4e:	eeb0 0a48 	vmov.f32	s0, s16
 8006a52:	ecbd 8b04 	vpop	{d8-d9}
 8006a56:	bd08      	pop	{r3, pc}
 8006a58:	eddf 9a34 	vldr	s19, [pc, #208]	; 8006b2c <powf+0x124>
 8006a5c:	eeb4 9a69 	vcmp.f32	s18, s19
 8006a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a64:	d116      	bne.n	8006a94 <powf+0x8c>
 8006a66:	eef4 8a69 	vcmp.f32	s17, s19
 8006a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6e:	d057      	beq.n	8006b20 <powf+0x118>
 8006a70:	eeb0 0a68 	vmov.f32	s0, s17
 8006a74:	f001 fc26 	bl	80082c4 <finitef>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d0e8      	beq.n	8006a4e <powf+0x46>
 8006a7c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8006a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a84:	d5e3      	bpl.n	8006a4e <powf+0x46>
 8006a86:	f001 fcff 	bl	8008488 <__errno>
 8006a8a:	2321      	movs	r3, #33	; 0x21
 8006a8c:	6003      	str	r3, [r0, #0]
 8006a8e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8006b30 <powf+0x128>
 8006a92:	e7dc      	b.n	8006a4e <powf+0x46>
 8006a94:	f001 fc16 	bl	80082c4 <finitef>
 8006a98:	bb50      	cbnz	r0, 8006af0 <powf+0xe8>
 8006a9a:	eeb0 0a49 	vmov.f32	s0, s18
 8006a9e:	f001 fc11 	bl	80082c4 <finitef>
 8006aa2:	b328      	cbz	r0, 8006af0 <powf+0xe8>
 8006aa4:	eeb0 0a68 	vmov.f32	s0, s17
 8006aa8:	f001 fc0c 	bl	80082c4 <finitef>
 8006aac:	b300      	cbz	r0, 8006af0 <powf+0xe8>
 8006aae:	eeb4 8a48 	vcmp.f32	s16, s16
 8006ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab6:	d706      	bvc.n	8006ac6 <powf+0xbe>
 8006ab8:	f001 fce6 	bl	8008488 <__errno>
 8006abc:	2321      	movs	r3, #33	; 0x21
 8006abe:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8006ac2:	6003      	str	r3, [r0, #0]
 8006ac4:	e7c3      	b.n	8006a4e <powf+0x46>
 8006ac6:	f001 fcdf 	bl	8008488 <__errno>
 8006aca:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006ace:	2322      	movs	r3, #34	; 0x22
 8006ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad4:	6003      	str	r3, [r0, #0]
 8006ad6:	d508      	bpl.n	8006aea <powf+0xe2>
 8006ad8:	eeb0 0a68 	vmov.f32	s0, s17
 8006adc:	f001 fc06 	bl	80082ec <rintf>
 8006ae0:	eeb4 0a68 	vcmp.f32	s0, s17
 8006ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae8:	d1d1      	bne.n	8006a8e <powf+0x86>
 8006aea:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8006b34 <powf+0x12c>
 8006aee:	e7ae      	b.n	8006a4e <powf+0x46>
 8006af0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af8:	d1a9      	bne.n	8006a4e <powf+0x46>
 8006afa:	eeb0 0a49 	vmov.f32	s0, s18
 8006afe:	f001 fbe1 	bl	80082c4 <finitef>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d0a3      	beq.n	8006a4e <powf+0x46>
 8006b06:	eeb0 0a68 	vmov.f32	s0, s17
 8006b0a:	f001 fbdb 	bl	80082c4 <finitef>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d09d      	beq.n	8006a4e <powf+0x46>
 8006b12:	f001 fcb9 	bl	8008488 <__errno>
 8006b16:	2322      	movs	r3, #34	; 0x22
 8006b18:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8006b2c <powf+0x124>
 8006b1c:	6003      	str	r3, [r0, #0]
 8006b1e:	e796      	b.n	8006a4e <powf+0x46>
 8006b20:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006b24:	e793      	b.n	8006a4e <powf+0x46>
 8006b26:	bf00      	nop
 8006b28:	2000000c 	.word	0x2000000c
 8006b2c:	00000000 	.word	0x00000000
 8006b30:	ff800000 	.word	0xff800000
 8006b34:	7f800000 	.word	0x7f800000

08006b38 <sqrtf>:
 8006b38:	b508      	push	{r3, lr}
 8006b3a:	ed2d 8b02 	vpush	{d8}
 8006b3e:	eeb0 8a40 	vmov.f32	s16, s0
 8006b42:	f000 fde5 	bl	8007710 <__ieee754_sqrtf>
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <sqrtf+0x44>)
 8006b48:	f993 3000 	ldrsb.w	r3, [r3]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	d011      	beq.n	8006b74 <sqrtf+0x3c>
 8006b50:	eeb4 8a48 	vcmp.f32	s16, s16
 8006b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b58:	d60c      	bvs.n	8006b74 <sqrtf+0x3c>
 8006b5a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006b80 <sqrtf+0x48>
 8006b5e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b66:	d505      	bpl.n	8006b74 <sqrtf+0x3c>
 8006b68:	f001 fc8e 	bl	8008488 <__errno>
 8006b6c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006b70:	2321      	movs	r3, #33	; 0x21
 8006b72:	6003      	str	r3, [r0, #0]
 8006b74:	ecbd 8b02 	vpop	{d8}
 8006b78:	bd08      	pop	{r3, pc}
 8006b7a:	bf00      	nop
 8006b7c:	2000000c 	.word	0x2000000c
	...

08006b88 <__ieee754_rem_pio2>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	ed2d 8b02 	vpush	{d8}
 8006b90:	ec55 4b10 	vmov	r4, r5, d0
 8006b94:	4bca      	ldr	r3, [pc, #808]	; (8006ec0 <__ieee754_rem_pio2+0x338>)
 8006b96:	b08b      	sub	sp, #44	; 0x2c
 8006b98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006b9c:	4598      	cmp	r8, r3
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	9502      	str	r5, [sp, #8]
 8006ba2:	dc08      	bgt.n	8006bb6 <__ieee754_rem_pio2+0x2e>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	ed80 0b00 	vstr	d0, [r0]
 8006bac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006bb0:	f04f 0b00 	mov.w	fp, #0
 8006bb4:	e028      	b.n	8006c08 <__ieee754_rem_pio2+0x80>
 8006bb6:	4bc3      	ldr	r3, [pc, #780]	; (8006ec4 <__ieee754_rem_pio2+0x33c>)
 8006bb8:	4598      	cmp	r8, r3
 8006bba:	dc78      	bgt.n	8006cae <__ieee754_rem_pio2+0x126>
 8006bbc:	9b02      	ldr	r3, [sp, #8]
 8006bbe:	4ec2      	ldr	r6, [pc, #776]	; (8006ec8 <__ieee754_rem_pio2+0x340>)
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	ee10 0a10 	vmov	r0, s0
 8006bc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006e88 <__ieee754_rem_pio2+0x300>)
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	4629      	mov	r1, r5
 8006bce:	dd39      	ble.n	8006c44 <__ieee754_rem_pio2+0xbc>
 8006bd0:	f7f9 fafe 	bl	80001d0 <__aeabi_dsub>
 8006bd4:	45b0      	cmp	r8, r6
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460d      	mov	r5, r1
 8006bda:	d01b      	beq.n	8006c14 <__ieee754_rem_pio2+0x8c>
 8006bdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006e90 <__ieee754_rem_pio2+0x308>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 faf5 	bl	80001d0 <__aeabi_dsub>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	e9ca 2300 	strd	r2, r3, [sl]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	f7f9 faed 	bl	80001d0 <__aeabi_dsub>
 8006bf6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006e90 <__ieee754_rem_pio2+0x308>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f7f9 fae8 	bl	80001d0 <__aeabi_dsub>
 8006c00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c04:	f04f 0b01 	mov.w	fp, #1
 8006c08:	4658      	mov	r0, fp
 8006c0a:	b00b      	add	sp, #44	; 0x2c
 8006c0c:	ecbd 8b02 	vpop	{d8}
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c14:	a3a0      	add	r3, pc, #640	; (adr r3, 8006e98 <__ieee754_rem_pio2+0x310>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fad9 	bl	80001d0 <__aeabi_dsub>
 8006c1e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ea0 <__ieee754_rem_pio2+0x318>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	4604      	mov	r4, r0
 8006c26:	460d      	mov	r5, r1
 8006c28:	f7f9 fad2 	bl	80001d0 <__aeabi_dsub>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	e9ca 2300 	strd	r2, r3, [sl]
 8006c34:	4620      	mov	r0, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	f7f9 faca 	bl	80001d0 <__aeabi_dsub>
 8006c3c:	a398      	add	r3, pc, #608	; (adr r3, 8006ea0 <__ieee754_rem_pio2+0x318>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	e7db      	b.n	8006bfc <__ieee754_rem_pio2+0x74>
 8006c44:	f7f9 fac6 	bl	80001d4 <__adddf3>
 8006c48:	45b0      	cmp	r8, r6
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	460d      	mov	r5, r1
 8006c4e:	d016      	beq.n	8006c7e <__ieee754_rem_pio2+0xf6>
 8006c50:	a38f      	add	r3, pc, #572	; (adr r3, 8006e90 <__ieee754_rem_pio2+0x308>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f7f9 fabd 	bl	80001d4 <__adddf3>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	e9ca 2300 	strd	r2, r3, [sl]
 8006c62:	4620      	mov	r0, r4
 8006c64:	4629      	mov	r1, r5
 8006c66:	f7f9 fab3 	bl	80001d0 <__aeabi_dsub>
 8006c6a:	a389      	add	r3, pc, #548	; (adr r3, 8006e90 <__ieee754_rem_pio2+0x308>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f7f9 fab0 	bl	80001d4 <__adddf3>
 8006c74:	f04f 3bff 	mov.w	fp, #4294967295
 8006c78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c7c:	e7c4      	b.n	8006c08 <__ieee754_rem_pio2+0x80>
 8006c7e:	a386      	add	r3, pc, #536	; (adr r3, 8006e98 <__ieee754_rem_pio2+0x310>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 faa6 	bl	80001d4 <__adddf3>
 8006c88:	a385      	add	r3, pc, #532	; (adr r3, 8006ea0 <__ieee754_rem_pio2+0x318>)
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	4604      	mov	r4, r0
 8006c90:	460d      	mov	r5, r1
 8006c92:	f7f9 fa9f 	bl	80001d4 <__adddf3>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	e9ca 2300 	strd	r2, r3, [sl]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 fa95 	bl	80001d0 <__aeabi_dsub>
 8006ca6:	a37e      	add	r3, pc, #504	; (adr r3, 8006ea0 <__ieee754_rem_pio2+0x318>)
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	e7e0      	b.n	8006c70 <__ieee754_rem_pio2+0xe8>
 8006cae:	4b87      	ldr	r3, [pc, #540]	; (8006ecc <__ieee754_rem_pio2+0x344>)
 8006cb0:	4598      	cmp	r8, r3
 8006cb2:	f300 80d9 	bgt.w	8006e68 <__ieee754_rem_pio2+0x2e0>
 8006cb6:	f001 f9f5 	bl	80080a4 <fabs>
 8006cba:	ec55 4b10 	vmov	r4, r5, d0
 8006cbe:	ee10 0a10 	vmov	r0, s0
 8006cc2:	a379      	add	r3, pc, #484	; (adr r3, 8006ea8 <__ieee754_rem_pio2+0x320>)
 8006cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 fc39 	bl	8000540 <__aeabi_dmul>
 8006cce:	4b80      	ldr	r3, [pc, #512]	; (8006ed0 <__ieee754_rem_pio2+0x348>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f7f9 fa7f 	bl	80001d4 <__adddf3>
 8006cd6:	f7f9 fecd 	bl	8000a74 <__aeabi_d2iz>
 8006cda:	4683      	mov	fp, r0
 8006cdc:	f7f9 fbc6 	bl	800046c <__aeabi_i2d>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	ec43 2b18 	vmov	d8, r2, r3
 8006ce8:	a367      	add	r3, pc, #412	; (adr r3, 8006e88 <__ieee754_rem_pio2+0x300>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fc27 	bl	8000540 <__aeabi_dmul>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f7f9 fa69 	bl	80001d0 <__aeabi_dsub>
 8006cfe:	a364      	add	r3, pc, #400	; (adr r3, 8006e90 <__ieee754_rem_pio2+0x308>)
 8006d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d04:	4606      	mov	r6, r0
 8006d06:	460f      	mov	r7, r1
 8006d08:	ec51 0b18 	vmov	r0, r1, d8
 8006d0c:	f7f9 fc18 	bl	8000540 <__aeabi_dmul>
 8006d10:	f1bb 0f1f 	cmp.w	fp, #31
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
 8006d18:	dc0d      	bgt.n	8006d36 <__ieee754_rem_pio2+0x1ae>
 8006d1a:	4b6e      	ldr	r3, [pc, #440]	; (8006ed4 <__ieee754_rem_pio2+0x34c>)
 8006d1c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	4543      	cmp	r3, r8
 8006d26:	d006      	beq.n	8006d36 <__ieee754_rem_pio2+0x1ae>
 8006d28:	4622      	mov	r2, r4
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	4639      	mov	r1, r7
 8006d30:	f7f9 fa4e 	bl	80001d0 <__aeabi_dsub>
 8006d34:	e00f      	b.n	8006d56 <__ieee754_rem_pio2+0x1ce>
 8006d36:	462b      	mov	r3, r5
 8006d38:	4622      	mov	r2, r4
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7f9 fa47 	bl	80001d0 <__aeabi_dsub>
 8006d42:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d46:	9303      	str	r3, [sp, #12]
 8006d48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d4c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006d50:	f1b8 0f10 	cmp.w	r8, #16
 8006d54:	dc02      	bgt.n	8006d5c <__ieee754_rem_pio2+0x1d4>
 8006d56:	e9ca 0100 	strd	r0, r1, [sl]
 8006d5a:	e039      	b.n	8006dd0 <__ieee754_rem_pio2+0x248>
 8006d5c:	a34e      	add	r3, pc, #312	; (adr r3, 8006e98 <__ieee754_rem_pio2+0x310>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	ec51 0b18 	vmov	r0, r1, d8
 8006d66:	f7f9 fbeb 	bl	8000540 <__aeabi_dmul>
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	4630      	mov	r0, r6
 8006d74:	4639      	mov	r1, r7
 8006d76:	f7f9 fa2b 	bl	80001d0 <__aeabi_dsub>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4680      	mov	r8, r0
 8006d80:	4689      	mov	r9, r1
 8006d82:	4630      	mov	r0, r6
 8006d84:	4639      	mov	r1, r7
 8006d86:	f7f9 fa23 	bl	80001d0 <__aeabi_dsub>
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	f7f9 fa1f 	bl	80001d0 <__aeabi_dsub>
 8006d92:	a343      	add	r3, pc, #268	; (adr r3, 8006ea0 <__ieee754_rem_pio2+0x318>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	4604      	mov	r4, r0
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	ec51 0b18 	vmov	r0, r1, d8
 8006da0:	f7f9 fbce 	bl	8000540 <__aeabi_dmul>
 8006da4:	4622      	mov	r2, r4
 8006da6:	462b      	mov	r3, r5
 8006da8:	f7f9 fa12 	bl	80001d0 <__aeabi_dsub>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4604      	mov	r4, r0
 8006db2:	460d      	mov	r5, r1
 8006db4:	4640      	mov	r0, r8
 8006db6:	4649      	mov	r1, r9
 8006db8:	f7f9 fa0a 	bl	80001d0 <__aeabi_dsub>
 8006dbc:	9a03      	ldr	r2, [sp, #12]
 8006dbe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b31      	cmp	r3, #49	; 0x31
 8006dc6:	dc24      	bgt.n	8006e12 <__ieee754_rem_pio2+0x28a>
 8006dc8:	e9ca 0100 	strd	r0, r1, [sl]
 8006dcc:	4646      	mov	r6, r8
 8006dce:	464f      	mov	r7, r9
 8006dd0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	464b      	mov	r3, r9
 8006dda:	4639      	mov	r1, r7
 8006ddc:	f7f9 f9f8 	bl	80001d0 <__aeabi_dsub>
 8006de0:	462b      	mov	r3, r5
 8006de2:	4622      	mov	r2, r4
 8006de4:	f7f9 f9f4 	bl	80001d0 <__aeabi_dsub>
 8006de8:	9b02      	ldr	r3, [sp, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006df0:	f6bf af0a 	bge.w	8006c08 <__ieee754_rem_pio2+0x80>
 8006df4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006df8:	f8ca 3004 	str.w	r3, [sl, #4]
 8006dfc:	f8ca 8000 	str.w	r8, [sl]
 8006e00:	f8ca 0008 	str.w	r0, [sl, #8]
 8006e04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e08:	f8ca 300c 	str.w	r3, [sl, #12]
 8006e0c:	f1cb 0b00 	rsb	fp, fp, #0
 8006e10:	e6fa      	b.n	8006c08 <__ieee754_rem_pio2+0x80>
 8006e12:	a327      	add	r3, pc, #156	; (adr r3, 8006eb0 <__ieee754_rem_pio2+0x328>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	ec51 0b18 	vmov	r0, r1, d8
 8006e1c:	f7f9 fb90 	bl	8000540 <__aeabi_dmul>
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4640      	mov	r0, r8
 8006e2a:	4649      	mov	r1, r9
 8006e2c:	f7f9 f9d0 	bl	80001d0 <__aeabi_dsub>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	4640      	mov	r0, r8
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	f7f9 f9c8 	bl	80001d0 <__aeabi_dsub>
 8006e40:	4622      	mov	r2, r4
 8006e42:	462b      	mov	r3, r5
 8006e44:	f7f9 f9c4 	bl	80001d0 <__aeabi_dsub>
 8006e48:	a31b      	add	r3, pc, #108	; (adr r3, 8006eb8 <__ieee754_rem_pio2+0x330>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	4604      	mov	r4, r0
 8006e50:	460d      	mov	r5, r1
 8006e52:	ec51 0b18 	vmov	r0, r1, d8
 8006e56:	f7f9 fb73 	bl	8000540 <__aeabi_dmul>
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	f7f9 f9b7 	bl	80001d0 <__aeabi_dsub>
 8006e62:	4604      	mov	r4, r0
 8006e64:	460d      	mov	r5, r1
 8006e66:	e75f      	b.n	8006d28 <__ieee754_rem_pio2+0x1a0>
 8006e68:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <__ieee754_rem_pio2+0x350>)
 8006e6a:	4598      	cmp	r8, r3
 8006e6c:	dd36      	ble.n	8006edc <__ieee754_rem_pio2+0x354>
 8006e6e:	ee10 2a10 	vmov	r2, s0
 8006e72:	462b      	mov	r3, r5
 8006e74:	4620      	mov	r0, r4
 8006e76:	4629      	mov	r1, r5
 8006e78:	f7f9 f9aa 	bl	80001d0 <__aeabi_dsub>
 8006e7c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e80:	e9ca 0100 	strd	r0, r1, [sl]
 8006e84:	e694      	b.n	8006bb0 <__ieee754_rem_pio2+0x28>
 8006e86:	bf00      	nop
 8006e88:	54400000 	.word	0x54400000
 8006e8c:	3ff921fb 	.word	0x3ff921fb
 8006e90:	1a626331 	.word	0x1a626331
 8006e94:	3dd0b461 	.word	0x3dd0b461
 8006e98:	1a600000 	.word	0x1a600000
 8006e9c:	3dd0b461 	.word	0x3dd0b461
 8006ea0:	2e037073 	.word	0x2e037073
 8006ea4:	3ba3198a 	.word	0x3ba3198a
 8006ea8:	6dc9c883 	.word	0x6dc9c883
 8006eac:	3fe45f30 	.word	0x3fe45f30
 8006eb0:	2e000000 	.word	0x2e000000
 8006eb4:	3ba3198a 	.word	0x3ba3198a
 8006eb8:	252049c1 	.word	0x252049c1
 8006ebc:	397b839a 	.word	0x397b839a
 8006ec0:	3fe921fb 	.word	0x3fe921fb
 8006ec4:	4002d97b 	.word	0x4002d97b
 8006ec8:	3ff921fb 	.word	0x3ff921fb
 8006ecc:	413921fb 	.word	0x413921fb
 8006ed0:	3fe00000 	.word	0x3fe00000
 8006ed4:	08008524 	.word	0x08008524
 8006ed8:	7fefffff 	.word	0x7fefffff
 8006edc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006ee0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006ee4:	ee10 0a10 	vmov	r0, s0
 8006ee8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006eec:	ee10 6a10 	vmov	r6, s0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	f7f9 fdbf 	bl	8000a74 <__aeabi_d2iz>
 8006ef6:	f7f9 fab9 	bl	800046c <__aeabi_i2d>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4630      	mov	r0, r6
 8006f00:	4639      	mov	r1, r7
 8006f02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f06:	f7f9 f963 	bl	80001d0 <__aeabi_dsub>
 8006f0a:	4b22      	ldr	r3, [pc, #136]	; (8006f94 <__ieee754_rem_pio2+0x40c>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f7f9 fb17 	bl	8000540 <__aeabi_dmul>
 8006f12:	460f      	mov	r7, r1
 8006f14:	4606      	mov	r6, r0
 8006f16:	f7f9 fdad 	bl	8000a74 <__aeabi_d2iz>
 8006f1a:	f7f9 faa7 	bl	800046c <__aeabi_i2d>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4630      	mov	r0, r6
 8006f24:	4639      	mov	r1, r7
 8006f26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f2a:	f7f9 f951 	bl	80001d0 <__aeabi_dsub>
 8006f2e:	4b19      	ldr	r3, [pc, #100]	; (8006f94 <__ieee754_rem_pio2+0x40c>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	f7f9 fb05 	bl	8000540 <__aeabi_dmul>
 8006f36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f3a:	ad04      	add	r5, sp, #16
 8006f3c:	f04f 0803 	mov.w	r8, #3
 8006f40:	46a9      	mov	r9, r5
 8006f42:	2600      	movs	r6, #0
 8006f44:	2700      	movs	r7, #0
 8006f46:	4632      	mov	r2, r6
 8006f48:	463b      	mov	r3, r7
 8006f4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006f4e:	46c3      	mov	fp, r8
 8006f50:	3d08      	subs	r5, #8
 8006f52:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f56:	f7f9 fd5b 	bl	8000a10 <__aeabi_dcmpeq>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d1f3      	bne.n	8006f46 <__ieee754_rem_pio2+0x3be>
 8006f5e:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <__ieee754_rem_pio2+0x410>)
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	2302      	movs	r3, #2
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4622      	mov	r2, r4
 8006f68:	465b      	mov	r3, fp
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	4648      	mov	r0, r9
 8006f6e:	f000 fc9b 	bl	80078a8 <__kernel_rem_pio2>
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	4683      	mov	fp, r0
 8006f78:	f6bf ae46 	bge.w	8006c08 <__ieee754_rem_pio2+0x80>
 8006f7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006f80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f84:	f8ca 3004 	str.w	r3, [sl, #4]
 8006f88:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006f8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006f90:	e73a      	b.n	8006e08 <__ieee754_rem_pio2+0x280>
 8006f92:	bf00      	nop
 8006f94:	41700000 	.word	0x41700000
 8006f98:	080085a4 	.word	0x080085a4

08006f9c <__ieee754_acosf>:
 8006f9c:	b508      	push	{r3, lr}
 8006f9e:	ee10 3a10 	vmov	r3, s0
 8006fa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fa6:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8006faa:	ed2d 8b0c 	vpush	{d8-d13}
 8006fae:	d10a      	bne.n	8006fc6 <__ieee754_acosf+0x2a>
 8006fb0:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800714c <__ieee754_acosf+0x1b0>
 8006fb4:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8007150 <__ieee754_acosf+0x1b4>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bfd8      	it	le
 8006fbc:	eeb0 0a48 	vmovle.f32	s0, s16
 8006fc0:	ecbd 8b0c 	vpop	{d8-d13}
 8006fc4:	bd08      	pop	{r3, pc}
 8006fc6:	dd04      	ble.n	8006fd2 <__ieee754_acosf+0x36>
 8006fc8:	ee30 8a40 	vsub.f32	s16, s0, s0
 8006fcc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006fd0:	e7f6      	b.n	8006fc0 <__ieee754_acosf+0x24>
 8006fd2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8006fd6:	da3e      	bge.n	8007056 <__ieee754_acosf+0xba>
 8006fd8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8006fdc:	f340 80b3 	ble.w	8007146 <__ieee754_acosf+0x1aa>
 8006fe0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8006fe4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8007154 <__ieee754_acosf+0x1b8>
 8006fe8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8007158 <__ieee754_acosf+0x1bc>
 8006fec:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800715c <__ieee754_acosf+0x1c0>
 8006ff0:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8007160 <__ieee754_acosf+0x1c4>
 8006ff4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006ff8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8007164 <__ieee754_acosf+0x1c8>
 8006ffc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007000:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8007168 <__ieee754_acosf+0x1cc>
 8007004:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007008:	eddf 6a58 	vldr	s13, [pc, #352]	; 800716c <__ieee754_acosf+0x1d0>
 800700c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007010:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8007170 <__ieee754_acosf+0x1d4>
 8007014:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007018:	eddf 6a56 	vldr	s13, [pc, #344]	; 8007174 <__ieee754_acosf+0x1d8>
 800701c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8007020:	eddf 6a55 	vldr	s13, [pc, #340]	; 8007178 <__ieee754_acosf+0x1dc>
 8007024:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007028:	ed9f 6a54 	vldr	s12, [pc, #336]	; 800717c <__ieee754_acosf+0x1e0>
 800702c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8007030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007034:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800703c:	eef0 7a66 	vmov.f32	s15, s13
 8007040:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007044:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007180 <__ieee754_acosf+0x1e4>
 8007048:	eea0 8a66 	vfms.f32	s16, s0, s13
 800704c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007050:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007054:	e7b4      	b.n	8006fc0 <__ieee754_acosf+0x24>
 8007056:	2b00      	cmp	r3, #0
 8007058:	eddf da3e 	vldr	s27, [pc, #248]	; 8007154 <__ieee754_acosf+0x1b8>
 800705c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8007158 <__ieee754_acosf+0x1bc>
 8007060:	ed9f ca40 	vldr	s24, [pc, #256]	; 8007164 <__ieee754_acosf+0x1c8>
 8007064:	eddf ba40 	vldr	s23, [pc, #256]	; 8007168 <__ieee754_acosf+0x1cc>
 8007068:	ed9f ba40 	vldr	s22, [pc, #256]	; 800716c <__ieee754_acosf+0x1d0>
 800706c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8007170 <__ieee754_acosf+0x1d4>
 8007070:	ed9f da40 	vldr	s26, [pc, #256]	; 8007174 <__ieee754_acosf+0x1d8>
 8007074:	eddf aa39 	vldr	s21, [pc, #228]	; 800715c <__ieee754_acosf+0x1c0>
 8007078:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8007178 <__ieee754_acosf+0x1dc>
 800707c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 800717c <__ieee754_acosf+0x1e0>
 8007080:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8007084:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007088:	da28      	bge.n	80070dc <__ieee754_acosf+0x140>
 800708a:	ee30 0a09 	vadd.f32	s0, s0, s18
 800708e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007092:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8007096:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800709a:	eeac ca80 	vfma.f32	s24, s25, s0
 800709e:	eeaa aa80 	vfma.f32	s20, s21, s0
 80070a2:	eeec ba00 	vfma.f32	s23, s24, s0
 80070a6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80070aa:	eeab ba80 	vfma.f32	s22, s23, s0
 80070ae:	eea9 9a80 	vfma.f32	s18, s19, s0
 80070b2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80070b6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80070ba:	f000 fb29 	bl	8007710 <__ieee754_sqrtf>
 80070be:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80070c2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8007184 <__ieee754_acosf+0x1e8>
 80070c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80070ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80070ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80070d2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8007188 <__ieee754_acosf+0x1ec>
 80070d6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80070da:	e771      	b.n	8006fc0 <__ieee754_acosf+0x24>
 80070dc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80070e0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80070e4:	eeb0 0a48 	vmov.f32	s0, s16
 80070e8:	f000 fb12 	bl	8007710 <__ieee754_sqrtf>
 80070ec:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80070f0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80070f4:	eeac ca88 	vfma.f32	s24, s25, s16
 80070f8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80070fc:	eeec ba08 	vfma.f32	s23, s24, s16
 8007100:	ee10 3a10 	vmov	r3, s0
 8007104:	eeab ba88 	vfma.f32	s22, s23, s16
 8007108:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800710c:	f023 030f 	bic.w	r3, r3, #15
 8007110:	eeea 9a08 	vfma.f32	s19, s20, s16
 8007114:	ee07 3a90 	vmov	s15, r3
 8007118:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800711c:	eeb0 6a48 	vmov.f32	s12, s16
 8007120:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8007124:	eea9 9a88 	vfma.f32	s18, s19, s16
 8007128:	ee70 6a27 	vadd.f32	s13, s0, s15
 800712c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8007130:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007134:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8007138:	eea0 7a26 	vfma.f32	s14, s0, s13
 800713c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8007140:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007144:	e73c      	b.n	8006fc0 <__ieee754_acosf+0x24>
 8007146:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800718c <__ieee754_acosf+0x1f0>
 800714a:	e739      	b.n	8006fc0 <__ieee754_acosf+0x24>
 800714c:	00000000 	.word	0x00000000
 8007150:	40490fdb 	.word	0x40490fdb
 8007154:	3811ef08 	.word	0x3811ef08
 8007158:	3a4f7f04 	.word	0x3a4f7f04
 800715c:	bf303361 	.word	0xbf303361
 8007160:	33a22168 	.word	0x33a22168
 8007164:	bd241146 	.word	0xbd241146
 8007168:	3e4e0aa8 	.word	0x3e4e0aa8
 800716c:	bea6b090 	.word	0xbea6b090
 8007170:	3e2aaaab 	.word	0x3e2aaaab
 8007174:	3d9dc62e 	.word	0x3d9dc62e
 8007178:	4001572d 	.word	0x4001572d
 800717c:	c019d139 	.word	0xc019d139
 8007180:	3fc90fda 	.word	0x3fc90fda
 8007184:	b3a22168 	.word	0xb3a22168
 8007188:	40490fda 	.word	0x40490fda
 800718c:	3fc90fdb 	.word	0x3fc90fdb

08007190 <__ieee754_powf>:
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	ee10 5a90 	vmov	r5, s1
 8007198:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800719c:	ed2d 8b02 	vpush	{d8}
 80071a0:	eeb0 8a40 	vmov.f32	s16, s0
 80071a4:	eef0 8a60 	vmov.f32	s17, s1
 80071a8:	f000 8291 	beq.w	80076ce <__ieee754_powf+0x53e>
 80071ac:	ee10 8a10 	vmov	r8, s0
 80071b0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80071b4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80071b8:	dc06      	bgt.n	80071c8 <__ieee754_powf+0x38>
 80071ba:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80071be:	dd0a      	ble.n	80071d6 <__ieee754_powf+0x46>
 80071c0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80071c4:	f000 8283 	beq.w	80076ce <__ieee754_powf+0x53e>
 80071c8:	ecbd 8b02 	vpop	{d8}
 80071cc:	48d8      	ldr	r0, [pc, #864]	; (8007530 <__ieee754_powf+0x3a0>)
 80071ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d2:	f001 b885 	b.w	80082e0 <nanf>
 80071d6:	f1b8 0f00 	cmp.w	r8, #0
 80071da:	da1f      	bge.n	800721c <__ieee754_powf+0x8c>
 80071dc:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80071e0:	da2e      	bge.n	8007240 <__ieee754_powf+0xb0>
 80071e2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80071e6:	f2c0 827b 	blt.w	80076e0 <__ieee754_powf+0x550>
 80071ea:	15fb      	asrs	r3, r7, #23
 80071ec:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80071f0:	fa47 f603 	asr.w	r6, r7, r3
 80071f4:	fa06 f303 	lsl.w	r3, r6, r3
 80071f8:	42bb      	cmp	r3, r7
 80071fa:	f040 8271 	bne.w	80076e0 <__ieee754_powf+0x550>
 80071fe:	f006 0601 	and.w	r6, r6, #1
 8007202:	f1c6 0602 	rsb	r6, r6, #2
 8007206:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800720a:	d120      	bne.n	800724e <__ieee754_powf+0xbe>
 800720c:	2d00      	cmp	r5, #0
 800720e:	f280 8264 	bge.w	80076da <__ieee754_powf+0x54a>
 8007212:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007216:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800721a:	e00d      	b.n	8007238 <__ieee754_powf+0xa8>
 800721c:	2600      	movs	r6, #0
 800721e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007222:	d1f0      	bne.n	8007206 <__ieee754_powf+0x76>
 8007224:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007228:	f000 8251 	beq.w	80076ce <__ieee754_powf+0x53e>
 800722c:	dd0a      	ble.n	8007244 <__ieee754_powf+0xb4>
 800722e:	2d00      	cmp	r5, #0
 8007230:	f280 8250 	bge.w	80076d4 <__ieee754_powf+0x544>
 8007234:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007534 <__ieee754_powf+0x3a4>
 8007238:	ecbd 8b02 	vpop	{d8}
 800723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007240:	2602      	movs	r6, #2
 8007242:	e7ec      	b.n	800721e <__ieee754_powf+0x8e>
 8007244:	2d00      	cmp	r5, #0
 8007246:	daf5      	bge.n	8007234 <__ieee754_powf+0xa4>
 8007248:	eeb1 0a68 	vneg.f32	s0, s17
 800724c:	e7f4      	b.n	8007238 <__ieee754_powf+0xa8>
 800724e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007252:	d102      	bne.n	800725a <__ieee754_powf+0xca>
 8007254:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007258:	e7ee      	b.n	8007238 <__ieee754_powf+0xa8>
 800725a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800725e:	eeb0 0a48 	vmov.f32	s0, s16
 8007262:	d108      	bne.n	8007276 <__ieee754_powf+0xe6>
 8007264:	f1b8 0f00 	cmp.w	r8, #0
 8007268:	db05      	blt.n	8007276 <__ieee754_powf+0xe6>
 800726a:	ecbd 8b02 	vpop	{d8}
 800726e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007272:	f000 ba4d 	b.w	8007710 <__ieee754_sqrtf>
 8007276:	f7ff fb67 	bl	8006948 <fabsf>
 800727a:	b124      	cbz	r4, 8007286 <__ieee754_powf+0xf6>
 800727c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007280:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007284:	d117      	bne.n	80072b6 <__ieee754_powf+0x126>
 8007286:	2d00      	cmp	r5, #0
 8007288:	bfbc      	itt	lt
 800728a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800728e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007292:	f1b8 0f00 	cmp.w	r8, #0
 8007296:	dacf      	bge.n	8007238 <__ieee754_powf+0xa8>
 8007298:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800729c:	ea54 0306 	orrs.w	r3, r4, r6
 80072a0:	d104      	bne.n	80072ac <__ieee754_powf+0x11c>
 80072a2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80072a6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80072aa:	e7c5      	b.n	8007238 <__ieee754_powf+0xa8>
 80072ac:	2e01      	cmp	r6, #1
 80072ae:	d1c3      	bne.n	8007238 <__ieee754_powf+0xa8>
 80072b0:	eeb1 0a40 	vneg.f32	s0, s0
 80072b4:	e7c0      	b.n	8007238 <__ieee754_powf+0xa8>
 80072b6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80072ba:	3801      	subs	r0, #1
 80072bc:	ea56 0300 	orrs.w	r3, r6, r0
 80072c0:	d104      	bne.n	80072cc <__ieee754_powf+0x13c>
 80072c2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80072c6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80072ca:	e7b5      	b.n	8007238 <__ieee754_powf+0xa8>
 80072cc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80072d0:	dd6b      	ble.n	80073aa <__ieee754_powf+0x21a>
 80072d2:	4b99      	ldr	r3, [pc, #612]	; (8007538 <__ieee754_powf+0x3a8>)
 80072d4:	429c      	cmp	r4, r3
 80072d6:	dc06      	bgt.n	80072e6 <__ieee754_powf+0x156>
 80072d8:	2d00      	cmp	r5, #0
 80072da:	daab      	bge.n	8007234 <__ieee754_powf+0xa4>
 80072dc:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800753c <__ieee754_powf+0x3ac>
 80072e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80072e4:	e7a8      	b.n	8007238 <__ieee754_powf+0xa8>
 80072e6:	4b96      	ldr	r3, [pc, #600]	; (8007540 <__ieee754_powf+0x3b0>)
 80072e8:	429c      	cmp	r4, r3
 80072ea:	dd02      	ble.n	80072f2 <__ieee754_powf+0x162>
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	dcf5      	bgt.n	80072dc <__ieee754_powf+0x14c>
 80072f0:	e7a0      	b.n	8007234 <__ieee754_powf+0xa4>
 80072f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80072fa:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007544 <__ieee754_powf+0x3b4>
 80072fe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007302:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007306:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800730a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800730e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007548 <__ieee754_powf+0x3b8>
 800731a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800731e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800754c <__ieee754_powf+0x3bc>
 8007322:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007326:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007550 <__ieee754_powf+0x3c0>
 800732a:	eef0 6a67 	vmov.f32	s13, s15
 800732e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007332:	ee16 3a90 	vmov	r3, s13
 8007336:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800733a:	f023 030f 	bic.w	r3, r3, #15
 800733e:	ee00 3a90 	vmov	s1, r3
 8007342:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007346:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800734a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800734e:	f025 050f 	bic.w	r5, r5, #15
 8007352:	ee07 5a10 	vmov	s14, r5
 8007356:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800735a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800735e:	ee07 3a90 	vmov	s15, r3
 8007362:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007366:	3e01      	subs	r6, #1
 8007368:	ea56 0200 	orrs.w	r2, r6, r0
 800736c:	ee07 5a10 	vmov	s14, r5
 8007370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007374:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007378:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800737c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007380:	ee17 4a10 	vmov	r4, s14
 8007384:	bf08      	it	eq
 8007386:	eeb0 8a40 	vmoveq.f32	s16, s0
 800738a:	2c00      	cmp	r4, #0
 800738c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007390:	f340 8184 	ble.w	800769c <__ieee754_powf+0x50c>
 8007394:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007398:	f340 80fc 	ble.w	8007594 <__ieee754_powf+0x404>
 800739c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800753c <__ieee754_powf+0x3ac>
 80073a0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80073a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80073a8:	e746      	b.n	8007238 <__ieee754_powf+0xa8>
 80073aa:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80073ae:	bf01      	itttt	eq
 80073b0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007554 <__ieee754_powf+0x3c4>
 80073b4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80073b8:	f06f 0217 	mvneq.w	r2, #23
 80073bc:	ee17 4a90 	vmoveq	r4, s15
 80073c0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80073c4:	bf18      	it	ne
 80073c6:	2200      	movne	r2, #0
 80073c8:	3b7f      	subs	r3, #127	; 0x7f
 80073ca:	4413      	add	r3, r2
 80073cc:	4a62      	ldr	r2, [pc, #392]	; (8007558 <__ieee754_powf+0x3c8>)
 80073ce:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80073d2:	4294      	cmp	r4, r2
 80073d4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80073d8:	dd06      	ble.n	80073e8 <__ieee754_powf+0x258>
 80073da:	4a60      	ldr	r2, [pc, #384]	; (800755c <__ieee754_powf+0x3cc>)
 80073dc:	4294      	cmp	r4, r2
 80073de:	f340 80a4 	ble.w	800752a <__ieee754_powf+0x39a>
 80073e2:	3301      	adds	r3, #1
 80073e4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80073e8:	2400      	movs	r4, #0
 80073ea:	4a5d      	ldr	r2, [pc, #372]	; (8007560 <__ieee754_powf+0x3d0>)
 80073ec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80073f0:	ee07 1a90 	vmov	s15, r1
 80073f4:	ed92 7a00 	vldr	s14, [r2]
 80073f8:	4a5a      	ldr	r2, [pc, #360]	; (8007564 <__ieee754_powf+0x3d4>)
 80073fa:	ee37 6a27 	vadd.f32	s12, s14, s15
 80073fe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007402:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007406:	1049      	asrs	r1, r1, #1
 8007408:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800740c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007410:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007414:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007418:	ee06 1a10 	vmov	s12, r1
 800741c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007420:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007424:	ee14 7a90 	vmov	r7, s9
 8007428:	4017      	ands	r7, r2
 800742a:	ee05 7a90 	vmov	s11, r7
 800742e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007436:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007568 <__ieee754_powf+0x3d8>
 800743a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800743e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007442:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007446:	eddf 6a49 	vldr	s13, [pc, #292]	; 800756c <__ieee754_powf+0x3dc>
 800744a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800744e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007570 <__ieee754_powf+0x3e0>
 8007452:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007456:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007544 <__ieee754_powf+0x3b4>
 800745a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800745e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007574 <__ieee754_powf+0x3e4>
 8007462:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007466:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007578 <__ieee754_powf+0x3e8>
 800746a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800746e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007472:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007476:	ee66 6a86 	vmul.f32	s13, s13, s12
 800747a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800747e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007482:	eef0 7a45 	vmov.f32	s15, s10
 8007486:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800748a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800748e:	ee17 1a90 	vmov	r1, s15
 8007492:	4011      	ands	r1, r2
 8007494:	ee07 1a90 	vmov	s15, r1
 8007498:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800749c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80074a0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80074a4:	ee27 7a24 	vmul.f32	s14, s14, s9
 80074a8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80074ac:	eeb0 6a47 	vmov.f32	s12, s14
 80074b0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80074b4:	ee16 1a10 	vmov	r1, s12
 80074b8:	4011      	ands	r1, r2
 80074ba:	ee06 1a90 	vmov	s13, r1
 80074be:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80074c2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800757c <__ieee754_powf+0x3ec>
 80074c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007580 <__ieee754_powf+0x3f0>
 80074ca:	ee37 7a66 	vsub.f32	s14, s14, s13
 80074ce:	ee06 1a10 	vmov	s12, r1
 80074d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074d6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007584 <__ieee754_powf+0x3f4>
 80074da:	492b      	ldr	r1, [pc, #172]	; (8007588 <__ieee754_powf+0x3f8>)
 80074dc:	eea6 7a27 	vfma.f32	s14, s12, s15
 80074e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074e4:	edd1 7a00 	vldr	s15, [r1]
 80074e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	4b26      	ldr	r3, [pc, #152]	; (800758c <__ieee754_powf+0x3fc>)
 80074f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80074f6:	eef0 7a47 	vmov.f32	s15, s14
 80074fa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80074fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007502:	edd4 0a00 	vldr	s1, [r4]
 8007506:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800750a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800750e:	ee17 3a90 	vmov	r3, s15
 8007512:	4013      	ands	r3, r2
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800751c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007520:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007524:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007528:	e70f      	b.n	800734a <__ieee754_powf+0x1ba>
 800752a:	2401      	movs	r4, #1
 800752c:	e75d      	b.n	80073ea <__ieee754_powf+0x25a>
 800752e:	bf00      	nop
 8007530:	08008520 	.word	0x08008520
 8007534:	00000000 	.word	0x00000000
 8007538:	3f7ffff7 	.word	0x3f7ffff7
 800753c:	7149f2ca 	.word	0x7149f2ca
 8007540:	3f800007 	.word	0x3f800007
 8007544:	3eaaaaab 	.word	0x3eaaaaab
 8007548:	3fb8aa3b 	.word	0x3fb8aa3b
 800754c:	36eca570 	.word	0x36eca570
 8007550:	3fb8aa00 	.word	0x3fb8aa00
 8007554:	4b800000 	.word	0x4b800000
 8007558:	001cc471 	.word	0x001cc471
 800755c:	005db3d6 	.word	0x005db3d6
 8007560:	080086ac 	.word	0x080086ac
 8007564:	fffff000 	.word	0xfffff000
 8007568:	3e6c3255 	.word	0x3e6c3255
 800756c:	3e53f142 	.word	0x3e53f142
 8007570:	3e8ba305 	.word	0x3e8ba305
 8007574:	3edb6db7 	.word	0x3edb6db7
 8007578:	3f19999a 	.word	0x3f19999a
 800757c:	3f76384f 	.word	0x3f76384f
 8007580:	3f763800 	.word	0x3f763800
 8007584:	369dc3a0 	.word	0x369dc3a0
 8007588:	080086bc 	.word	0x080086bc
 800758c:	080086b4 	.word	0x080086b4
 8007590:	3338aa3c 	.word	0x3338aa3c
 8007594:	f040 8092 	bne.w	80076bc <__ieee754_powf+0x52c>
 8007598:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007590 <__ieee754_powf+0x400>
 800759c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80075a0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80075a4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80075a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ac:	f73f aef6 	bgt.w	800739c <__ieee754_powf+0x20c>
 80075b0:	15db      	asrs	r3, r3, #23
 80075b2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80075b6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80075ba:	4103      	asrs	r3, r0
 80075bc:	4423      	add	r3, r4
 80075be:	4949      	ldr	r1, [pc, #292]	; (80076e4 <__ieee754_powf+0x554>)
 80075c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80075c4:	3a7f      	subs	r2, #127	; 0x7f
 80075c6:	4111      	asrs	r1, r2
 80075c8:	ea23 0101 	bic.w	r1, r3, r1
 80075cc:	ee07 1a10 	vmov	s14, r1
 80075d0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80075d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80075d8:	f1c2 0217 	rsb	r2, r2, #23
 80075dc:	4110      	asrs	r0, r2
 80075de:	2c00      	cmp	r4, #0
 80075e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075e4:	bfb8      	it	lt
 80075e6:	4240      	neglt	r0, r0
 80075e8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80075ec:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80076e8 <__ieee754_powf+0x558>
 80075f0:	ee17 3a10 	vmov	r3, s14
 80075f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80075f8:	f023 030f 	bic.w	r3, r3, #15
 80075fc:	ee07 3a10 	vmov	s14, r3
 8007600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007604:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007608:	eddf 7a38 	vldr	s15, [pc, #224]	; 80076ec <__ieee754_powf+0x55c>
 800760c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007610:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8007614:	eddf 6a36 	vldr	s13, [pc, #216]	; 80076f0 <__ieee754_powf+0x560>
 8007618:	eeb0 0a67 	vmov.f32	s0, s15
 800761c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007620:	eeb0 6a40 	vmov.f32	s12, s0
 8007624:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007628:	ee20 7a00 	vmul.f32	s14, s0, s0
 800762c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007630:	eddf 6a30 	vldr	s13, [pc, #192]	; 80076f4 <__ieee754_powf+0x564>
 8007634:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80076f8 <__ieee754_powf+0x568>
 8007638:	eea7 6a26 	vfma.f32	s12, s14, s13
 800763c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80076fc <__ieee754_powf+0x56c>
 8007640:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007644:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8007700 <__ieee754_powf+0x570>
 8007648:	eea6 6a87 	vfma.f32	s12, s13, s14
 800764c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8007704 <__ieee754_powf+0x574>
 8007650:	eee6 6a07 	vfma.f32	s13, s12, s14
 8007654:	eeb0 6a40 	vmov.f32	s12, s0
 8007658:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800765c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007660:	eeb0 7a46 	vmov.f32	s14, s12
 8007664:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007668:	ee20 6a06 	vmul.f32	s12, s0, s12
 800766c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007670:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007678:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800767c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007680:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007684:	ee10 3a10 	vmov	r3, s0
 8007688:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800768c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007690:	da1a      	bge.n	80076c8 <__ieee754_powf+0x538>
 8007692:	f000 fe87 	bl	80083a4 <scalbnf>
 8007696:	ee20 0a08 	vmul.f32	s0, s0, s16
 800769a:	e5cd      	b.n	8007238 <__ieee754_powf+0xa8>
 800769c:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <__ieee754_powf+0x578>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	dd02      	ble.n	80076a8 <__ieee754_powf+0x518>
 80076a2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800770c <__ieee754_powf+0x57c>
 80076a6:	e67b      	b.n	80073a0 <__ieee754_powf+0x210>
 80076a8:	d108      	bne.n	80076bc <__ieee754_powf+0x52c>
 80076aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80076ae:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80076b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b6:	f6ff af7b 	blt.w	80075b0 <__ieee754_powf+0x420>
 80076ba:	e7f2      	b.n	80076a2 <__ieee754_powf+0x512>
 80076bc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80076c0:	f73f af76 	bgt.w	80075b0 <__ieee754_powf+0x420>
 80076c4:	2000      	movs	r0, #0
 80076c6:	e78f      	b.n	80075e8 <__ieee754_powf+0x458>
 80076c8:	ee00 3a10 	vmov	s0, r3
 80076cc:	e7e3      	b.n	8007696 <__ieee754_powf+0x506>
 80076ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80076d2:	e5b1      	b.n	8007238 <__ieee754_powf+0xa8>
 80076d4:	eeb0 0a68 	vmov.f32	s0, s17
 80076d8:	e5ae      	b.n	8007238 <__ieee754_powf+0xa8>
 80076da:	eeb0 0a48 	vmov.f32	s0, s16
 80076de:	e5ab      	b.n	8007238 <__ieee754_powf+0xa8>
 80076e0:	2600      	movs	r6, #0
 80076e2:	e590      	b.n	8007206 <__ieee754_powf+0x76>
 80076e4:	007fffff 	.word	0x007fffff
 80076e8:	3f317218 	.word	0x3f317218
 80076ec:	35bfbe8c 	.word	0x35bfbe8c
 80076f0:	3f317200 	.word	0x3f317200
 80076f4:	3331bb4c 	.word	0x3331bb4c
 80076f8:	b5ddea0e 	.word	0xb5ddea0e
 80076fc:	388ab355 	.word	0x388ab355
 8007700:	bb360b61 	.word	0xbb360b61
 8007704:	3e2aaaab 	.word	0x3e2aaaab
 8007708:	43160000 	.word	0x43160000
 800770c:	0da24260 	.word	0x0da24260

08007710 <__ieee754_sqrtf>:
 8007710:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007714:	4770      	bx	lr
	...

08007718 <__kernel_cos>:
 8007718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	ec57 6b10 	vmov	r6, r7, d0
 8007720:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007724:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007728:	ed8d 1b00 	vstr	d1, [sp]
 800772c:	da07      	bge.n	800773e <__kernel_cos+0x26>
 800772e:	ee10 0a10 	vmov	r0, s0
 8007732:	4639      	mov	r1, r7
 8007734:	f7f9 f99e 	bl	8000a74 <__aeabi_d2iz>
 8007738:	2800      	cmp	r0, #0
 800773a:	f000 8088 	beq.w	800784e <__kernel_cos+0x136>
 800773e:	4632      	mov	r2, r6
 8007740:	463b      	mov	r3, r7
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f8 fefb 	bl	8000540 <__aeabi_dmul>
 800774a:	4b51      	ldr	r3, [pc, #324]	; (8007890 <__kernel_cos+0x178>)
 800774c:	2200      	movs	r2, #0
 800774e:	4604      	mov	r4, r0
 8007750:	460d      	mov	r5, r1
 8007752:	f7f8 fef5 	bl	8000540 <__aeabi_dmul>
 8007756:	a340      	add	r3, pc, #256	; (adr r3, 8007858 <__kernel_cos+0x140>)
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	4682      	mov	sl, r0
 800775e:	468b      	mov	fp, r1
 8007760:	4620      	mov	r0, r4
 8007762:	4629      	mov	r1, r5
 8007764:	f7f8 feec 	bl	8000540 <__aeabi_dmul>
 8007768:	a33d      	add	r3, pc, #244	; (adr r3, 8007860 <__kernel_cos+0x148>)
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f7f8 fd31 	bl	80001d4 <__adddf3>
 8007772:	4622      	mov	r2, r4
 8007774:	462b      	mov	r3, r5
 8007776:	f7f8 fee3 	bl	8000540 <__aeabi_dmul>
 800777a:	a33b      	add	r3, pc, #236	; (adr r3, 8007868 <__kernel_cos+0x150>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f7f8 fd26 	bl	80001d0 <__aeabi_dsub>
 8007784:	4622      	mov	r2, r4
 8007786:	462b      	mov	r3, r5
 8007788:	f7f8 feda 	bl	8000540 <__aeabi_dmul>
 800778c:	a338      	add	r3, pc, #224	; (adr r3, 8007870 <__kernel_cos+0x158>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f7f8 fd1f 	bl	80001d4 <__adddf3>
 8007796:	4622      	mov	r2, r4
 8007798:	462b      	mov	r3, r5
 800779a:	f7f8 fed1 	bl	8000540 <__aeabi_dmul>
 800779e:	a336      	add	r3, pc, #216	; (adr r3, 8007878 <__kernel_cos+0x160>)
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f7f8 fd14 	bl	80001d0 <__aeabi_dsub>
 80077a8:	4622      	mov	r2, r4
 80077aa:	462b      	mov	r3, r5
 80077ac:	f7f8 fec8 	bl	8000540 <__aeabi_dmul>
 80077b0:	a333      	add	r3, pc, #204	; (adr r3, 8007880 <__kernel_cos+0x168>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 fd0d 	bl	80001d4 <__adddf3>
 80077ba:	4622      	mov	r2, r4
 80077bc:	462b      	mov	r3, r5
 80077be:	f7f8 febf 	bl	8000540 <__aeabi_dmul>
 80077c2:	4622      	mov	r2, r4
 80077c4:	462b      	mov	r3, r5
 80077c6:	f7f8 febb 	bl	8000540 <__aeabi_dmul>
 80077ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ce:	4604      	mov	r4, r0
 80077d0:	460d      	mov	r5, r1
 80077d2:	4630      	mov	r0, r6
 80077d4:	4639      	mov	r1, r7
 80077d6:	f7f8 feb3 	bl	8000540 <__aeabi_dmul>
 80077da:	460b      	mov	r3, r1
 80077dc:	4602      	mov	r2, r0
 80077de:	4629      	mov	r1, r5
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7f8 fcf5 	bl	80001d0 <__aeabi_dsub>
 80077e6:	4b2b      	ldr	r3, [pc, #172]	; (8007894 <__kernel_cos+0x17c>)
 80077e8:	4598      	cmp	r8, r3
 80077ea:	4606      	mov	r6, r0
 80077ec:	460f      	mov	r7, r1
 80077ee:	dc10      	bgt.n	8007812 <__kernel_cos+0xfa>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4650      	mov	r0, sl
 80077f6:	4659      	mov	r1, fp
 80077f8:	f7f8 fcea 	bl	80001d0 <__aeabi_dsub>
 80077fc:	460b      	mov	r3, r1
 80077fe:	4926      	ldr	r1, [pc, #152]	; (8007898 <__kernel_cos+0x180>)
 8007800:	4602      	mov	r2, r0
 8007802:	2000      	movs	r0, #0
 8007804:	f7f8 fce4 	bl	80001d0 <__aeabi_dsub>
 8007808:	ec41 0b10 	vmov	d0, r0, r1
 800780c:	b003      	add	sp, #12
 800780e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007812:	4b22      	ldr	r3, [pc, #136]	; (800789c <__kernel_cos+0x184>)
 8007814:	4920      	ldr	r1, [pc, #128]	; (8007898 <__kernel_cos+0x180>)
 8007816:	4598      	cmp	r8, r3
 8007818:	bfcc      	ite	gt
 800781a:	4d21      	ldrgt	r5, [pc, #132]	; (80078a0 <__kernel_cos+0x188>)
 800781c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007820:	2400      	movs	r4, #0
 8007822:	4622      	mov	r2, r4
 8007824:	462b      	mov	r3, r5
 8007826:	2000      	movs	r0, #0
 8007828:	f7f8 fcd2 	bl	80001d0 <__aeabi_dsub>
 800782c:	4622      	mov	r2, r4
 800782e:	4680      	mov	r8, r0
 8007830:	4689      	mov	r9, r1
 8007832:	462b      	mov	r3, r5
 8007834:	4650      	mov	r0, sl
 8007836:	4659      	mov	r1, fp
 8007838:	f7f8 fcca 	bl	80001d0 <__aeabi_dsub>
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	f7f8 fcc6 	bl	80001d0 <__aeabi_dsub>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4640      	mov	r0, r8
 800784a:	4649      	mov	r1, r9
 800784c:	e7da      	b.n	8007804 <__kernel_cos+0xec>
 800784e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007888 <__kernel_cos+0x170>
 8007852:	e7db      	b.n	800780c <__kernel_cos+0xf4>
 8007854:	f3af 8000 	nop.w
 8007858:	be8838d4 	.word	0xbe8838d4
 800785c:	bda8fae9 	.word	0xbda8fae9
 8007860:	bdb4b1c4 	.word	0xbdb4b1c4
 8007864:	3e21ee9e 	.word	0x3e21ee9e
 8007868:	809c52ad 	.word	0x809c52ad
 800786c:	3e927e4f 	.word	0x3e927e4f
 8007870:	19cb1590 	.word	0x19cb1590
 8007874:	3efa01a0 	.word	0x3efa01a0
 8007878:	16c15177 	.word	0x16c15177
 800787c:	3f56c16c 	.word	0x3f56c16c
 8007880:	5555554c 	.word	0x5555554c
 8007884:	3fa55555 	.word	0x3fa55555
 8007888:	00000000 	.word	0x00000000
 800788c:	3ff00000 	.word	0x3ff00000
 8007890:	3fe00000 	.word	0x3fe00000
 8007894:	3fd33332 	.word	0x3fd33332
 8007898:	3ff00000 	.word	0x3ff00000
 800789c:	3fe90000 	.word	0x3fe90000
 80078a0:	3fd20000 	.word	0x3fd20000
 80078a4:	00000000 	.word	0x00000000

080078a8 <__kernel_rem_pio2>:
 80078a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ac:	ed2d 8b02 	vpush	{d8}
 80078b0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80078b4:	f112 0f14 	cmn.w	r2, #20
 80078b8:	9308      	str	r3, [sp, #32]
 80078ba:	9101      	str	r1, [sp, #4]
 80078bc:	4bc6      	ldr	r3, [pc, #792]	; (8007bd8 <__kernel_rem_pio2+0x330>)
 80078be:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80078c0:	9009      	str	r0, [sp, #36]	; 0x24
 80078c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078c6:	9304      	str	r3, [sp, #16]
 80078c8:	9b08      	ldr	r3, [sp, #32]
 80078ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ce:	bfa8      	it	ge
 80078d0:	1ed4      	subge	r4, r2, #3
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	bfb2      	itee	lt
 80078d6:	2400      	movlt	r4, #0
 80078d8:	2318      	movge	r3, #24
 80078da:	fb94 f4f3 	sdivge	r4, r4, r3
 80078de:	f06f 0317 	mvn.w	r3, #23
 80078e2:	fb04 3303 	mla	r3, r4, r3, r3
 80078e6:	eb03 0a02 	add.w	sl, r3, r2
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	9a06      	ldr	r2, [sp, #24]
 80078ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007bc8 <__kernel_rem_pio2+0x320>
 80078f2:	eb03 0802 	add.w	r8, r3, r2
 80078f6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80078f8:	1aa7      	subs	r7, r4, r2
 80078fa:	ae20      	add	r6, sp, #128	; 0x80
 80078fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007900:	2500      	movs	r5, #0
 8007902:	4545      	cmp	r5, r8
 8007904:	dd18      	ble.n	8007938 <__kernel_rem_pio2+0x90>
 8007906:	9b08      	ldr	r3, [sp, #32]
 8007908:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800790c:	aa20      	add	r2, sp, #128	; 0x80
 800790e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007bc8 <__kernel_rem_pio2+0x320>
 8007912:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007916:	f1c3 0301 	rsb	r3, r3, #1
 800791a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800791e:	9307      	str	r3, [sp, #28]
 8007920:	9b07      	ldr	r3, [sp, #28]
 8007922:	9a04      	ldr	r2, [sp, #16]
 8007924:	4443      	add	r3, r8
 8007926:	429a      	cmp	r2, r3
 8007928:	db2f      	blt.n	800798a <__kernel_rem_pio2+0xe2>
 800792a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800792e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007932:	462f      	mov	r7, r5
 8007934:	2600      	movs	r6, #0
 8007936:	e01b      	b.n	8007970 <__kernel_rem_pio2+0xc8>
 8007938:	42ef      	cmn	r7, r5
 800793a:	d407      	bmi.n	800794c <__kernel_rem_pio2+0xa4>
 800793c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007940:	f7f8 fd94 	bl	800046c <__aeabi_i2d>
 8007944:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007948:	3501      	adds	r5, #1
 800794a:	e7da      	b.n	8007902 <__kernel_rem_pio2+0x5a>
 800794c:	ec51 0b18 	vmov	r0, r1, d8
 8007950:	e7f8      	b.n	8007944 <__kernel_rem_pio2+0x9c>
 8007952:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007956:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800795a:	f7f8 fdf1 	bl	8000540 <__aeabi_dmul>
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007966:	f7f8 fc35 	bl	80001d4 <__adddf3>
 800796a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800796e:	3601      	adds	r6, #1
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	429e      	cmp	r6, r3
 8007974:	f1a7 0708 	sub.w	r7, r7, #8
 8007978:	ddeb      	ble.n	8007952 <__kernel_rem_pio2+0xaa>
 800797a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800797e:	3508      	adds	r5, #8
 8007980:	ecab 7b02 	vstmia	fp!, {d7}
 8007984:	f108 0801 	add.w	r8, r8, #1
 8007988:	e7ca      	b.n	8007920 <__kernel_rem_pio2+0x78>
 800798a:	9b04      	ldr	r3, [sp, #16]
 800798c:	aa0c      	add	r2, sp, #48	; 0x30
 800798e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007992:	930b      	str	r3, [sp, #44]	; 0x2c
 8007994:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007996:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800799a:	9c04      	ldr	r4, [sp, #16]
 800799c:	930a      	str	r3, [sp, #40]	; 0x28
 800799e:	ab98      	add	r3, sp, #608	; 0x260
 80079a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079a4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80079a8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80079ac:	f8cd b008 	str.w	fp, [sp, #8]
 80079b0:	4625      	mov	r5, r4
 80079b2:	2d00      	cmp	r5, #0
 80079b4:	dc78      	bgt.n	8007aa8 <__kernel_rem_pio2+0x200>
 80079b6:	ec47 6b10 	vmov	d0, r6, r7
 80079ba:	4650      	mov	r0, sl
 80079bc:	f000 fbfc 	bl	80081b8 <scalbn>
 80079c0:	ec57 6b10 	vmov	r6, r7, d0
 80079c4:	2200      	movs	r2, #0
 80079c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80079ca:	ee10 0a10 	vmov	r0, s0
 80079ce:	4639      	mov	r1, r7
 80079d0:	f7f8 fdb6 	bl	8000540 <__aeabi_dmul>
 80079d4:	ec41 0b10 	vmov	d0, r0, r1
 80079d8:	f000 fb6e 	bl	80080b8 <floor>
 80079dc:	4b7f      	ldr	r3, [pc, #508]	; (8007bdc <__kernel_rem_pio2+0x334>)
 80079de:	ec51 0b10 	vmov	r0, r1, d0
 80079e2:	2200      	movs	r2, #0
 80079e4:	f7f8 fdac 	bl	8000540 <__aeabi_dmul>
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	4630      	mov	r0, r6
 80079ee:	4639      	mov	r1, r7
 80079f0:	f7f8 fbee 	bl	80001d0 <__aeabi_dsub>
 80079f4:	460f      	mov	r7, r1
 80079f6:	4606      	mov	r6, r0
 80079f8:	f7f9 f83c 	bl	8000a74 <__aeabi_d2iz>
 80079fc:	9007      	str	r0, [sp, #28]
 80079fe:	f7f8 fd35 	bl	800046c <__aeabi_i2d>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4630      	mov	r0, r6
 8007a08:	4639      	mov	r1, r7
 8007a0a:	f7f8 fbe1 	bl	80001d0 <__aeabi_dsub>
 8007a0e:	f1ba 0f00 	cmp.w	sl, #0
 8007a12:	4606      	mov	r6, r0
 8007a14:	460f      	mov	r7, r1
 8007a16:	dd70      	ble.n	8007afa <__kernel_rem_pio2+0x252>
 8007a18:	1e62      	subs	r2, r4, #1
 8007a1a:	ab0c      	add	r3, sp, #48	; 0x30
 8007a1c:	9d07      	ldr	r5, [sp, #28]
 8007a1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007a22:	f1ca 0118 	rsb	r1, sl, #24
 8007a26:	fa40 f301 	asr.w	r3, r0, r1
 8007a2a:	441d      	add	r5, r3
 8007a2c:	408b      	lsls	r3, r1
 8007a2e:	1ac0      	subs	r0, r0, r3
 8007a30:	ab0c      	add	r3, sp, #48	; 0x30
 8007a32:	9507      	str	r5, [sp, #28]
 8007a34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007a38:	f1ca 0317 	rsb	r3, sl, #23
 8007a3c:	fa40 f303 	asr.w	r3, r0, r3
 8007a40:	9302      	str	r3, [sp, #8]
 8007a42:	9b02      	ldr	r3, [sp, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dd66      	ble.n	8007b16 <__kernel_rem_pio2+0x26e>
 8007a48:	9b07      	ldr	r3, [sp, #28]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	9307      	str	r3, [sp, #28]
 8007a50:	4615      	mov	r5, r2
 8007a52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007a56:	4294      	cmp	r4, r2
 8007a58:	f300 8099 	bgt.w	8007b8e <__kernel_rem_pio2+0x2e6>
 8007a5c:	f1ba 0f00 	cmp.w	sl, #0
 8007a60:	dd07      	ble.n	8007a72 <__kernel_rem_pio2+0x1ca>
 8007a62:	f1ba 0f01 	cmp.w	sl, #1
 8007a66:	f000 80a5 	beq.w	8007bb4 <__kernel_rem_pio2+0x30c>
 8007a6a:	f1ba 0f02 	cmp.w	sl, #2
 8007a6e:	f000 80c1 	beq.w	8007bf4 <__kernel_rem_pio2+0x34c>
 8007a72:	9b02      	ldr	r3, [sp, #8]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d14e      	bne.n	8007b16 <__kernel_rem_pio2+0x26e>
 8007a78:	4632      	mov	r2, r6
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	4958      	ldr	r1, [pc, #352]	; (8007be0 <__kernel_rem_pio2+0x338>)
 8007a7e:	2000      	movs	r0, #0
 8007a80:	f7f8 fba6 	bl	80001d0 <__aeabi_dsub>
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	2d00      	cmp	r5, #0
 8007a8a:	d044      	beq.n	8007b16 <__kernel_rem_pio2+0x26e>
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007bd0 <__kernel_rem_pio2+0x328>
 8007a92:	f000 fb91 	bl	80081b8 <scalbn>
 8007a96:	4630      	mov	r0, r6
 8007a98:	4639      	mov	r1, r7
 8007a9a:	ec53 2b10 	vmov	r2, r3, d0
 8007a9e:	f7f8 fb97 	bl	80001d0 <__aeabi_dsub>
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	e036      	b.n	8007b16 <__kernel_rem_pio2+0x26e>
 8007aa8:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <__kernel_rem_pio2+0x33c>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	4630      	mov	r0, r6
 8007aae:	4639      	mov	r1, r7
 8007ab0:	f7f8 fd46 	bl	8000540 <__aeabi_dmul>
 8007ab4:	f7f8 ffde 	bl	8000a74 <__aeabi_d2iz>
 8007ab8:	f7f8 fcd8 	bl	800046c <__aeabi_i2d>
 8007abc:	4b4a      	ldr	r3, [pc, #296]	; (8007be8 <__kernel_rem_pio2+0x340>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4680      	mov	r8, r0
 8007ac2:	4689      	mov	r9, r1
 8007ac4:	f7f8 fd3c 	bl	8000540 <__aeabi_dmul>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4630      	mov	r0, r6
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7f8 fb7e 	bl	80001d0 <__aeabi_dsub>
 8007ad4:	f7f8 ffce 	bl	8000a74 <__aeabi_d2iz>
 8007ad8:	9b02      	ldr	r3, [sp, #8]
 8007ada:	f843 0b04 	str.w	r0, [r3], #4
 8007ade:	3d01      	subs	r5, #1
 8007ae0:	9302      	str	r3, [sp, #8]
 8007ae2:	ab70      	add	r3, sp, #448	; 0x1c0
 8007ae4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aec:	4640      	mov	r0, r8
 8007aee:	4649      	mov	r1, r9
 8007af0:	f7f8 fb70 	bl	80001d4 <__adddf3>
 8007af4:	4606      	mov	r6, r0
 8007af6:	460f      	mov	r7, r1
 8007af8:	e75b      	b.n	80079b2 <__kernel_rem_pio2+0x10a>
 8007afa:	d105      	bne.n	8007b08 <__kernel_rem_pio2+0x260>
 8007afc:	1e63      	subs	r3, r4, #1
 8007afe:	aa0c      	add	r2, sp, #48	; 0x30
 8007b00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b04:	15c3      	asrs	r3, r0, #23
 8007b06:	e79b      	b.n	8007a40 <__kernel_rem_pio2+0x198>
 8007b08:	4b38      	ldr	r3, [pc, #224]	; (8007bec <__kernel_rem_pio2+0x344>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f7f8 ff9e 	bl	8000a4c <__aeabi_dcmpge>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d139      	bne.n	8007b88 <__kernel_rem_pio2+0x2e0>
 8007b14:	9002      	str	r0, [sp, #8]
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	f7f8 ff77 	bl	8000a10 <__aeabi_dcmpeq>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	f000 80b4 	beq.w	8007c90 <__kernel_rem_pio2+0x3e8>
 8007b28:	f104 3bff 	add.w	fp, r4, #4294967295
 8007b2c:	465b      	mov	r3, fp
 8007b2e:	2200      	movs	r2, #0
 8007b30:	9904      	ldr	r1, [sp, #16]
 8007b32:	428b      	cmp	r3, r1
 8007b34:	da65      	bge.n	8007c02 <__kernel_rem_pio2+0x35a>
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d07b      	beq.n	8007c32 <__kernel_rem_pio2+0x38a>
 8007b3a:	ab0c      	add	r3, sp, #48	; 0x30
 8007b3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007b40:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80a0 	beq.w	8007c8a <__kernel_rem_pio2+0x3e2>
 8007b4a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007bd0 <__kernel_rem_pio2+0x328>
 8007b4e:	4650      	mov	r0, sl
 8007b50:	f000 fb32 	bl	80081b8 <scalbn>
 8007b54:	4f23      	ldr	r7, [pc, #140]	; (8007be4 <__kernel_rem_pio2+0x33c>)
 8007b56:	ec55 4b10 	vmov	r4, r5, d0
 8007b5a:	46d8      	mov	r8, fp
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	f1b8 0f00 	cmp.w	r8, #0
 8007b62:	f280 80cf 	bge.w	8007d04 <__kernel_rem_pio2+0x45c>
 8007b66:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007bc8 <__kernel_rem_pio2+0x320>
 8007b6a:	465f      	mov	r7, fp
 8007b6c:	f04f 0800 	mov.w	r8, #0
 8007b70:	2f00      	cmp	r7, #0
 8007b72:	f2c0 80fd 	blt.w	8007d70 <__kernel_rem_pio2+0x4c8>
 8007b76:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b78:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007bf0 <__kernel_rem_pio2+0x348>
 8007b7c:	ec55 4b18 	vmov	r4, r5, d8
 8007b80:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007b84:	2600      	movs	r6, #0
 8007b86:	e0e5      	b.n	8007d54 <__kernel_rem_pio2+0x4ac>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	9302      	str	r3, [sp, #8]
 8007b8c:	e75c      	b.n	8007a48 <__kernel_rem_pio2+0x1a0>
 8007b8e:	f8db 3000 	ldr.w	r3, [fp]
 8007b92:	b955      	cbnz	r5, 8007baa <__kernel_rem_pio2+0x302>
 8007b94:	b123      	cbz	r3, 8007ba0 <__kernel_rem_pio2+0x2f8>
 8007b96:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007b9a:	f8cb 3000 	str.w	r3, [fp]
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	3201      	adds	r2, #1
 8007ba2:	f10b 0b04 	add.w	fp, fp, #4
 8007ba6:	461d      	mov	r5, r3
 8007ba8:	e755      	b.n	8007a56 <__kernel_rem_pio2+0x1ae>
 8007baa:	1acb      	subs	r3, r1, r3
 8007bac:	f8cb 3000 	str.w	r3, [fp]
 8007bb0:	462b      	mov	r3, r5
 8007bb2:	e7f5      	b.n	8007ba0 <__kernel_rem_pio2+0x2f8>
 8007bb4:	1e62      	subs	r2, r4, #1
 8007bb6:	ab0c      	add	r3, sp, #48	; 0x30
 8007bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007bc0:	a90c      	add	r1, sp, #48	; 0x30
 8007bc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bc6:	e754      	b.n	8007a72 <__kernel_rem_pio2+0x1ca>
	...
 8007bd4:	3ff00000 	.word	0x3ff00000
 8007bd8:	08008708 	.word	0x08008708
 8007bdc:	40200000 	.word	0x40200000
 8007be0:	3ff00000 	.word	0x3ff00000
 8007be4:	3e700000 	.word	0x3e700000
 8007be8:	41700000 	.word	0x41700000
 8007bec:	3fe00000 	.word	0x3fe00000
 8007bf0:	080086c8 	.word	0x080086c8
 8007bf4:	1e62      	subs	r2, r4, #1
 8007bf6:	ab0c      	add	r3, sp, #48	; 0x30
 8007bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007c00:	e7de      	b.n	8007bc0 <__kernel_rem_pio2+0x318>
 8007c02:	a90c      	add	r1, sp, #48	; 0x30
 8007c04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	e790      	b.n	8007b30 <__kernel_rem_pio2+0x288>
 8007c0e:	3301      	adds	r3, #1
 8007c10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d0fa      	beq.n	8007c0e <__kernel_rem_pio2+0x366>
 8007c18:	9a08      	ldr	r2, [sp, #32]
 8007c1a:	18e3      	adds	r3, r4, r3
 8007c1c:	18a6      	adds	r6, r4, r2
 8007c1e:	aa20      	add	r2, sp, #128	; 0x80
 8007c20:	1c65      	adds	r5, r4, #1
 8007c22:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007c26:	9302      	str	r3, [sp, #8]
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	42ab      	cmp	r3, r5
 8007c2c:	da04      	bge.n	8007c38 <__kernel_rem_pio2+0x390>
 8007c2e:	461c      	mov	r4, r3
 8007c30:	e6b5      	b.n	800799e <__kernel_rem_pio2+0xf6>
 8007c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c34:	2301      	movs	r3, #1
 8007c36:	e7eb      	b.n	8007c10 <__kernel_rem_pio2+0x368>
 8007c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c3e:	f7f8 fc15 	bl	800046c <__aeabi_i2d>
 8007c42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c48:	46b3      	mov	fp, r6
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	2700      	movs	r7, #0
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	f04f 0900 	mov.w	r9, #0
 8007c56:	9b06      	ldr	r3, [sp, #24]
 8007c58:	429f      	cmp	r7, r3
 8007c5a:	dd06      	ble.n	8007c6a <__kernel_rem_pio2+0x3c2>
 8007c5c:	ab70      	add	r3, sp, #448	; 0x1c0
 8007c5e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c62:	e9c3 8900 	strd	r8, r9, [r3]
 8007c66:	3501      	adds	r5, #1
 8007c68:	e7de      	b.n	8007c28 <__kernel_rem_pio2+0x380>
 8007c6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007c6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007c72:	f7f8 fc65 	bl	8000540 <__aeabi_dmul>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 faa9 	bl	80001d4 <__adddf3>
 8007c82:	3701      	adds	r7, #1
 8007c84:	4680      	mov	r8, r0
 8007c86:	4689      	mov	r9, r1
 8007c88:	e7e5      	b.n	8007c56 <__kernel_rem_pio2+0x3ae>
 8007c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c8e:	e754      	b.n	8007b3a <__kernel_rem_pio2+0x292>
 8007c90:	ec47 6b10 	vmov	d0, r6, r7
 8007c94:	f1ca 0000 	rsb	r0, sl, #0
 8007c98:	f000 fa8e 	bl	80081b8 <scalbn>
 8007c9c:	ec57 6b10 	vmov	r6, r7, d0
 8007ca0:	4b9f      	ldr	r3, [pc, #636]	; (8007f20 <__kernel_rem_pio2+0x678>)
 8007ca2:	ee10 0a10 	vmov	r0, s0
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4639      	mov	r1, r7
 8007caa:	f7f8 fecf 	bl	8000a4c <__aeabi_dcmpge>
 8007cae:	b300      	cbz	r0, 8007cf2 <__kernel_rem_pio2+0x44a>
 8007cb0:	4b9c      	ldr	r3, [pc, #624]	; (8007f24 <__kernel_rem_pio2+0x67c>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fc42 	bl	8000540 <__aeabi_dmul>
 8007cbc:	f7f8 feda 	bl	8000a74 <__aeabi_d2iz>
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	f7f8 fbd3 	bl	800046c <__aeabi_i2d>
 8007cc6:	4b96      	ldr	r3, [pc, #600]	; (8007f20 <__kernel_rem_pio2+0x678>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f7f8 fc39 	bl	8000540 <__aeabi_dmul>
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f7f8 fa7b 	bl	80001d0 <__aeabi_dsub>
 8007cda:	f7f8 fecb 	bl	8000a74 <__aeabi_d2iz>
 8007cde:	f104 0b01 	add.w	fp, r4, #1
 8007ce2:	ab0c      	add	r3, sp, #48	; 0x30
 8007ce4:	f10a 0a18 	add.w	sl, sl, #24
 8007ce8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007cec:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007cf0:	e72b      	b.n	8007b4a <__kernel_rem_pio2+0x2a2>
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	4639      	mov	r1, r7
 8007cf6:	f7f8 febd 	bl	8000a74 <__aeabi_d2iz>
 8007cfa:	ab0c      	add	r3, sp, #48	; 0x30
 8007cfc:	46a3      	mov	fp, r4
 8007cfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d02:	e722      	b.n	8007b4a <__kernel_rem_pio2+0x2a2>
 8007d04:	ab70      	add	r3, sp, #448	; 0x1c0
 8007d06:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8007d0a:	ab0c      	add	r3, sp, #48	; 0x30
 8007d0c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007d10:	f7f8 fbac 	bl	800046c <__aeabi_i2d>
 8007d14:	4622      	mov	r2, r4
 8007d16:	462b      	mov	r3, r5
 8007d18:	f7f8 fc12 	bl	8000540 <__aeabi_dmul>
 8007d1c:	4632      	mov	r2, r6
 8007d1e:	e9c9 0100 	strd	r0, r1, [r9]
 8007d22:	463b      	mov	r3, r7
 8007d24:	4620      	mov	r0, r4
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7f8 fc0a 	bl	8000540 <__aeabi_dmul>
 8007d2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d30:	4604      	mov	r4, r0
 8007d32:	460d      	mov	r5, r1
 8007d34:	e713      	b.n	8007b5e <__kernel_rem_pio2+0x2b6>
 8007d36:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007d3a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007d3e:	f7f8 fbff 	bl	8000540 <__aeabi_dmul>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7f8 fa43 	bl	80001d4 <__adddf3>
 8007d4e:	3601      	adds	r6, #1
 8007d50:	4604      	mov	r4, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	9b04      	ldr	r3, [sp, #16]
 8007d56:	429e      	cmp	r6, r3
 8007d58:	dc01      	bgt.n	8007d5e <__kernel_rem_pio2+0x4b6>
 8007d5a:	45b0      	cmp	r8, r6
 8007d5c:	daeb      	bge.n	8007d36 <__kernel_rem_pio2+0x48e>
 8007d5e:	ab48      	add	r3, sp, #288	; 0x120
 8007d60:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d64:	e9c3 4500 	strd	r4, r5, [r3]
 8007d68:	3f01      	subs	r7, #1
 8007d6a:	f108 0801 	add.w	r8, r8, #1
 8007d6e:	e6ff      	b.n	8007b70 <__kernel_rem_pio2+0x2c8>
 8007d70:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	dc0b      	bgt.n	8007d8e <__kernel_rem_pio2+0x4e6>
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	dc6e      	bgt.n	8007e58 <__kernel_rem_pio2+0x5b0>
 8007d7a:	d045      	beq.n	8007e08 <__kernel_rem_pio2+0x560>
 8007d7c:	9b07      	ldr	r3, [sp, #28]
 8007d7e:	f003 0007 	and.w	r0, r3, #7
 8007d82:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007d86:	ecbd 8b02 	vpop	{d8}
 8007d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d1f3      	bne.n	8007d7c <__kernel_rem_pio2+0x4d4>
 8007d94:	ab48      	add	r3, sp, #288	; 0x120
 8007d96:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007d9a:	46d0      	mov	r8, sl
 8007d9c:	46d9      	mov	r9, fp
 8007d9e:	f1b9 0f00 	cmp.w	r9, #0
 8007da2:	f1a8 0808 	sub.w	r8, r8, #8
 8007da6:	dc64      	bgt.n	8007e72 <__kernel_rem_pio2+0x5ca>
 8007da8:	465c      	mov	r4, fp
 8007daa:	2c01      	cmp	r4, #1
 8007dac:	f1aa 0a08 	sub.w	sl, sl, #8
 8007db0:	dc7e      	bgt.n	8007eb0 <__kernel_rem_pio2+0x608>
 8007db2:	2000      	movs	r0, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	f1bb 0f01 	cmp.w	fp, #1
 8007dba:	f300 8097 	bgt.w	8007eec <__kernel_rem_pio2+0x644>
 8007dbe:	9b02      	ldr	r3, [sp, #8]
 8007dc0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007dc4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f040 8099 	bne.w	8007f00 <__kernel_rem_pio2+0x658>
 8007dce:	9b01      	ldr	r3, [sp, #4]
 8007dd0:	e9c3 5600 	strd	r5, r6, [r3]
 8007dd4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007dd8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007ddc:	e7ce      	b.n	8007d7c <__kernel_rem_pio2+0x4d4>
 8007dde:	ab48      	add	r3, sp, #288	; 0x120
 8007de0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 f9f4 	bl	80001d4 <__adddf3>
 8007dec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007df0:	f1bb 0f00 	cmp.w	fp, #0
 8007df4:	daf3      	bge.n	8007dde <__kernel_rem_pio2+0x536>
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	b113      	cbz	r3, 8007e00 <__kernel_rem_pio2+0x558>
 8007dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dfe:	4619      	mov	r1, r3
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	e9c3 0100 	strd	r0, r1, [r3]
 8007e06:	e7b9      	b.n	8007d7c <__kernel_rem_pio2+0x4d4>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	e7f0      	b.n	8007df0 <__kernel_rem_pio2+0x548>
 8007e0e:	ab48      	add	r3, sp, #288	; 0x120
 8007e10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f7f8 f9dc 	bl	80001d4 <__adddf3>
 8007e1c:	3c01      	subs	r4, #1
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	daf5      	bge.n	8007e0e <__kernel_rem_pio2+0x566>
 8007e22:	9b02      	ldr	r3, [sp, #8]
 8007e24:	b1e3      	cbz	r3, 8007e60 <__kernel_rem_pio2+0x5b8>
 8007e26:	4602      	mov	r2, r0
 8007e28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e2c:	9c01      	ldr	r4, [sp, #4]
 8007e2e:	e9c4 2300 	strd	r2, r3, [r4]
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007e3a:	f7f8 f9c9 	bl	80001d0 <__aeabi_dsub>
 8007e3e:	ad4a      	add	r5, sp, #296	; 0x128
 8007e40:	2401      	movs	r4, #1
 8007e42:	45a3      	cmp	fp, r4
 8007e44:	da0f      	bge.n	8007e66 <__kernel_rem_pio2+0x5be>
 8007e46:	9b02      	ldr	r3, [sp, #8]
 8007e48:	b113      	cbz	r3, 8007e50 <__kernel_rem_pio2+0x5a8>
 8007e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e4e:	4619      	mov	r1, r3
 8007e50:	9b01      	ldr	r3, [sp, #4]
 8007e52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007e56:	e791      	b.n	8007d7c <__kernel_rem_pio2+0x4d4>
 8007e58:	465c      	mov	r4, fp
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	e7de      	b.n	8007e1e <__kernel_rem_pio2+0x576>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	e7e2      	b.n	8007e2c <__kernel_rem_pio2+0x584>
 8007e66:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007e6a:	f7f8 f9b3 	bl	80001d4 <__adddf3>
 8007e6e:	3401      	adds	r4, #1
 8007e70:	e7e7      	b.n	8007e42 <__kernel_rem_pio2+0x59a>
 8007e72:	e9d8 4500 	ldrd	r4, r5, [r8]
 8007e76:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	4632      	mov	r2, r6
 8007e7e:	463b      	mov	r3, r7
 8007e80:	4629      	mov	r1, r5
 8007e82:	f7f8 f9a7 	bl	80001d4 <__adddf3>
 8007e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4620      	mov	r0, r4
 8007e90:	4629      	mov	r1, r5
 8007e92:	f7f8 f99d 	bl	80001d0 <__aeabi_dsub>
 8007e96:	4632      	mov	r2, r6
 8007e98:	463b      	mov	r3, r7
 8007e9a:	f7f8 f99b 	bl	80001d4 <__adddf3>
 8007e9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007ea2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8007ea6:	ed88 7b00 	vstr	d7, [r8]
 8007eaa:	f109 39ff 	add.w	r9, r9, #4294967295
 8007eae:	e776      	b.n	8007d9e <__kernel_rem_pio2+0x4f6>
 8007eb0:	e9da 8900 	ldrd	r8, r9, [sl]
 8007eb4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4632      	mov	r2, r6
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 f988 	bl	80001d4 <__adddf3>
 8007ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	f7f8 f97e 	bl	80001d0 <__aeabi_dsub>
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	f7f8 f97c 	bl	80001d4 <__adddf3>
 8007edc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007ee0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ee4:	ed8a 7b00 	vstr	d7, [sl]
 8007ee8:	3c01      	subs	r4, #1
 8007eea:	e75e      	b.n	8007daa <__kernel_rem_pio2+0x502>
 8007eec:	ab48      	add	r3, sp, #288	; 0x120
 8007eee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f7f8 f96d 	bl	80001d4 <__adddf3>
 8007efa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007efe:	e75a      	b.n	8007db6 <__kernel_rem_pio2+0x50e>
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	9a01      	ldr	r2, [sp, #4]
 8007f04:	601d      	str	r5, [r3, #0]
 8007f06:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007f0a:	605c      	str	r4, [r3, #4]
 8007f0c:	609f      	str	r7, [r3, #8]
 8007f0e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007f12:	60d3      	str	r3, [r2, #12]
 8007f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f18:	6110      	str	r0, [r2, #16]
 8007f1a:	6153      	str	r3, [r2, #20]
 8007f1c:	e72e      	b.n	8007d7c <__kernel_rem_pio2+0x4d4>
 8007f1e:	bf00      	nop
 8007f20:	41700000 	.word	0x41700000
 8007f24:	3e700000 	.word	0x3e700000

08007f28 <__kernel_sin>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	ed2d 8b04 	vpush	{d8-d9}
 8007f30:	eeb0 8a41 	vmov.f32	s16, s2
 8007f34:	eef0 8a61 	vmov.f32	s17, s3
 8007f38:	ec55 4b10 	vmov	r4, r5, d0
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f42:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007f46:	9001      	str	r0, [sp, #4]
 8007f48:	da06      	bge.n	8007f58 <__kernel_sin+0x30>
 8007f4a:	ee10 0a10 	vmov	r0, s0
 8007f4e:	4629      	mov	r1, r5
 8007f50:	f7f8 fd90 	bl	8000a74 <__aeabi_d2iz>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d051      	beq.n	8007ffc <__kernel_sin+0xd4>
 8007f58:	4622      	mov	r2, r4
 8007f5a:	462b      	mov	r3, r5
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f7f8 faee 	bl	8000540 <__aeabi_dmul>
 8007f64:	4682      	mov	sl, r0
 8007f66:	468b      	mov	fp, r1
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7f8 fae6 	bl	8000540 <__aeabi_dmul>
 8007f74:	a341      	add	r3, pc, #260	; (adr r3, 800807c <__kernel_sin+0x154>)
 8007f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	4650      	mov	r0, sl
 8007f80:	4659      	mov	r1, fp
 8007f82:	f7f8 fadd 	bl	8000540 <__aeabi_dmul>
 8007f86:	a33f      	add	r3, pc, #252	; (adr r3, 8008084 <__kernel_sin+0x15c>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 f920 	bl	80001d0 <__aeabi_dsub>
 8007f90:	4652      	mov	r2, sl
 8007f92:	465b      	mov	r3, fp
 8007f94:	f7f8 fad4 	bl	8000540 <__aeabi_dmul>
 8007f98:	a33c      	add	r3, pc, #240	; (adr r3, 800808c <__kernel_sin+0x164>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f919 	bl	80001d4 <__adddf3>
 8007fa2:	4652      	mov	r2, sl
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	f7f8 facb 	bl	8000540 <__aeabi_dmul>
 8007faa:	a33a      	add	r3, pc, #232	; (adr r3, 8008094 <__kernel_sin+0x16c>)
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7f8 f90e 	bl	80001d0 <__aeabi_dsub>
 8007fb4:	4652      	mov	r2, sl
 8007fb6:	465b      	mov	r3, fp
 8007fb8:	f7f8 fac2 	bl	8000540 <__aeabi_dmul>
 8007fbc:	a337      	add	r3, pc, #220	; (adr r3, 800809c <__kernel_sin+0x174>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 f907 	bl	80001d4 <__adddf3>
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	4606      	mov	r6, r0
 8007fca:	460f      	mov	r7, r1
 8007fcc:	b9eb      	cbnz	r3, 800800a <__kernel_sin+0xe2>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4650      	mov	r0, sl
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	f7f8 fab3 	bl	8000540 <__aeabi_dmul>
 8007fda:	a325      	add	r3, pc, #148	; (adr r3, 8008070 <__kernel_sin+0x148>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f7f8 f8f6 	bl	80001d0 <__aeabi_dsub>
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	f7f8 faaa 	bl	8000540 <__aeabi_dmul>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f7f8 f8ee 	bl	80001d4 <__adddf3>
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	ec45 4b10 	vmov	d0, r4, r5
 8008000:	b003      	add	sp, #12
 8008002:	ecbd 8b04 	vpop	{d8-d9}
 8008006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800a:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <__kernel_sin+0x150>)
 800800c:	ec51 0b18 	vmov	r0, r1, d8
 8008010:	2200      	movs	r2, #0
 8008012:	f7f8 fa95 	bl	8000540 <__aeabi_dmul>
 8008016:	4632      	mov	r2, r6
 8008018:	ec41 0b19 	vmov	d9, r0, r1
 800801c:	463b      	mov	r3, r7
 800801e:	4640      	mov	r0, r8
 8008020:	4649      	mov	r1, r9
 8008022:	f7f8 fa8d 	bl	8000540 <__aeabi_dmul>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	ec51 0b19 	vmov	r0, r1, d9
 800802e:	f7f8 f8cf 	bl	80001d0 <__aeabi_dsub>
 8008032:	4652      	mov	r2, sl
 8008034:	465b      	mov	r3, fp
 8008036:	f7f8 fa83 	bl	8000540 <__aeabi_dmul>
 800803a:	ec53 2b18 	vmov	r2, r3, d8
 800803e:	f7f8 f8c7 	bl	80001d0 <__aeabi_dsub>
 8008042:	a30b      	add	r3, pc, #44	; (adr r3, 8008070 <__kernel_sin+0x148>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	4606      	mov	r6, r0
 800804a:	460f      	mov	r7, r1
 800804c:	4640      	mov	r0, r8
 800804e:	4649      	mov	r1, r9
 8008050:	f7f8 fa76 	bl	8000540 <__aeabi_dmul>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 f8ba 	bl	80001d4 <__adddf3>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4620      	mov	r0, r4
 8008066:	4629      	mov	r1, r5
 8008068:	f7f8 f8b2 	bl	80001d0 <__aeabi_dsub>
 800806c:	e7c4      	b.n	8007ff8 <__kernel_sin+0xd0>
 800806e:	bf00      	nop
 8008070:	55555549 	.word	0x55555549
 8008074:	3fc55555 	.word	0x3fc55555
 8008078:	3fe00000 	.word	0x3fe00000
 800807c:	5acfd57c 	.word	0x5acfd57c
 8008080:	3de5d93a 	.word	0x3de5d93a
 8008084:	8a2b9ceb 	.word	0x8a2b9ceb
 8008088:	3e5ae5e6 	.word	0x3e5ae5e6
 800808c:	57b1fe7d 	.word	0x57b1fe7d
 8008090:	3ec71de3 	.word	0x3ec71de3
 8008094:	19c161d5 	.word	0x19c161d5
 8008098:	3f2a01a0 	.word	0x3f2a01a0
 800809c:	1110f8a6 	.word	0x1110f8a6
 80080a0:	3f811111 	.word	0x3f811111

080080a4 <fabs>:
 80080a4:	ec51 0b10 	vmov	r0, r1, d0
 80080a8:	ee10 2a10 	vmov	r2, s0
 80080ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080b0:	ec43 2b10 	vmov	d0, r2, r3
 80080b4:	4770      	bx	lr
	...

080080b8 <floor>:
 80080b8:	ec51 0b10 	vmov	r0, r1, d0
 80080bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80080c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80080c8:	2e13      	cmp	r6, #19
 80080ca:	ee10 5a10 	vmov	r5, s0
 80080ce:	ee10 8a10 	vmov	r8, s0
 80080d2:	460c      	mov	r4, r1
 80080d4:	dc32      	bgt.n	800813c <floor+0x84>
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	da14      	bge.n	8008104 <floor+0x4c>
 80080da:	a333      	add	r3, pc, #204	; (adr r3, 80081a8 <floor+0xf0>)
 80080dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e0:	f7f8 f878 	bl	80001d4 <__adddf3>
 80080e4:	2200      	movs	r2, #0
 80080e6:	2300      	movs	r3, #0
 80080e8:	f7f8 fcba 	bl	8000a60 <__aeabi_dcmpgt>
 80080ec:	b138      	cbz	r0, 80080fe <floor+0x46>
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	da57      	bge.n	80081a2 <floor+0xea>
 80080f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80080f6:	431d      	orrs	r5, r3
 80080f8:	d001      	beq.n	80080fe <floor+0x46>
 80080fa:	4c2d      	ldr	r4, [pc, #180]	; (80081b0 <floor+0xf8>)
 80080fc:	2500      	movs	r5, #0
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	e025      	b.n	8008150 <floor+0x98>
 8008104:	4f2b      	ldr	r7, [pc, #172]	; (80081b4 <floor+0xfc>)
 8008106:	4137      	asrs	r7, r6
 8008108:	ea01 0307 	and.w	r3, r1, r7
 800810c:	4303      	orrs	r3, r0
 800810e:	d01f      	beq.n	8008150 <floor+0x98>
 8008110:	a325      	add	r3, pc, #148	; (adr r3, 80081a8 <floor+0xf0>)
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	f7f8 f85d 	bl	80001d4 <__adddf3>
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	f7f8 fc9f 	bl	8000a60 <__aeabi_dcmpgt>
 8008122:	2800      	cmp	r0, #0
 8008124:	d0eb      	beq.n	80080fe <floor+0x46>
 8008126:	2c00      	cmp	r4, #0
 8008128:	bfbe      	ittt	lt
 800812a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800812e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008132:	19a4      	addlt	r4, r4, r6
 8008134:	ea24 0407 	bic.w	r4, r4, r7
 8008138:	2500      	movs	r5, #0
 800813a:	e7e0      	b.n	80080fe <floor+0x46>
 800813c:	2e33      	cmp	r6, #51	; 0x33
 800813e:	dd0b      	ble.n	8008158 <floor+0xa0>
 8008140:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008144:	d104      	bne.n	8008150 <floor+0x98>
 8008146:	ee10 2a10 	vmov	r2, s0
 800814a:	460b      	mov	r3, r1
 800814c:	f7f8 f842 	bl	80001d4 <__adddf3>
 8008150:	ec41 0b10 	vmov	d0, r0, r1
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800815c:	f04f 33ff 	mov.w	r3, #4294967295
 8008160:	fa23 f707 	lsr.w	r7, r3, r7
 8008164:	4207      	tst	r7, r0
 8008166:	d0f3      	beq.n	8008150 <floor+0x98>
 8008168:	a30f      	add	r3, pc, #60	; (adr r3, 80081a8 <floor+0xf0>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	f7f8 f831 	bl	80001d4 <__adddf3>
 8008172:	2200      	movs	r2, #0
 8008174:	2300      	movs	r3, #0
 8008176:	f7f8 fc73 	bl	8000a60 <__aeabi_dcmpgt>
 800817a:	2800      	cmp	r0, #0
 800817c:	d0bf      	beq.n	80080fe <floor+0x46>
 800817e:	2c00      	cmp	r4, #0
 8008180:	da02      	bge.n	8008188 <floor+0xd0>
 8008182:	2e14      	cmp	r6, #20
 8008184:	d103      	bne.n	800818e <floor+0xd6>
 8008186:	3401      	adds	r4, #1
 8008188:	ea25 0507 	bic.w	r5, r5, r7
 800818c:	e7b7      	b.n	80080fe <floor+0x46>
 800818e:	2301      	movs	r3, #1
 8008190:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008194:	fa03 f606 	lsl.w	r6, r3, r6
 8008198:	4435      	add	r5, r6
 800819a:	4545      	cmp	r5, r8
 800819c:	bf38      	it	cc
 800819e:	18e4      	addcc	r4, r4, r3
 80081a0:	e7f2      	b.n	8008188 <floor+0xd0>
 80081a2:	2500      	movs	r5, #0
 80081a4:	462c      	mov	r4, r5
 80081a6:	e7aa      	b.n	80080fe <floor+0x46>
 80081a8:	8800759c 	.word	0x8800759c
 80081ac:	7e37e43c 	.word	0x7e37e43c
 80081b0:	bff00000 	.word	0xbff00000
 80081b4:	000fffff 	.word	0x000fffff

080081b8 <scalbn>:
 80081b8:	b570      	push	{r4, r5, r6, lr}
 80081ba:	ec55 4b10 	vmov	r4, r5, d0
 80081be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80081c2:	4606      	mov	r6, r0
 80081c4:	462b      	mov	r3, r5
 80081c6:	b99a      	cbnz	r2, 80081f0 <scalbn+0x38>
 80081c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80081cc:	4323      	orrs	r3, r4
 80081ce:	d036      	beq.n	800823e <scalbn+0x86>
 80081d0:	4b39      	ldr	r3, [pc, #228]	; (80082b8 <scalbn+0x100>)
 80081d2:	4629      	mov	r1, r5
 80081d4:	ee10 0a10 	vmov	r0, s0
 80081d8:	2200      	movs	r2, #0
 80081da:	f7f8 f9b1 	bl	8000540 <__aeabi_dmul>
 80081de:	4b37      	ldr	r3, [pc, #220]	; (80082bc <scalbn+0x104>)
 80081e0:	429e      	cmp	r6, r3
 80081e2:	4604      	mov	r4, r0
 80081e4:	460d      	mov	r5, r1
 80081e6:	da10      	bge.n	800820a <scalbn+0x52>
 80081e8:	a32b      	add	r3, pc, #172	; (adr r3, 8008298 <scalbn+0xe0>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	e03a      	b.n	8008266 <scalbn+0xae>
 80081f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80081f4:	428a      	cmp	r2, r1
 80081f6:	d10c      	bne.n	8008212 <scalbn+0x5a>
 80081f8:	ee10 2a10 	vmov	r2, s0
 80081fc:	4620      	mov	r0, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	f7f7 ffe8 	bl	80001d4 <__adddf3>
 8008204:	4604      	mov	r4, r0
 8008206:	460d      	mov	r5, r1
 8008208:	e019      	b.n	800823e <scalbn+0x86>
 800820a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800820e:	460b      	mov	r3, r1
 8008210:	3a36      	subs	r2, #54	; 0x36
 8008212:	4432      	add	r2, r6
 8008214:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008218:	428a      	cmp	r2, r1
 800821a:	dd08      	ble.n	800822e <scalbn+0x76>
 800821c:	2d00      	cmp	r5, #0
 800821e:	a120      	add	r1, pc, #128	; (adr r1, 80082a0 <scalbn+0xe8>)
 8008220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008224:	da1c      	bge.n	8008260 <scalbn+0xa8>
 8008226:	a120      	add	r1, pc, #128	; (adr r1, 80082a8 <scalbn+0xf0>)
 8008228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822c:	e018      	b.n	8008260 <scalbn+0xa8>
 800822e:	2a00      	cmp	r2, #0
 8008230:	dd08      	ble.n	8008244 <scalbn+0x8c>
 8008232:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008236:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800823a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800823e:	ec45 4b10 	vmov	d0, r4, r5
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008248:	da19      	bge.n	800827e <scalbn+0xc6>
 800824a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800824e:	429e      	cmp	r6, r3
 8008250:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008254:	dd0a      	ble.n	800826c <scalbn+0xb4>
 8008256:	a112      	add	r1, pc, #72	; (adr r1, 80082a0 <scalbn+0xe8>)
 8008258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e2      	bne.n	8008226 <scalbn+0x6e>
 8008260:	a30f      	add	r3, pc, #60	; (adr r3, 80082a0 <scalbn+0xe8>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 f96b 	bl	8000540 <__aeabi_dmul>
 800826a:	e7cb      	b.n	8008204 <scalbn+0x4c>
 800826c:	a10a      	add	r1, pc, #40	; (adr r1, 8008298 <scalbn+0xe0>)
 800826e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0b8      	beq.n	80081e8 <scalbn+0x30>
 8008276:	a10e      	add	r1, pc, #56	; (adr r1, 80082b0 <scalbn+0xf8>)
 8008278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800827c:	e7b4      	b.n	80081e8 <scalbn+0x30>
 800827e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008282:	3236      	adds	r2, #54	; 0x36
 8008284:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008288:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800828c:	4620      	mov	r0, r4
 800828e:	4b0c      	ldr	r3, [pc, #48]	; (80082c0 <scalbn+0x108>)
 8008290:	2200      	movs	r2, #0
 8008292:	e7e8      	b.n	8008266 <scalbn+0xae>
 8008294:	f3af 8000 	nop.w
 8008298:	c2f8f359 	.word	0xc2f8f359
 800829c:	01a56e1f 	.word	0x01a56e1f
 80082a0:	8800759c 	.word	0x8800759c
 80082a4:	7e37e43c 	.word	0x7e37e43c
 80082a8:	8800759c 	.word	0x8800759c
 80082ac:	fe37e43c 	.word	0xfe37e43c
 80082b0:	c2f8f359 	.word	0xc2f8f359
 80082b4:	81a56e1f 	.word	0x81a56e1f
 80082b8:	43500000 	.word	0x43500000
 80082bc:	ffff3cb0 	.word	0xffff3cb0
 80082c0:	3c900000 	.word	0x3c900000

080082c4 <finitef>:
 80082c4:	b082      	sub	sp, #8
 80082c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80082ca:	9801      	ldr	r0, [sp, #4]
 80082cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80082d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80082d4:	bfac      	ite	ge
 80082d6:	2000      	movge	r0, #0
 80082d8:	2001      	movlt	r0, #1
 80082da:	b002      	add	sp, #8
 80082dc:	4770      	bx	lr
	...

080082e0 <nanf>:
 80082e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80082e8 <nanf+0x8>
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	7fc00000 	.word	0x7fc00000

080082ec <rintf>:
 80082ec:	ee10 2a10 	vmov	r2, s0
 80082f0:	b513      	push	{r0, r1, r4, lr}
 80082f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80082f6:	397f      	subs	r1, #127	; 0x7f
 80082f8:	2916      	cmp	r1, #22
 80082fa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80082fe:	dc47      	bgt.n	8008390 <rintf+0xa4>
 8008300:	b32b      	cbz	r3, 800834e <rintf+0x62>
 8008302:	2900      	cmp	r1, #0
 8008304:	ee10 3a10 	vmov	r3, s0
 8008308:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800830c:	da21      	bge.n	8008352 <rintf+0x66>
 800830e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8008312:	425b      	negs	r3, r3
 8008314:	4921      	ldr	r1, [pc, #132]	; (800839c <rintf+0xb0>)
 8008316:	0a5b      	lsrs	r3, r3, #9
 8008318:	0d12      	lsrs	r2, r2, #20
 800831a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800831e:	0512      	lsls	r2, r2, #20
 8008320:	4313      	orrs	r3, r2
 8008322:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	edd1 6a00 	vldr	s13, [r1]
 800832e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008332:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008336:	eddd 7a01 	vldr	s15, [sp, #4]
 800833a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800833e:	ee17 3a90 	vmov	r3, s15
 8008342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008346:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800834a:	ee00 3a10 	vmov	s0, r3
 800834e:	b002      	add	sp, #8
 8008350:	bd10      	pop	{r4, pc}
 8008352:	4a13      	ldr	r2, [pc, #76]	; (80083a0 <rintf+0xb4>)
 8008354:	410a      	asrs	r2, r1
 8008356:	4213      	tst	r3, r2
 8008358:	d0f9      	beq.n	800834e <rintf+0x62>
 800835a:	0854      	lsrs	r4, r2, #1
 800835c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008360:	d006      	beq.n	8008370 <rintf+0x84>
 8008362:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008366:	ea23 0304 	bic.w	r3, r3, r4
 800836a:	fa42 f101 	asr.w	r1, r2, r1
 800836e:	430b      	orrs	r3, r1
 8008370:	4a0a      	ldr	r2, [pc, #40]	; (800839c <rintf+0xb0>)
 8008372:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8008376:	ed90 7a00 	vldr	s14, [r0]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008382:	edcd 7a01 	vstr	s15, [sp, #4]
 8008386:	ed9d 0a01 	vldr	s0, [sp, #4]
 800838a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800838e:	e7de      	b.n	800834e <rintf+0x62>
 8008390:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008394:	d3db      	bcc.n	800834e <rintf+0x62>
 8008396:	ee30 0a00 	vadd.f32	s0, s0, s0
 800839a:	e7d8      	b.n	800834e <rintf+0x62>
 800839c:	08008718 	.word	0x08008718
 80083a0:	007fffff 	.word	0x007fffff

080083a4 <scalbnf>:
 80083a4:	ee10 3a10 	vmov	r3, s0
 80083a8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80083ac:	d025      	beq.n	80083fa <scalbnf+0x56>
 80083ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80083b2:	d302      	bcc.n	80083ba <scalbnf+0x16>
 80083b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80083b8:	4770      	bx	lr
 80083ba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80083be:	d122      	bne.n	8008406 <scalbnf+0x62>
 80083c0:	4b2a      	ldr	r3, [pc, #168]	; (800846c <scalbnf+0xc8>)
 80083c2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008470 <scalbnf+0xcc>
 80083c6:	4298      	cmp	r0, r3
 80083c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80083cc:	db16      	blt.n	80083fc <scalbnf+0x58>
 80083ce:	ee10 3a10 	vmov	r3, s0
 80083d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80083d6:	3a19      	subs	r2, #25
 80083d8:	4402      	add	r2, r0
 80083da:	2afe      	cmp	r2, #254	; 0xfe
 80083dc:	dd15      	ble.n	800840a <scalbnf+0x66>
 80083de:	ee10 3a10 	vmov	r3, s0
 80083e2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008474 <scalbnf+0xd0>
 80083e6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008478 <scalbnf+0xd4>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	eeb0 7a67 	vmov.f32	s14, s15
 80083f0:	bfb8      	it	lt
 80083f2:	eef0 7a66 	vmovlt.f32	s15, s13
 80083f6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80083fa:	4770      	bx	lr
 80083fc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800847c <scalbnf+0xd8>
 8008400:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008404:	4770      	bx	lr
 8008406:	0dd2      	lsrs	r2, r2, #23
 8008408:	e7e6      	b.n	80083d8 <scalbnf+0x34>
 800840a:	2a00      	cmp	r2, #0
 800840c:	dd06      	ble.n	800841c <scalbnf+0x78>
 800840e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008412:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008416:	ee00 3a10 	vmov	s0, r3
 800841a:	4770      	bx	lr
 800841c:	f112 0f16 	cmn.w	r2, #22
 8008420:	da1a      	bge.n	8008458 <scalbnf+0xb4>
 8008422:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008426:	4298      	cmp	r0, r3
 8008428:	ee10 3a10 	vmov	r3, s0
 800842c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008430:	dd0a      	ble.n	8008448 <scalbnf+0xa4>
 8008432:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008474 <scalbnf+0xd0>
 8008436:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008478 <scalbnf+0xd4>
 800843a:	eef0 7a40 	vmov.f32	s15, s0
 800843e:	2b00      	cmp	r3, #0
 8008440:	bf18      	it	ne
 8008442:	eeb0 0a47 	vmovne.f32	s0, s14
 8008446:	e7db      	b.n	8008400 <scalbnf+0x5c>
 8008448:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800847c <scalbnf+0xd8>
 800844c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008480 <scalbnf+0xdc>
 8008450:	eef0 7a40 	vmov.f32	s15, s0
 8008454:	2b00      	cmp	r3, #0
 8008456:	e7f3      	b.n	8008440 <scalbnf+0x9c>
 8008458:	3219      	adds	r2, #25
 800845a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800845e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008462:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008484 <scalbnf+0xe0>
 8008466:	ee07 3a10 	vmov	s14, r3
 800846a:	e7c4      	b.n	80083f6 <scalbnf+0x52>
 800846c:	ffff3cb0 	.word	0xffff3cb0
 8008470:	4c000000 	.word	0x4c000000
 8008474:	7149f2ca 	.word	0x7149f2ca
 8008478:	f149f2ca 	.word	0xf149f2ca
 800847c:	0da24260 	.word	0x0da24260
 8008480:	8da24260 	.word	0x8da24260
 8008484:	33000000 	.word	0x33000000

08008488 <__errno>:
 8008488:	4b01      	ldr	r3, [pc, #4]	; (8008490 <__errno+0x8>)
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20000010 	.word	0x20000010

08008494 <__libc_init_array>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4d0d      	ldr	r5, [pc, #52]	; (80084cc <__libc_init_array+0x38>)
 8008498:	4c0d      	ldr	r4, [pc, #52]	; (80084d0 <__libc_init_array+0x3c>)
 800849a:	1b64      	subs	r4, r4, r5
 800849c:	10a4      	asrs	r4, r4, #2
 800849e:	2600      	movs	r6, #0
 80084a0:	42a6      	cmp	r6, r4
 80084a2:	d109      	bne.n	80084b8 <__libc_init_array+0x24>
 80084a4:	4d0b      	ldr	r5, [pc, #44]	; (80084d4 <__libc_init_array+0x40>)
 80084a6:	4c0c      	ldr	r4, [pc, #48]	; (80084d8 <__libc_init_array+0x44>)
 80084a8:	f000 f820 	bl	80084ec <_init>
 80084ac:	1b64      	subs	r4, r4, r5
 80084ae:	10a4      	asrs	r4, r4, #2
 80084b0:	2600      	movs	r6, #0
 80084b2:	42a6      	cmp	r6, r4
 80084b4:	d105      	bne.n	80084c2 <__libc_init_array+0x2e>
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
 80084b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084bc:	4798      	blx	r3
 80084be:	3601      	adds	r6, #1
 80084c0:	e7ee      	b.n	80084a0 <__libc_init_array+0xc>
 80084c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c6:	4798      	blx	r3
 80084c8:	3601      	adds	r6, #1
 80084ca:	e7f2      	b.n	80084b2 <__libc_init_array+0x1e>
 80084cc:	08008728 	.word	0x08008728
 80084d0:	08008728 	.word	0x08008728
 80084d4:	08008728 	.word	0x08008728
 80084d8:	08008730 	.word	0x08008730

080084dc <memset>:
 80084dc:	4402      	add	r2, r0
 80084de:	4603      	mov	r3, r0
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d100      	bne.n	80084e6 <memset+0xa>
 80084e4:	4770      	bx	lr
 80084e6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ea:	e7f9      	b.n	80084e0 <memset+0x4>

080084ec <_init>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	bf00      	nop
 80084f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f2:	bc08      	pop	{r3}
 80084f4:	469e      	mov	lr, r3
 80084f6:	4770      	bx	lr

080084f8 <_fini>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	bf00      	nop
 80084fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fe:	bc08      	pop	{r3}
 8008500:	469e      	mov	lr, r3
 8008502:	4770      	bx	lr
